
## R====
### ppl ====

library(readxl)
library(dplyr)
library(data.table)
library(reshape2)
options(scipen = 9999)

masterfile_raw<- fread("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/6_Dec20/outputs/1revenue/Revenue_Q3FY21_scaled.csv",colClasses = c(customer_code= "character"))

salFile_raw <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/5_JunSep20/inputs/People/PeopleCost_use.xlsx")
names(masterfile_raw)
# We map cluster, zone as per the masterfile tagging
# Ensuring consistency in branch, cluster, zone mapping, mapping demographics
map_dem <- masterfile_raw %>% select(cif_branch_code,cluster,zone_name,max_balance_date)
map_dem <- distinct(map_dem)
str(map_dem)
map_dem <- map_dem[order(-map_dem$max_balance_date),] # sorting by balance date, with latest on top
map_dem<- map_dem[!duplicated(map_dem$cif_branch_code),] # now removing duplicates

chk<- map_dem[duplicated(map_dem$cif_branch_code),]; nrow(chk)# should be 0

sal_raw<- left_join(salFile_raw,map_dem,by=c("SolID_use"="cif_branch_code"))
nrow(sal_raw)- nrow(salFile_raw) # should be 0
sal_raw$max_balance_date <- NULL
# we can allocate only costs of branches for which we have customers in materfile
# hence filtering such costs only
sal_raw <- sal_raw %>% filter(SolID_use %in% masterfile_raw$cif_branch_code)

head(sal_raw,2)
setnames(sal_raw,old="Job",new="Functional Designation")
setnames(sal_raw,old="SolID_use",new="cif_branch_code")
setnames(sal_raw,old="Sum of Quarterly_Cost",new="Total_Salary")

map_dem2 <- map_dem %>% select(-c(max_balance_date))

masterfile_raw2 <- left_join(masterfile_raw,map_dem2,by="cif_branch_code")
nrow(masterfile_raw2)- nrow(masterfile_raw)# should be 0

# ensuring zone, cluster consistency by considering the latest cluster, zone, as per the quarter
masterfile_raw2 <- masterfile_raw2 %>% mutate(cluster.x = cluster.y,zone_name.x = zone_name.y)
setnames(masterfile_raw2,old="cluster.x",new="cluster"); masterfile_raw2$cluster.y <- NULL
setnames(masterfile_raw2,old="zone_name.x",new="zone_name"); masterfile_raw2$zone_name.y<- NULL

chk<- masterfile_raw2 %>% filter(cif_branch_code ==43) # to just see that new cluster & zone are used

masterfile <- masterfile_raw2

masterfile$avg_deposit_balance_M1_CA<- as.numeric(masterfile$avg_deposit_balance_M1_CA)   
masterfile$avg_deposit_balance_M1_SA<- as.numeric(masterfile$avg_deposit_balance_M1_SA)
masterfile$avg_deposit_balance_M2_CA<- as.numeric(masterfile$avg_deposit_balance_M2_CA)
masterfile$avg_deposit_balance_M2_SA<- as.numeric(masterfile$avg_deposit_balance_M2_SA)
masterfile$avg_deposit_balance_M3_CA<- as.numeric(masterfile$avg_deposit_balance_M3_CA)
masterfile$avg_deposit_balance_M3_SA<- as.numeric(masterfile$avg_deposit_balance_M3_SA)

colSums(is.na(masterfile))
masterfile[is.na(masterfile)] <- 0 # Replacing all NAs with 0

library(lubridate)
head(masterfile$create_date)
masterfile$create_date <- ymd(masterfile$create_date)
m1 <- '31-10-2020'
m2 <- '30-11-2020'
m1<- as.Date(m1, "%d-%m-%Y");m2<- as.Date(m2, "%d-%m-%Y")

masterfile$new_vintage <- ifelse(masterfile$create_date <= m1,3,
                                 ifelse(masterfile$create_date<=m2,2,1))
table(masterfile$new_vintage)
chk_vin <- masterfile %>% dplyr::group_by(new_vintage) %>%
  dplyr::summarize(min = min(create_date,na.rm=T), max = max(create_date,na.rm=T))

table(masterfile$new_vintage)
rm(chk_vin)

masterfile$avgMAB <- (masterfile$avg_deposit_balance_M1_CA+masterfile$avg_deposit_balance_M1_SA+
                        masterfile$avg_deposit_balance_M2_CA+masterfile$avg_deposit_balance_M2_SA+
                        masterfile$avg_deposit_balance_M3_CA+masterfile$avg_deposit_balance_M3_SA)/masterfile$new_vintage

chk2 <- masterfile[,c("avg_deposit_balance_M3_SA","avg_deposit_balance_M3_CA",
                      "avg_deposit_balance_M2_SA","avg_deposit_balance_M2_CA",
                      "avg_deposit_balance_M1_SA","avg_deposit_balance_M1_CA",
                      "new_vintage","avgMAB","create_date")]

# Adding branch deposit and withdrawal, to create a new variable
class(masterfile$Branch_Cash_Deposit);class(masterfile$Branch_Cash_Withdrawal)  # integer
masterfile$cash_dep_wdr<- masterfile$Branch_Cash_Deposit+ masterfile$Branch_Cash_Withdrawal
class(masterfile$cash_dep_wdr) # integer
class(masterfile$total_branch_txns) # integer
class(masterfile$Mb_usage);class(masterfile$netbanking_usage)
class(masterfile$`ATM txns`)  # on us txns of our cx

setnames(masterfile,old="atm_txns",new="ATM txns")

masterfile$`ATM txns` <- as.integer(masterfile$`ATM txns`)
class(masterfile$ATM_withdraw) # total atm transactions of our cx (irrespective of what atm they use)

chk <- masterfile[,c("ATM txns","ATM_withdraw")]
rm(chk)
table(masterfile$segment)
masterfile$SalaryMAB <- ifelse(masterfile$segment == "Salary",masterfile$avgMAB,0)
table(masterfile$SalaryMAB>0)


### Map CMS from ph file; commented out the below since it was mapped when allocating other costs
### ph====
ph<- fread("E:/shubhi ahuja/d/Shubhi/ph/PH_Customer_file_2020_12_31.csv",colClasses = c(customer_code = "character"))
#dd<- ph[duplicated(ph$customer_code),]  --- no duplicates in ph
names(ph)
ph_needed <- ph[,c("customer_code","cms_mapping","UPH","TPH")]
class(ph_needed$customer_code)
nrow(masterfile)
masterfile<- left_join(masterfile,ph_needed,by="customer_code")
nrow(masterfile)

# chk <- masterfile %>% select(cms_mapping.x,cms_mapping.y,UPH.x,UPH.y,TPH.x,TPH.y)
masterfile$cxcodeflag <- 1

masterfile[is.na(masterfile)] <- 0
##
masterfile_raw3 <- masterfile # just keeping a copy as backup

#************************************************************
# =====================SDM, ISM ===========================

# Keeping fields needed to make pivots
master_sel<- masterfile[,c("cif_branch_code","segment","avgMAB","cash_dep_wdr","Digital_txns","cxcodeflag","total_branch_txns","ATM_withdraw","SalaryMAB","Mb_usage","netbanking_usage")]
ncol(master_sel)
master_agg<- aggregate(master_sel[,c(3,4,5,6,7,8,9,10,11)], master_sel[,c(1,2)], FUN = sum, na.rm=T)

master_agg$cif_branch_code <- as.numeric(master_agg$cif_branch_code)
master_agg <- master_agg[order(master_agg$cif_branch_code),] # ordering by branch code

Branch<- dcast(master_agg,cif_branch_code~segment,value.var="total_branch_txns")
colSums(is.na(Branch))
Branch[is.na(Branch)] = 0

Branch <- Branch %>% 
  mutate(BranchLevel= rowSums(Branch[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

# == % value of drivers ==
Branch_Dr <- Branch %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))
names(Branch_Dr)
Branch_Dr<- Branch_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]
chk <- Branch_Dr
chk$chk <- rowSums(chk[,2:10],na.rm=T)
table(chk$chk)

rm(chk)

Branch_Dr <- rapply(Branch_Dr, function(x) ifelse(is.nan(x),0,x),how="replace")

cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Aspire','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,Branch,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))

hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

Branch_Dr <- hybrid_dr
#============= MAB ==============================2
MAB<- dcast(master_agg,cif_branch_code~segment,value.var="avgMAB")
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB))
MAB[is.na(MAB)] = 0

# Getting sum at branch level (will help in opex)
MAB <- MAB %>% 
  mutate(BranchLevel= rowSums(MAB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

# ======== % value of drivers ======2
MAB_Dr <- MAB %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))

names(MAB_Dr)
# hybrid
cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Aspire','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,MAB,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))

hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

MAB_Dr <- hybrid_dr


## 50% MAB + 50% Branch Txn
MAB_BranchTxn_Dr<-MAB_Dr
names(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"
MAB_BranchTxn_Dr<-MAB_BranchTxn_Dr[,c('cif_branch_code')]
MAB_BranchTxn_Dr<-data.frame(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"

MAB_BranchTxn_Dr$Abacus<-((0.5*(MAB_Dr$Abacus))+ (0.5*(Branch_Dr$Abacus)))
MAB_BranchTxn_Dr$Diplomat<-((0.5*(MAB_Dr$Diplomat))+ (0.5*(Branch_Dr$Diplomat)))
MAB_BranchTxn_Dr$Insignia<-((0.5*(MAB_Dr$Insignia))+ (0.5*(Branch_Dr$Insignia)))
MAB_BranchTxn_Dr$NR<-((0.5*(MAB_Dr$NR))+ (0.5*(Branch_Dr$NR)))
MAB_BranchTxn_Dr$Signature<-((0.5*(MAB_Dr$Signature))+ (0.5*(Branch_Dr$Signature)))
MAB_BranchTxn_Dr$Salary<-((0.5*(MAB_Dr$Salary))+ (0.5*(Branch_Dr$Salary)))
MAB_BranchTxn_Dr$Tasc<-((0.5*(MAB_Dr$Tasc))+ (0.5*(Branch_Dr$Tasc)))
MAB_BranchTxn_Dr$Mass<-((0.5*(MAB_Dr$Mass))+ (0.5*(Branch_Dr$Mass)))
MAB_BranchTxn_Dr$Aspire<-((0.5*(MAB_Dr$Aspire))+ (0.5*(Branch_Dr$Aspire)))

chk <- MAB_BranchTxn_Dr
chk$chk <- rowSums(chk[,2:10],na.rm=T)
table(chk$chk)

####### Salary file, to see which branches have SDM- non cash, and other designations #############2
sal <- sal_raw

# selecting relevant sdm roles
sal_sdm<- sal %>% filter(`Functional Designation` %in% c('Service Delivery Manager',
                                                         'Service Delivery Ambassador - Noncash','SDM',#'Service Delivery Head',
                                                         'Service Delivery Ambassador (Trainee) - Noncash'))
chk_990 <- sal_sdm %>% filter (cif_branch_code >= 990)

sal_sdm <- sal_sdm %>% filter(!cif_branch_code %in% chk_990$cif_branch_code)
sum(sal_sdm$Total_Salary,na.rm=T)
# aggregating salary which can be allcoaetd using same driver
sal_sdm_agg<- aggregate(sal_sdm[,"Total_Salary"],sal_sdm[,"cif_branch_code"],FUN = sum, na.rm=T)

########### Aspire Tag #################2

asp_master <- masterfile %>% filter (segment == "Aspire")
asp_master$cif_branch_code <- as.numeric(asp_master$cif_branch_code)
asp_master$Aspire_flag <- 1

# Error in aggregate.data.frame(as.data.frame(x), ...) : 
#   'by' must be a list
# hence, using , by =list()
asp_agg<- aggregate(asp_master[,"Aspire_flag"], by = list(asp_master[,"cif_branch_code"]), FUN= sum, na.rm =T)
colnames(asp_agg)
colnames(asp_agg)[1]= "cif_branch_code"
colnames(asp_agg)[2]= "Aspire_count"

######################### Joining SDM and Aspire Tables ####################2
sdm<- left_join(sal_sdm_agg,asp_agg,by="cif_branch_code")
sdm[is.na(sdm)] <- 0

sdm1<-sdm
sdm1<-data.frame(sdm1)
class(sdm1$Total_Salary)

##### Creating cost values =========  (20%, 80%)

# wherever there are Aspire cx, we allocate 20% of sdm cost to Aspire
sdm1$asp_cost<-ifelse(sdm1$Aspire_count>=1,(0.2*(sdm1$Total_Salary)),0)
# wherever there are aspire cx, we will allocate rest 80% of sdm cost to other segments
# if no aspire, we allocate 100% cost (since no aspire cx are there, it's not like anything will get allocated to aspire anyway)
sdm1$sdmcost_no_asp <- ifelse(sdm$Aspire_count >= 1,(0.8* (sdm1$Total_Salary)),sdm$Total_Salary )

################################# ism ##############################################2
sal_ism<- sal %>% filter(`Functional Designation` == 'Insignia Service Manager')  

sal_ism_agg<- aggregate(sal_ism[,"Total_Salary"],by=sal_ism[,"cif_branch_code"],FUN = sum, na.rm=T)
colnames(sal_ism_agg)[2] = "ism_cost"

################# Joining sdm and ism tables ###########################2
sdm2<- left_join(sdm1,sal_ism_agg,by="cif_branch_code")
colnames(sdm2)[2] <- "sdm_cost"
colnames(sdm2)[4] <- "asp_sdm_cost"

sdm3<- as.data.frame(sdm2)
sdm3[is.na(sdm3)]<- 0
# if ISM is present in branch, all ism cost goes to Insignia
sdm3$insig_cost<-ifelse(sdm3$ism_cost>=1,sdm3$ism_cost,0)

sdm3$sdmcost_no_asp_insig <- ifelse(sdm3$ism_cost >= 1,sdm3$sdmcost_no_asp,0 )
sdm3$sdmcost_no_asp <- ifelse(sdm3$ism_cost >= 1,0,sdm3$sdmcost_no_asp )
# coz if there is ism cost, that means all segments but aspire and insignia should be alloted the cost
# and the cost shouldn't be allotted twice, hence passing the value from no_Asp to no_asp_insig
# and making no_asp = 0, so that it's allotted only once, in no_asp_insig

names(sdm3)

# "asp_sdm_cost" : Aspire cost for all those drivers, will either have value, or will be 0, sorted
# Insignia cost has to be combination of: 
# insig_cost and sdmcost_no_asp (where we will allocate using driver)

# others will be basis driver value for :
# sdmcost_no_asp - to be allocated among all segments but Aspire

# sdmcost_no_asp_insig: to be allocated among all but Aspire & Insignia

########## Driver for all but Aspire ###########2
# ==================================Branch Txns ==================================2
Branch<- dcast(master_agg,cif_branch_code~segment,value.var="total_branch_txns")
colSums(is.na(Branch))
Branch[is.na(Branch)] = 0

Branch <- Branch %>% 
  mutate(BranchLevel= rowSums(Branch[,c('Abacus','Diplomat','Insignia','Mass','NR',
                                        'Salary','Signature','Tasc')],na.rm=TRUE))  # no aspire

#BranchB$Grandtotal = sum(BranchB$BranchLevel)

# == % value of drivers ==
Branch_Dr <- Branch %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel))  # no aspire
names(Branch_Dr)
Branch_Dr_noasp<- Branch_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass")]  # no ,"Aspire"

Branch_Dr_noasp <- rapply(Branch_Dr_noasp, function(x) ifelse(is.nan(x),0,x),how="replace")

# hybrid
cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE)) %>% 
  select(-c(Aspire))# no aspire
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,Branch,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
#hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel)) #,Aspire=(Aspire/BranchLevel)

hybrid_dr$Aspire <- 0
hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

Branch_Dr_noasp <- hybrid_dr


#============= MAB ==============================2
MAB<- dcast(master_agg,cif_branch_code~segment,value.var="avgMAB")
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB))
MAB[is.na(MAB)] = 0

# Getting sum at branch level (will help in opex)
MAB <- MAB %>% 
  mutate(BranchLevel= rowSums(MAB[,c('Abacus','Diplomat','Insignia','Mass',
                                     'NR','Salary','Signature','Tasc')],na.rm=TRUE))
#MAB$Grandtotal = sum(MAB_B$BranchLevel)
# ======== % value of drivers ======2
MAB_Dr <- MAB %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel))

MAB_Dr_noasp<- MAB_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass")]

# hybrid
cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE)) %>% 
  select(-c(Aspire))# no aspire
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,MAB,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
#hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel)) #,Aspire=(Aspire/BranchLevel)

hybrid_dr$Aspire <- 0
hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

MAB_Dr_noasp <- hybrid_dr

## 50% MAB + 50% Branch Txn
MAB_BranchTxn_noasp_Dr<-MAB_Dr_noasp
names(MAB_BranchTxn_noasp_Dr)
colnames(MAB_BranchTxn_noasp_Dr)[1]="cif_branch_code"
MAB_BranchTxn_noasp_Dr<-MAB_BranchTxn_noasp_Dr[,c('cif_branch_code')]
MAB_BranchTxn_noasp_Dr<-data.frame(MAB_BranchTxn_noasp_Dr)
colnames(MAB_BranchTxn_noasp_Dr)[1]="cif_branch_code"

MAB_BranchTxn_noasp_Dr$Abacus<-((0.5*(MAB_Dr_noasp$Abacus))+ (0.5*(Branch_Dr_noasp$Abacus)))
MAB_BranchTxn_noasp_Dr$Diplomat<-((0.5*(MAB_Dr_noasp$Diplomat))+ (0.5*(Branch_Dr_noasp$Diplomat)))
MAB_BranchTxn_noasp_Dr$Insignia<-((0.5*(MAB_Dr_noasp$Insignia))+ (0.5*(Branch_Dr_noasp$Insignia)))
MAB_BranchTxn_noasp_Dr$NR<-((0.5*(MAB_Dr_noasp$NR))+ (0.5*(Branch_Dr_noasp$NR)))
MAB_BranchTxn_noasp_Dr$Signature<-((0.5*(MAB_Dr_noasp$Signature))+ (0.5*(Branch_Dr_noasp$Signature)))
MAB_BranchTxn_noasp_Dr$Salary<-((0.5*(MAB_Dr_noasp$Salary))+ (0.5*(Branch_Dr_noasp$Salary)))
MAB_BranchTxn_noasp_Dr$Tasc<-((0.5*(MAB_Dr_noasp$Tasc))+ (0.5*(Branch_Dr_noasp$Tasc)))
MAB_BranchTxn_noasp_Dr$Mass<-((0.5*(MAB_Dr_noasp$Mass))+ (0.5*(Branch_Dr_noasp$Mass)))
MAB_BranchTxn_noasp_Dr$Aspire<-0 

############## Driver for all barring Aspire and Insignia ###########2

# ==================================Branch Txns ==================================2
Branch<- dcast(master_agg,cif_branch_code~segment,value.var="total_branch_txns")
colSums(is.na(Branch))
Branch[is.na(Branch)] = 0

Branch <- Branch %>% 
  mutate(BranchLevel= rowSums(Branch[,c('Abacus','Diplomat','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
# no aspire or insignia

#BranchB$Grandtotal = sum(BranchB$BranchLevel)
# == % value of drivers ==
Branch_Dr <- Branch %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel))
names(Branch_Dr)
Branch_Dr_noasp_insig<- Branch_Dr[,c("cif_branch_code","Abacus","Diplomat","NR","Signature",
                                     "Salary","Tasc","Mass")]

Branch_Dr_noasp_insig <- rapply(Branch_Dr_noasp_insig, function(x) ifelse(is.nan(x),0,x),how="replace")

# hybrid
cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Diplomat',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE)) %>% 
  select(-c(Aspire,Insignia))# no aspire
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,Branch,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
#hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
#hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","NR","Signature",
                         "Salary","Tasc","Mass","BranchLevel")] # Insignia,"Aspire"


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),#Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel)) #,Aspire=(Aspire/BranchLevel)

#hybrid_dr$Aspire <- 0
#hybrid_dr$Insignia <- 0
hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","NR","Signature", #,"Insignia"
                         "Salary","Tasc","Mass")] #,"Aspire"

Branch_Dr_noasp_insig <- hybrid_dr



#============= MAB ==============================2
MAB<- dcast(master_agg,cif_branch_code~segment,value.var="avgMAB")
# has average MAB values
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB))
MAB[is.na(MAB)] = 0

# Getting sum at branch level (will help in opex)
MAB <- MAB %>% 
  mutate(BranchLevel= rowSums(MAB[,c('Abacus','Diplomat','Mass','NR',
                                     'Salary','Signature','Tasc')],na.rm=TRUE))

#MAB$Grandtotal = sum(MAB_B$BranchLevel)
# ======== % value of drivers ======2
MAB_Dr <- MAB %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel))

MAB_Dr_noasp_insig<- MAB_Dr[,c("cif_branch_code","Abacus","Diplomat","NR","Signature",
                               "Salary","Tasc","Mass")]

# hybrid
cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Diplomat',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE)) %>% 
  select(-c(Aspire,Insignia))# no aspire
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,MAB,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
#hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
#hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","NR","Signature",
                         "Salary","Tasc","Mass","BranchLevel")] # Insignia,"Aspire"


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),#Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel)) #,Aspire=(Aspire/BranchLevel)

#hybrid_dr$Aspire <- 0
#hybrid_dr$Insignia <- 0
hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","NR","Signature", #,"Insignia"
                         "Salary","Tasc","Mass")] #,"Aspire"

MAB_Dr_noasp_insig <- hybrid_dr

## 50% MAB + 50% Branch Txn
MAB_BranchTxn_noasp_insig_Dr<-MAB_Dr_noasp_insig
names(MAB_BranchTxn_noasp_insig_Dr)
colnames(MAB_BranchTxn_noasp_insig_Dr)[1]="cif_branch_code"
MAB_BranchTxn_noasp_insig_Dr<-MAB_BranchTxn_noasp_insig_Dr[,c('cif_branch_code')]
MAB_BranchTxn_noasp_insig_Dr<-data.frame(MAB_BranchTxn_noasp_insig_Dr)
colnames(MAB_BranchTxn_noasp_insig_Dr)[1]="cif_branch_code"

MAB_BranchTxn_noasp_insig_Dr$Abacus<-((0.5*(MAB_Dr_noasp_insig$Abacus))+ (0.5*(Branch_Dr_noasp_insig$Abacus)))
MAB_BranchTxn_noasp_insig_Dr$Diplomat<-((0.5*(MAB_Dr_noasp_insig$Diplomat))+ (0.5*(Branch_Dr_noasp_insig$Diplomat)))
#MAB_BranchTxn_noasp_Dr$Insignia<-0
MAB_BranchTxn_noasp_insig_Dr$NR<-((0.5*(MAB_Dr_noasp_insig$NR))+ (0.5*(Branch_Dr_noasp_insig$NR)))
MAB_BranchTxn_noasp_insig_Dr$Signature<-((0.5*(MAB_Dr_noasp_insig$Signature))+ (0.5*(Branch_Dr_noasp_insig$Signature)))
MAB_BranchTxn_noasp_insig_Dr$Salary<-((0.5*(MAB_Dr_noasp_insig$Salary))+ (0.5*(Branch_Dr_noasp_insig$Salary)))
MAB_BranchTxn_noasp_insig_Dr$Tasc<-((0.5*(MAB_Dr_noasp_insig$Tasc))+ (0.5*(Branch_Dr_noasp_insig$Tasc)))
MAB_BranchTxn_noasp_insig_Dr$Mass<-((0.5*(MAB_Dr_noasp_insig$Mass))+ (0.5*(Branch_Dr_noasp_insig$Mass)))
#MAB_BranchTxn_Dr$Aspire<-0 

no_asp_insig_cost_all <- MAB_BranchTxn_noasp_insig_Dr
names(no_asp_insig_cost_all)
colnames(no_asp_insig_cost_all)[1]="cif_branch_code"
no_asp_insig_cost_all<-no_asp_insig_cost_all[,c('cif_branch_code')]
no_asp_insig_cost_all<-data.frame(no_asp_insig_cost_all)
colnames(no_asp_insig_cost_all)[1]="cif_branch_code"

#################################### SDM ISM Allocation ############

### 1.  No Aspire  (SDM cost being allocated to branches without Aspire cx)
# Aspire cx have gotten 20% of SDM costs, where there are no aspire cx, costs get allocated among other segments
# no asp to be allocated to driver created for no asp

# sdm3$sdmcost_no_asp

no_asp_cost_all <- MAB_BranchTxn_noasp_Dr
names(no_asp_cost_all)
colnames(no_asp_cost_all)[1]="cif_branch_code"
no_asp_cost_all<-no_asp_cost_all[,c('cif_branch_code')]
no_asp_cost_all<-data.frame(no_asp_cost_all)
colnames(no_asp_cost_all)[1]="cif_branch_code"

no_asp_cost_all<- merge(x= MAB_BranchTxn_noasp_Dr, y= sdm3[,c("cif_branch_code","sdmcost_no_asp")], by.x="cif_branch_code", by.y ="cif_branch_code", all.x = TRUE)
no_asp_cost_all<- no_asp_cost_all %>% mutate (
  Abacus = Abacus*sdmcost_no_asp,Diplomat= Diplomat*sdmcost_no_asp,Insignia=Insignia*sdmcost_no_asp,
  NR=NR*sdmcost_no_asp,Signature=Signature*sdmcost_no_asp,Salary=Salary*sdmcost_no_asp,
  Tasc=Tasc*sdmcost_no_asp,Mass=Mass*sdmcost_no_asp)
# removed aspire, since this is allocated to all seg but aspire

no_asp_cost_all<- no_asp_cost_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                                     "Salary","Tasc","Mass")] # removed aspire, since this is allocated to all seg but aspire

### 2. No Aspire and Insignia
# Costs to be allocated where there is SDM, and ISM 
# no asp_insignia to be allocated to driver created for no asp_insig

# sdm3$sdmcost_no_asp
no_asp_insig_cost_all<- merge(x= MAB_BranchTxn_noasp_insig_Dr, y= sdm3[,c("cif_branch_code","sdmcost_no_asp_insig")], by.x="cif_branch_code", by.y ="cif_branch_code", all.x = TRUE)
no_asp_insig_cost_all<- no_asp_insig_cost_all %>% mutate (
  Abacus = Abacus*sdmcost_no_asp_insig,Diplomat= Diplomat*sdmcost_no_asp_insig,
  NR=NR*sdmcost_no_asp_insig,Signature=Signature*sdmcost_no_asp_insig,Salary=Salary*sdmcost_no_asp_insig,
  Tasc=Tasc*sdmcost_no_asp_insig,Mass=Mass*sdmcost_no_asp_insig)
# removed aspire and Insignia, since this is allocated to all seg but aspire and Insignia

no_asp_insig_cost_all<- no_asp_insig_cost_all[,c("cif_branch_code","Abacus","Diplomat","NR","Signature",
                                                 "Salary","Tasc","Mass")]
# removed aspire and Insignia, since this is allocated to all seg but aspire and Insignia

#############3 Adjusting data frames, so that they can be appended)
sdm4<- as.data.frame(sdm3)
sdm4<- sdm4[,c("cif_branch_code","asp_sdm_cost","insig_cost")]

sdm4$Abacus <- 0
sdm4$Diplomat <- 0
sdm4$Insignia <- 0
sdm4$NR <- 0
sdm4$Signature <- 0
sdm4$Salary <- 0
sdm4$Tasc <- 0
sdm4$Mass <- 0
sdm4$Aspire <- sdm4$asp_sdm_cost

sdm4<- sdm4[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
               "Salary","Tasc","Mass","Aspire")]

noasp<- as.data.frame(no_asp_cost_all)
noasp$Aspire <- 0
# library(tibble)
# add_column(noasp,list(Aspire=0), .after = "Mass")

noaspinsig<- as.data.frame(no_asp_insig_cost_all)
noaspinsig$Aspire <- 0
noaspinsig$Insignia <- 0

noaspinsig<- noaspinsig[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                           "Salary","Tasc","Mass","Aspire")]

################3Appending all allocated figures, to get one final file ############3
sdm_appended<- rbind(sdm4, noasp, noaspinsig)

sdm_final<- aggregate(sdm_appended[-1],by= list(sdm_appended[,"cif_branch_code"]),FUN = sum, na.rm=T)
#sdm_appended2<- aggregate(sdm_appended,by= list(sdm_appended[,"cif_branch_code"]),FUN = sum, na.rm=T)

setnames(sdm_final,old="Group.1", new = "cif_branch_code")

sdm_final_raw <- sdm_final

chk11 <- sdm_final_raw
chk11 <- chk11 %>% filter (cif_branch_code %in% master_agg$cif_branch_code)
chk11$chk <- rowSums(chk11[2:10],na.rm = T)
sum(chk11$chk)

#sum(sal_sdm$Total_Salary) # total cost
#sum(sal_sdm$Total_Salary) - sum(chk11$chk)
# can allocate only if branch exists in masterfile
chk_sal_sdm <- sal_sdm_agg %>% filter(cif_branch_code %in% master_agg$cif_branch_code)
sum(chk_sal_sdm$Total_Salary)
sum(chk_sal_sdm$Total_Salary) - sum(chk11$chk)# if this is not zero, the diff is cost that's not allocated****

## NOTE:!!!!! ISM's cost is being allocated later in the code, so don't check for that
# Only check for SDM etc. *************

# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','sdm_final','masterfile') # add sdm_final
all <- ls()
remove <- all[!all %in% keep ]

rm(list = remove)

# Points File ==================================
june_raw <- fread("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/6_Dec20/inputs/3cost/people/Q3 data NTB.csv",colClasses = c(cif_number="character"))
#june_raw <- fread("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/5_JunSep20/inputs/People/NTB_Apr-Sept.csv",colClasses = c(cif_number="character"))

# cleaned up the file, filtered on relevant acct_open_date, & taken selected columns
june <- june_raw 
head(june_raw$ACCT_OPN_DATE); class(june_raw$ACCT_OPN_DATE) 
table(june$`Sourcing Month`)
#d <- '2019-10-01' # put date as 1 July, and not 30-Jun, since R was not reading dates correctly
#june <- june %>% filter (ACCT_OPN_DATE > d) # verify count with the raw dump, post date filter
names(june)
# column  8 - Type 1 is blank. Having 2 columns with same name is causing issues, so deleting column 8
june <- june[,-8]
table(june$`Sourcing Month`)
june <- june %>% filter(`Sourcing Month` %in% c('Oct','Nov','Dec'))
#Filter on these roles:  (Final_EMP_Role) : 1.	RMPA,2.	ROCASA,3.	 Business banker
table(june$Final_EMP_Role) # sample entries below

table(june$ROLE)
#june <- june %>% filter(Final_EMP_Role %in% c('RM PA','RO CASA','BB','BM'))
june <- june %>% filter(ROLE %in% c('RM PA','RO CASA','BB','BM'))
table(june$`Type 1`) # BLANK!!!!
table(june$Type)

# the below would work if we have Type populated
#tag <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/5_JunSep20/inputs/People/Points Account opening tag.xlsx")
june$`Type 1` <- NULL
# new
tag <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/6_Dec20/inputs/3cost/people/Points Account opening tag.xlsx",sheet="map")
june <- left_join(june,tag,by="product_no")
table(june$`Type 1`)
tag <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/6_Dec20/inputs/3cost/people/Points Account opening tag.xlsx",sheet="tag")

june <- left_join(june,tag,by="Type 1")
names(june)
table(june$`Type 1`)
table(june$Final_Type)

june$Type_use <- ifelse(june$`Type 1` == "SB-NR","NR",june$Final_Type)
table(june$Type_use)

#junepts<- june[,c("BR_NO","PRODUCT_NO","PRODUCT_NAME","CID_NUMBER","Final_EMP_Role","Type_use")]
junepts <- june %>% select(br_no,product_no,product_name,cif_number,ROLE,Type_use)
setnames(junepts,old="product_no", new="acc_scheme_code")
table(junepts$Type_use)
junepts$Average_points <- ifelse(junepts$Type_use == "Salary",1,
                                 ifelse(junepts$Type_use == "SB",2,
                                        ifelse(junepts$Type_use == "NR",3,4)))

table(junepts$Type_use,junepts$Average_points)

table(junepts$ROLE)

# Left join; could've done inner join to eliminate those whose points weren't mapped
#junepts<- left_join(junepts,points,by="acc_scheme_code")

colSums(is.na(junepts)) #17 scheme codes don't have points mapped to it
#junepts[is.na(junepts)] <- 0
#junepts$`Schem Name`<- NULL # removing scheme name, as it gives same info as product_name
setnames(junepts,old="product_name", new="acc_scheme_desc")
setnames(junepts,old="cif_number", new="customer_code")
setnames(junepts,old="br_no", new="cif_branch_code")

# read masterfile====2
masterfile <- masterfile_raw3
master_sel<- masterfile[,c("cif_branch_code","segment","cxcodeflag")]

masterfile<- masterfile[,c("customer_code","segment","cxcodeflag")] ##### check *******!!!!!!!!!!!!!!!!!!!!!
master_agg<- aggregate(master_sel[,c(3)], master_sel[,c(1,2)], FUN = sum, na.rm=T)
colnames(master_agg)[3] <- "cxcodeflag"
master_agg$cif_branch_code <- as.numeric(master_agg$cif_branch_code)
master_agg <- master_agg[order(master_agg$cif_branch_code),] # ordering by branch code

####### Joining with masterfile to get segments etc. ###########2
junepts<- left_join(masterfile,junepts,by="customer_code")

roleagg<- dcast(junepts,cif_branch_code~segment,value.var="Average_points",fun.aggregate = sum)

cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
# cx agg built on masteragg

colSums(is.na(roleagg))
roleagg[is.na(roleagg)] = 0

colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

# For some cx, we don't get tagging after joining with masterfile
# segment name for those is coming as NA
# We will allocate points from them to Mass segment, for respective branch

# roleagg$Mass<- roleagg$Mass+ roleagg$`NA`
# cxagg$Mass<- cxagg$Mass+ cxagg$`NA`

# now that those points have been allocated to mass, we can remove NA column
# roleagg$`NA` <- NULL
# cxagg$`NA` <- NULL

# adding missing segment for the role
#roleagg$Diplomat<- 0
#cxagg$Diplomat<- 0
# setnames(roleagg,old="TASC", new= "Tasc")
# setnames(cxagg,old="TASC", new= "Tasc")
class(roleagg$Abacus)

roleagg <- roleagg %>% 
  mutate(BranchLevel= rowSums(roleagg[,c('Abacus','Aspire','Diplomat','Insignia',
                                         'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Aspire','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,roleagg,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))

hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

############################ Allocating pts file################################2
# 1. Total salary: functional designation wise

# Pivot : Zone, cluster, branch_cif, sum of salary: functional designation wise
#sal<- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/People cost/2 Pivot Designation wise.xlsx",sheet="use")
sal<- sal_raw

# 2. Filtering needed designations

# filtering designations that have the same driver: Points file
# to allocate costs in one go

# Relationship Manager - Premium Accounts
# Business Banker - Business Banking
# Senior Relationship Manager - Premium Accounts
# RO CASA
# RM PA
sal_desig <- sal %>% filter(`Functional Designation` %in% c("Relationship Manager - Premium Accounts",
                                                            "Business Banker - Business Banking",
                                                            "Senior Relationship Manager - Premium Accounts",
                                                            "RO CASA",
                                                            "RM PA"))

# 3. Aggregating relevant salaries,branch wise

# Summing up costs of officer and clerk designation by branch code
# now we have total salary for these designations, branch wise
#             aggregate   total salary for quarter,  by branch code
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)
# Driver:

sal_driver_join<- left_join(hybrid_dr,sal_desig_agg,by="cif_branch_code") #hybrid_dr to be added here

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0  ###### Missing salaries for many drivers!!!!!!

names(sal_driver_join)


# Allocating costs 
points_all<- sal_driver_join %>% mutate (
  Abacus = Abacus*Total_Salary,Diplomat= Diplomat*Total_Salary,Insignia=Insignia*Total_Salary,
  NR=NR*Total_Salary,Signature=Signature*Total_Salary,Salary=Salary*Total_Salary,
  Tasc=Tasc*Total_Salary,Mass=Mass*Total_Salary,Aspire=Aspire*Total_Salary)

points_all<- points_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                           "Salary","Tasc","Mass","Aspire")]


# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk<- points_all
chk$chk <- rowSums(chk[2:10],na.rm = T)
sum(chk$chk)

sum(input_sal$Total_Salary) - sum(chk$chk) # if this is 0, we are good to go, otherwise Debug!

# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','points_all','sdm_final') # add sdm_final
all <- ls()
remove <- all[!all %in% keep ]

rm(list = remove)

## All Other Branch Level Files====
# read masterfile====2
masterfile <- masterfile_raw3

# Keeping fields needed to make pivots

master_sel<- masterfile[,c("cif_branch_code","segment","avgMAB","cash_dep_wdr","Digital_txns","cxcodeflag","total_branch_txns","ATM_withdraw","SalaryMAB","Mb_usage","netbanking_usage")]
master_agg<- aggregate(master_sel[,c(3,4,5,6,7,8,9,10,11)], master_sel[,c(1,2)], FUN = sum, na.rm=T)

master_agg$cif_branch_code <- as.numeric(master_agg$cif_branch_code)
master_agg <- master_agg[order(master_agg$cif_branch_code),] # ordering by branch code

## Drivers- Branch====
# =========Branch Txns ==
Branch<- dcast(master_agg,cif_branch_code~segment,value.var="total_branch_txns")
colSums(is.na(Branch))
Branch[is.na(Branch)] = 0

Branch <- Branch %>% 
  mutate(BranchLevel= rowSums(Branch[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

#BranchB$Grandtotal = sum(BranchB$BranchLevel)

# == % value of drivers ==
Branch_Dr <- Branch %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel)
)
names(Branch_Dr)
Branch_Dr<- Branch_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

Branch_Dr <- rapply(Branch_Dr, function(x) ifelse(is.nan(x),0,x),how="replace")

cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Aspire','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,Branch,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))

hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

Branch_Dr <- hybrid_dr


#============= MAB =======2
MAB<- dcast(master_agg,cif_branch_code~segment,value.var="avgMAB")
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB))
MAB[is.na(MAB)] = 0

# Getting sum at branch level (will help in opex)
MAB <- MAB %>% 
  mutate(BranchLevel= rowSums(MAB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

# ======== % value of drivers ==
MAB_Dr <- MAB %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel)
)
names(MAB_Dr)
MAB_Dr<- MAB_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]

# hybrid
cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)
colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Aspire','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cxagg,MAB,by="cif_branch_code")
colSums(is.na(hybrid))
hybrid[is.na(hybrid)] = 0

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)
class(hybrid$BranchLevel)
# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]


hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))

hybrid_dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire")]

MAB_Dr <- hybrid_dr

## 50% MAB + 50% Branch Txn
MAB_BranchTxn_Dr<-MAB_Dr
names(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"
MAB_BranchTxn_Dr<-MAB_BranchTxn_Dr[,c('cif_branch_code')]
MAB_BranchTxn_Dr<-data.frame(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"

MAB_BranchTxn_Dr$Abacus<-((0.5*(MAB_Dr$Abacus))+ (0.5*(Branch_Dr$Abacus)))
MAB_BranchTxn_Dr$Diplomat<-((0.5*(MAB_Dr$Diplomat))+ (0.5*(Branch_Dr$Diplomat)))
MAB_BranchTxn_Dr$Insignia<-((0.5*(MAB_Dr$Insignia))+ (0.5*(Branch_Dr$Insignia)))
MAB_BranchTxn_Dr$NR<-((0.5*(MAB_Dr$NR))+ (0.5*(Branch_Dr$NR)))
MAB_BranchTxn_Dr$Signature<-((0.5*(MAB_Dr$Signature))+ (0.5*(Branch_Dr$Signature)))
MAB_BranchTxn_Dr$Salary<-((0.5*(MAB_Dr$Salary))+ (0.5*(Branch_Dr$Salary)))
MAB_BranchTxn_Dr$Tasc<-((0.5*(MAB_Dr$Tasc))+ (0.5*(Branch_Dr$Tasc)))
MAB_BranchTxn_Dr$Mass<-((0.5*(MAB_Dr$Mass))+ (0.5*(Branch_Dr$Mass)))
MAB_BranchTxn_Dr$Aspire<-((0.5*(MAB_Dr$Aspire))+ (0.5*(Branch_Dr$Aspire)))


chkdr <- MAB_BranchTxn_Dr
chkdr$totaldr <- rowSums(chkdr[,2:10])
chkdr2 <- chkdr %>% filter(totaldr<0.9)

MAB_BranchTxn_Dr_fin <- MAB_BranchTxn_Dr

# =========== Cash deposit + withdrawal txns =
cash<- dcast(master_agg,cif_branch_code~segment,value.var="cash_dep_wdr")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(cash))
cash[is.na(cash)] = 0

# Getting sum at branch level (will help in opex)
cash <- cash %>% 
  mutate(BranchLevel= rowSums(cash[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

# ======== % value of drivers =
cash_Dr <- cash %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel)
)
names(cash_Dr)

cash_Dr<- cash_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                     "Mass","Aspire")]

### =========No. of customers ==
cx<- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag")
colSums(is.na(cx))
cx[is.na(cx)] = 0

cx <- cx %>% 
  mutate(BranchLevel= rowSums(cx[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

cx$Grandtotal = sum(cx$BranchLevel)

# == % value of drivers ==
cx_Dr <- cx %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel)
)
names(cx_Dr)
cx_Dr<- cx_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                 "Salary","Tasc","Mass","Aspire")]

# ====Digital ==========================================2
Dig<- dcast(master_agg,cif_branch_code~segment,value.var="Digital_txns")
colSums(is.na(Dig))
Dig[is.na(Dig)] = 0

Dig <- Dig %>% 
  mutate(BranchLevel= rowSums(Dig[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

# == % value of drivers ==
Dig_Dr <- Dig %>% mutate (
  Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
  NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
  Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel)
)
names(Dig_Dr)
Dig_Dr<- Dig_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                   "Salary","Tasc","Mass","Aspire")]

# =========== Cash deposit + withdrawal txns ================2
cash<- dcast(master_agg,cif_branch_code~segment,value.var="cash_dep_wdr")
cxagg <- dcast(master_agg,cif_branch_code~segment,value.var="cxcodeflag",fun.aggregate = sum)

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(cash))
cash[is.na(cash)] = 0

colSums(is.na(cxagg))
cxagg[is.na(cxagg)] = 0

# Getting sum at branch level (will help in opex)
cash <- cash %>% 
  mutate(BranchLevel= rowSums(cash[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

cxagg <- cxagg %>% 
  mutate(BranchLevel= rowSums(cxagg[,c('Abacus','Aspire','Diplomat','Insignia',
                                       'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

colnames(cxagg)<-paste(colnames(cxagg),"cx",sep="_")
colnames(cxagg)[1]="cif_branch_code"

hybrid <- left_join(cash,cxagg,by="cif_branch_code")

hybrid$Abacus <- ifelse(hybrid$BranchLevel == 0,hybrid$Abacus_cx,hybrid$Abacus)
hybrid$Diplomat <- ifelse(hybrid$BranchLevel == 0,hybrid$Diplomat_cx,hybrid$Diplomat)
hybrid$Insignia <- ifelse(hybrid$BranchLevel == 0,hybrid$Insignia_cx,hybrid$Insignia)
hybrid$NR <- ifelse(hybrid$BranchLevel == 0,hybrid$NR_cx,hybrid$NR)
hybrid$Signature <- ifelse(hybrid$BranchLevel == 0,hybrid$Signature_cx,hybrid$Signature)
hybrid$Salary <- ifelse(hybrid$BranchLevel == 0,hybrid$Salary_cx,hybrid$Salary)
hybrid$Tasc <- ifelse(hybrid$BranchLevel == 0,hybrid$Tasc_cx,hybrid$Tasc)
hybrid$Mass <- ifelse(hybrid$BranchLevel == 0,hybrid$Mass_cx,hybrid$Mass)
hybrid$Aspire <- ifelse(hybrid$BranchLevel == 0,hybrid$Aspire_cx,hybrid$Aspire)

# ======== % value of drivers ======2
hybrid$BranchLevel <- ifelse(hybrid$BranchLevel == 0,hybrid$BranchLevel_cx,hybrid$BranchLevel)

# making a hybrid driver
# if actual driver doesn't work, we use count of customers as driver instead

hybrid_agg <- hybrid [,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                         "Salary","Tasc","Mass","Aspire","BranchLevel")]
hybrid_dr <- hybrid_agg %>% mutate( Abacus = (Abacus/BranchLevel),Diplomat= (Diplomat/BranchLevel),Insignia=(Insignia/BranchLevel),
                                    NR=(NR/BranchLevel),Signature=(Signature/BranchLevel),Salary=(Salary/BranchLevel),
                                    Tasc=(Tasc/BranchLevel),Mass=(Mass/BranchLevel),Aspire=(Aspire/BranchLevel))
cash_Dr<- hybrid_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                       "Salary","Tasc","Mass","Aspire")]

#### 20% MAB + 80% Branch txn
MAB_BranchTxn_Dr_20<-MAB_Dr
names(MAB_BranchTxn_Dr_20)
colnames(MAB_BranchTxn_Dr_20)[1]="cif_branch_code"
MAB_BranchTxn_Dr_20<-MAB_BranchTxn_Dr_20[,c('cif_branch_code')]
MAB_BranchTxn_Dr_20<-data.frame(MAB_BranchTxn_Dr_20)
colnames(MAB_BranchTxn_Dr_20)[1]="cif_branch_code"

MAB_BranchTxn_Dr_20$Abacus<-((0.2*(MAB_Dr$Abacus))+ (0.8*(Branch_Dr$Abacus)))
MAB_BranchTxn_Dr_20$Diplomat<-((0.2*(MAB_Dr$Diplomat))+ (0.8*(Branch_Dr$Diplomat)))
MAB_BranchTxn_Dr_20$Insignia<-((0.2*(MAB_Dr$Insignia))+ (0.8*(Branch_Dr$Insignia)))
MAB_BranchTxn_Dr_20$NR<-((0.2*(MAB_Dr$NR))+ (0.8*(Branch_Dr$NR)))
MAB_BranchTxn_Dr_20$Signature<-((0.2*(MAB_Dr$Signature))+ (0.8*(Branch_Dr$Signature)))
MAB_BranchTxn_Dr_20$Salary<-((0.2*(MAB_Dr$Salary))+ (0.8*(Branch_Dr$Salary)))
MAB_BranchTxn_Dr_20$Tasc<-((0.2*(MAB_Dr$Tasc))+ (0.8*(Branch_Dr$Tasc)))
MAB_BranchTxn_Dr_20$Mass<-((0.2*(MAB_Dr$Mass))+ (0.8*(Branch_Dr$Mass)))
MAB_BranchTxn_Dr_20$Aspire<-((0.2*(MAB_Dr$Aspire))+ (0.8*(Branch_Dr$Aspire)))

#### 40% MAB + 60% Branch txn
MAB_BranchTxn_Dr_40<-MAB_Dr
names(MAB_BranchTxn_Dr_40)
colnames(MAB_BranchTxn_Dr_40)[1]="cif_branch_code"
MAB_BranchTxn_Dr_40<-MAB_BranchTxn_Dr_40[,c('cif_branch_code')]
MAB_BranchTxn_Dr_40<-data.frame(MAB_BranchTxn_Dr_40)
colnames(MAB_BranchTxn_Dr_40)[1]="cif_branch_code"

MAB_BranchTxn_Dr_40$Abacus<-((0.4*(MAB_Dr$Abacus))+ (0.6*(Branch_Dr$Abacus)))
MAB_BranchTxn_Dr_40$Diplomat<-((0.4*(MAB_Dr$Diplomat))+ (0.6*(Branch_Dr$Diplomat)))
MAB_BranchTxn_Dr_40$Insignia<-((0.4*(MAB_Dr$Insignia))+ (0.6*(Branch_Dr$Insignia)))
MAB_BranchTxn_Dr_40$NR<-((0.4*(MAB_Dr$NR))+ (0.6*(Branch_Dr$NR)))
MAB_BranchTxn_Dr_40$Signature<-((0.4*(MAB_Dr$Signature))+ (0.6*(Branch_Dr$Signature)))
MAB_BranchTxn_Dr_40$Salary<-((0.4*(MAB_Dr$Salary))+ (0.6*(Branch_Dr$Salary)))
MAB_BranchTxn_Dr_40$Tasc<-((0.4*(MAB_Dr$Tasc))+ (0.6*(Branch_Dr$Tasc)))
MAB_BranchTxn_Dr_40$Mass<-((0.4*(MAB_Dr$Mass))+ (0.6*(Branch_Dr$Mass)))
MAB_BranchTxn_Dr_40$Aspire<-((0.4*(MAB_Dr$Aspire))+ (0.6*(Branch_Dr$Aspire)))


############### branch allocation ###################

# =====1. 20%  MAB +80% Branch Txn =========2
# Summing: Officer, Clerk

# 1. Total salary: functional designation wise

# Pivot : Zone, cluster, branch_cif, sum of salary: functional designation wise
sal<- sal_raw

class(sal$Total_Salary)

sal$Total_Salary<- as.numeric(sal$Total_Salary)
#table(sal$`Functional Designation`)

chk_sal_desig <- as.data.frame(unique(sal[,"Functional Designation"]))

# 2. Filtering needed designations
# filtering designations that have the same driver: 20%MAB+80% Branch txn to allocate costs in one go

# 3. Aggregating relevant salaries,branch wise
# Summing up costs of officer and clerk designation by branch code
# now we have total salary for these designations, branch wise

sal_desig <- sal %>% filter(`Functional Designation` %in% c("OFFICER","Clerk",
                                                            "SUB STAFF","Operations"))
# see officer is in CAPS, or lower case
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

# Driver:
sal_driver_join<- left_join(MAB_BranchTxn_Dr_20,sal_desig_agg,by="cif_branch_code") 

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

names(sal_driver_join)
# Total Salary is salary of relevant designations for the Quarter!!

# Allocating costs 
al_MAB_2080<- sal_driver_join %>% mutate (
  Abacus = Abacus*Total_Salary,Diplomat= Diplomat*Total_Salary,Insignia=Insignia*Total_Salary,
  NR=NR*Total_Salary,Signature=Signature*Total_Salary,Salary=Salary*Total_Salary,
  Tasc=Tasc*Total_Salary,Mass=Mass*Total_Salary,Aspire=Aspire*Total_Salary
)

al_MAB_2080<- al_MAB_2080[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]

chk <- al_MAB_2080
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

sum(input_sal$Total_Salary) - sum(chk$chk)

# =========== Cash deposit + withdrawal txns ================2
# filtering designations that have the driver- Cash Deposit + Cash Withdrawal
# Service Delivery Ambassador - Cash ; # Service Delivery Ambassador (Trainee) - Cash ; # Cashier

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Service Delivery Ambassador - Cash",
                                                            "Service Delivery Ambassador (Trainee) - Cash",
                                                            "Cashier"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

# Joining with Driver file, to allocate cost
sal_driver_join<- left_join(cash_Dr,sal_desig_agg,by="cif_branch_code") 

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

names(sal_driver_join)

# Allocating costs 
al_cash<- sal_driver_join %>% mutate (
  Abacus = Abacus*Total_Salary,Diplomat= Diplomat*Total_Salary,Insignia=Insignia*Total_Salary,
  NR=NR*Total_Salary,Signature=Signature*Total_Salary,Salary=Salary*Total_Salary,
  Tasc=Tasc*Total_Salary,Mass=Mass*Total_Salary,Aspire=Aspire*Total_Salary
)

al_cash<- al_cash[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                     "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_cash
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

## ========================= Digital =============================2
# filtering designations that have the driver- Digital
# Relationship Officer (Trainee) - Digital Banking ; # Relationship Officer - Digital Banking

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Relationship Officer (Trainee) - Digital Banking",
                                                            "Relationship Officer - Digital Banking"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
# if there's no such roles, the above line will give error + sal_desig will have 0 records
# then comment the below, since there's no cost to allocate
#sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

# # Joining with Driver file, to allocate cost
# 
# sal_driver_join<- left_join(Dig_Dr,sal_desig_agg,by="cif_branch_code") 
# 
# colSums(is.na(sal_driver_join))
# sal_driver_join[is.na(sal_driver_join)] = 0
# 
# names(sal_driver_join)
# 
# # Allocating costs 
# al_digital<- sal_driver_join %>% mutate (
#   Abacus = Abacus*Total_Salary,Diplomat= Diplomat*Total_Salary,Insignia=Insignia*Total_Salary,
#   NR=NR*Total_Salary,Signature=Signature*Total_Salary,Salary=Salary*Total_Salary,
#   Tasc=Tasc*Total_Salary,Mass=Mass*Total_Salary,Aspire=Aspire*Total_Salary
# )
# 
# al_digital<- al_digital[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
#                            "Salary","Tasc","Mass","Aspire")]
# 
# # checks
# input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
# sum(input_sal$Total_Salary)
# 
# chk <- al_digital 
# chk$chk <- rowSums(chk[,2:10],na.rm=T)
# sum(chk$chk)
# sum(input_sal$Total_Salary) - sum(chk$chk)

## ========================= Customers =============================2
# filtering designations that have the driver- cx_Dr
# Digital Banking Ambassador # Officer - Sales # Peon
# Officer (Trainee) - Sales # Officer -  Sales  #Officer Trainee - Sales 
# Officer Sales (HTD) === new!!

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Digital Banking Ambassador",
                                                            "Officer - Sales",
                                                            "Peon","Officer (Trainee) - Sales",
                                                            "Officer -  Sales", "Officer Trainee - Sales",
                                                            "Officer Sales (HTD)"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

# Joining with Driver file, to allocate cost

sal_driver_join<- left_join(cx_Dr,sal_desig_agg,by="cif_branch_code") 

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

names(sal_driver_join)

# Allocating costs 
al_cx<- sal_driver_join %>% mutate (
  Abacus = Abacus*Total_Salary,Diplomat= Diplomat*Total_Salary,Insignia=Insignia*Total_Salary,
  NR=NR*Total_Salary,Signature=Signature*Total_Salary,Salary=Salary*Total_Salary,
  Tasc=Tasc*Total_Salary,Mass=Mass*Total_Salary,Aspire=Aspire*Total_Salary
)

al_cx<- al_cx[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                 "Salary","Tasc","Mass","Aspire")]

### Peon to be allocated as central (for branch 990), remove peon from the final allocated table
al_cx <- al_cx[al_cx$cif_branch_code!= 990,]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_cx # put relevant driver
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

############################### 50% MAB + 50% Txns ##########2

# filtering designations that have the driver- Digital
# Branch Manager

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Branch Manager","BM","Acting Branch Manager"))
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)

# Joining with Driver file, to allocate cost
chk <- MAB_BranchTxn_Dr # put relevant driver
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
table(chk$chk)

sal_driver_join<- left_join(MAB_BranchTxn_Dr,sal_desig_agg,by="cif_branch_code") 

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

names(sal_driver_join)

# Allocating costs 
al_MAB_5050<- sal_driver_join %>% mutate (
  Abacus = Abacus*Total_Salary,Diplomat= Diplomat*Total_Salary,Insignia=Insignia*Total_Salary,
  NR=NR*Total_Salary,Signature=Signature*Total_Salary,Salary=Salary*Total_Salary,
  Tasc=Tasc*Total_Salary,Mass=Mass*Total_Salary,Aspire=Aspire*Total_Salary
)

al_MAB_5050<- al_MAB_5050[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_MAB_5050 # put relevant driver===
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

######## 40% MAB + 60% Txns ####2

# filtering designations that have the driver- Service Banker
# Customer Service

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Service Banker","Customer Service",
                                                            "Branch Customer Service Manager"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

# Joining with Driver file, to allocate cost
sal_driver_join<- left_join(MAB_BranchTxn_Dr_40,sal_desig_agg,by="cif_branch_code") 

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

names(sal_driver_join)

# Allocating costs 
al_MAB_4060<- sal_driver_join %>% mutate (
  Abacus = Abacus*Total_Salary,Diplomat= Diplomat*Total_Salary,Insignia=Insignia*Total_Salary,
  NR=NR*Total_Salary,Signature=Signature*Total_Salary,Salary=Salary*Total_Salary,
  Tasc=Tasc*Total_Salary,Mass=Mass*Total_Salary,Aspire=Aspire*Total_Salary
)

al_MAB_4060<- al_MAB_4060[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_MAB_4060 # put relevant driver===
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

############################# Diplomat MAB ####################################################2
# Service Delivery Manager - Diplomatic Segment
sal_desig <- sal %>% filter(`Functional Designation` %in% c("Service Delivery Manager - Diplomatic Segment"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

# joining with a driver file, to get a shell of needed rows and columns
# we then put all values as 0, and then allocate all salary for a branch, to the relevant segment

sal_driver_join<- left_join(MAB_BranchTxn_Dr,sal_desig_agg,by="cif_branch_code")
sal_driver_join$Abacus <- 0
sal_driver_join$Diplomat <- 0
sal_driver_join$Insignia <- 0
sal_driver_join$NR <- 0
sal_driver_join$Signature <- 0
sal_driver_join$Salary <- 0
sal_driver_join$Tasc <- 0
sal_driver_join$Mass <- 0
sal_driver_join$Aspire <- 0

sal_driver_join$Diplomat <- sal_driver_join$Total_Salary

al_diplomat<- sal_driver_join[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                                 "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_diplomat # put relevant driver===
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

############################# NR MAB ######2
# Manager - NR Sales

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Manager - NR Sales"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

sal_driver_join<- left_join(MAB_Dr,sal_desig_agg,by="cif_branch_code")
sal_driver_join$Abacus <- 0
sal_driver_join$Diplomat <- 0
sal_driver_join$Insignia <- 0
sal_driver_join$NR <- 0
sal_driver_join$Signature <- 0
sal_driver_join$Salary <- 0
sal_driver_join$Tasc <- 0
sal_driver_join$Mass <- 0
sal_driver_join$Aspire <- 0

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

sal_driver_join$NR <- sal_driver_join$Total_Salary

al_NR<- sal_driver_join[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                           "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_NR # put relevant driver===
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

############################# Signature ####################################################2
# Relationship Manager - Signature Banking

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Relationship Manager - Signature Banking",
                                                            "Relationship Manager - Signature Banking",
                                                            "Relationship Manager - Signature Banking",
                                                            "Relationship Manager - Signature Banking",
                                                            "Relationship Manager - Signature Banking",
                                                            "Relationship Manager - Signature Banking"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

#**************************************************************
sum(sal_desig_agg,na.rm=T)- sum(sal_desig_agg$cif_branch_code)  # Check if this matches.!!!!!!!!!
#**************************************************************
# two drivers for Signature... the first one gets missed
# Signature 
# Signature MAB

sal_driver_join<- left_join(MAB_Dr,sal_desig_agg,by="cif_branch_code")
sal_driver_join$Abacus <- 0
sal_driver_join$Diplomat <- 0
sal_driver_join$Insignia <- 0
sal_driver_join$NR <- 0
sal_driver_join$Signature <- 0
sal_driver_join$Salary <- 0
sal_driver_join$Tasc <- 0
sal_driver_join$Mass <- 0
sal_driver_join$Aspire <- 0

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

sal_driver_join$Signature <- sal_driver_join$Total_Salary

al_Sig<- sal_driver_join[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                            "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_Sig # put relevant driver===
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

# Salary MAB ##
# Service Delivery Manager - Salary
sal_desig <- sal %>% filter(`Functional Designation` %in% c("Service Delivery Manager - Salary"))
nrow(sal_desig)
# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)

#sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

# sal_driver_join<- left_join(MAB_Dr,sal_desig_agg,by="cif_branch_code")
# sal_driver_join$Abacus <- 0
# sal_driver_join$Diplomat <- 0
# sal_driver_join$Insignia <- 0
# sal_driver_join$NR <- 0
# sal_driver_join$Signature <- 0
# sal_driver_join$Salary <- 0
# sal_driver_join$Tasc <- 0
# sal_driver_join$Mass <- 0
# sal_driver_join$Aspire <- 0
# 
# colSums(is.na(sal_driver_join))
# sal_driver_join[is.na(sal_driver_join)] = 0
# 
# sal_driver_join$Salary <- sal_driver_join$Total_Salary
# 
# al_Sal<- sal_driver_join[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
#                             "Salary","Tasc","Mass","Aspire")]

# checks
# input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
# sum(input_sal$Total_Salary)
# 
# chk <- al_Sal # put relevant driver===
# chk$chk <- rowSums(chk[,2:10],na.rm=T)
# sum(chk$chk)
# sum(input_sal$Total_Salary) - sum(chk$chk)

############################# Insignia: Insignia MAB+Txns ######################################2
# Client Experience Manager ; #Insignia Service Manager
sal_desig <- sal %>% filter(`Functional Designation` %in% c("Insignia Service Manager"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

sal_driver_join<- left_join(MAB_BranchTxn_Dr,sal_desig_agg,by="cif_branch_code")
sal_driver_join$Abacus <- 0
sal_driver_join$Diplomat <- 0
sal_driver_join$Insignia <- 0
sal_driver_join$NR <- 0
sal_driver_join$Signature <- 0
sal_driver_join$Salary <- 0
sal_driver_join$Tasc <- 0
sal_driver_join$Mass <- 0
sal_driver_join$Aspire <- 0

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

sal_driver_join$Insignia <- sal_driver_join$Total_Salary

al_Insig<- sal_driver_join[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                              "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_Insig # put relevant driver===
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

############################# Mass MAB  ######################################2
# Relationship Manager - Premium Accounts

sal_desig <- sal %>% filter(`Functional Designation` %in% c("Premium Current Accounts Relationship Manager"))

# 3. Aggregating relevant salaries,branch wise
sal_desig_agg <- aggregate(sal_desig[,c("Total_Salary")],sal_desig[,c("cif_branch_code")],FUN = sum, na.rm=T)
sum(sal_desig_agg$Total_Salary);sum(sal_desig$Total_Salary)

sal_driver_join<- left_join(MAB_Dr,sal_desig_agg,by="cif_branch_code")
sal_driver_join$Abacus <- 0
sal_driver_join$Diplomat <- 0
sal_driver_join$Insignia <- 0
sal_driver_join$NR <- 0
sal_driver_join$Signature <- 0
sal_driver_join$Salary <- 0
sal_driver_join$Tasc <- 0
sal_driver_join$Mass <- 0
sal_driver_join$Aspire <- 0

colSums(is.na(sal_driver_join))
sal_driver_join[is.na(sal_driver_join)] = 0

sal_driver_join$Mass <- sal_driver_join$Total_Salary

al_mass<- sal_driver_join[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]

# checks
input_sal <- sal_desig_agg %>% filter(cif_branch_code %in% master_sel$cif_branch_code)
sum(input_sal$Total_Salary)

chk <- al_mass # put relevant driver===
chk$chk <- rowSums(chk[,2:10],na.rm=T)
sum(chk$chk)
sum(input_sal$Total_Salary) - sum(chk$chk)

######################## Compiling all allocated 
### first!!! : Run sdm 2 code and Points file code too

ob_name <-as.data.frame(ls()); colnames(ob_name)[1]<-"name"
ob_name2 <- ob_name %>% filter(name %like% 'al_')
ob_name3 <- ob_name2 %>% filter(!name %like% 'sal_')

setdiff(ob_name2$name,ob_name3$name) # should be df that are sal related, not allocation df

names_df <- ob_name3$name

# for (i in names_df) {
#   df= get(i)
#   print(i)
#   print(nrow(df)) # should not be empty df
#   print(ncol(df)) # should all have 10 columns
# }
names_df

pplbranch_sep<- do.call("rbind", list(al_MAB_2080, al_cash,al_cx,al_MAB_5050,al_MAB_4060,
                                      al_diplomat,al_NR,al_Sig,al_Insig,al_mass,sdm_final,points_all))

# pplbranch_sep<- do.call("rbind", list(al_MAB_2080, al_cash, al_digital,al_cx,al_MAB_5050,al_MAB_4060,
#                                       al_diplomat,al_NR,al_Sig,al_Insig,al_mass,sdm_final,points_all))

# pplbranch_sep<- do.call("rbind", list(al_MAB_2080, al_cash, al_digital,al_cx,al_MAB_5050,al_MAB_4060,
#                                       al_diplomat,al_NR,al_Sig,al_Sal,al_Insig,al_mass,sdm_final,points_all))

uniqbranch <- masterfile[!duplicated(masterfile$cif_branch_code),]
uniqbranch <- uniqbranch[,c("cif_branch_code","cif_branch_name","cluster","zone_name")]

#write.csv(uniqbranch,"E:/shubhi ahuja/d/Shubhi/15 Unit Economics/4_Dec19_Mar20/checks/Marbranches.csv",row.names = F)

sum(pplbranch_sep,na.rm=T)- sum(pplbranch_sep$cif_branch_code)

sum(al_MAB_2080,na.rm=T)- sum(al_MAB_2080$cif_branch_code)
sum(al_cash,na.rm=T)- sum(al_cash$cif_branch_code)
sum(al_digital,na.rm=T)- sum(al_digital$cif_branch_code)
sum(al_cx,na.rm=T)- sum(al_cx$cif_branch_code)
sum(al_MAB_4060,na.rm=T)- sum(al_MAB_4060$cif_branch_code)
sum(al_MAB_5050,na.rm=T)- sum(al_MAB_5050$cif_branch_code)
sum(al_diplomat,na.rm=T)- sum(al_diplomat$cif_branch_code)
sum(al_NR,na.rm=T)- sum(al_NR$cif_branch_code)
sum(al_Sig,na.rm=T)- sum(al_Sig$cif_branch_code)
sum(al_Insig,na.rm=T)- sum(al_Insig$cif_branch_code)
sum(al_mass,na.rm=T)- sum(al_mass$cif_branch_code)
sum(al_Sal,na.rm=T)- sum(al_Sal$cif_branch_code)
sum(sdm_final,na.rm=T)- sum(sdm_final$cif_branch_code)
sum(points_all,na.rm=T)- sum(points_all$cif_branch_code)

# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','pplbranch_sep') # add sdm_final
all <- ls()
remove <- all[!all %in% keep ]

rm(list = remove)

driver_info_raw <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/5_JunSep20/inputs/People/Drivers People cost.xlsx",sheet="use")
driver_info <- driver_info_raw %>% filter(Level != "Central990")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]

chk_all <- left_join(sal_raw,driver_info,by= "Functional Designation")
chk_all2 <- chk_all %>% filter(is.na(Level))
chk_all2 <- chk_all2 %>% filter(cif_branch_code< 990)
chk_all2 <- chk_all2 %>% filter(!`Functional Designation` %in% c('Relationship Manager - Insignia Preferred Banking',
                                                                 'Relationship Manager - Insignia',
                                                                 'Senior Relationship Manager - Insignia Preferred Banking'))

sum(chk_all2$Total_Salary)

sum(pplbranch_sep,na.rm=T) - sum(pplbranch_sep$cif_branch_code)
(sum(chk_all2$Total_Salary))-(sum(pplbranch_sep,na.rm=T) - sum(pplbranch_sep$cif_branch_code)) # if this is 0, good to go

######## Cluster #######

masterfile<- masterfile_raw3

masterfile$FinalTFX <- rowSums(masterfile[,c("Others","TradeIncome")],na.rm = T) # Final Tfx

class(masterfile$LAP_PL)
unique(masterfile$cluster);unique(sal_raw$cluster)
colSums(is.na(sal_raw))

setdiff(unique(masterfile$cluster),unique(sal_raw$cluster))

class(masterfile$Insurance)
masterfile$LAP_PL_CC<- as.numeric(masterfile$LAP_PL_CC)

colSums(is.na(masterfile))
masterfile[is.na(masterfile)] = 0 # Replacing all NAs with 0

masterfile<- arrange(masterfile,desc(max_balance_date))
masterfile_uniq<- masterfile[!duplicated(masterfile$cif_branch_code),] # for left join/vlookup types

masterfile$CAavgMAB <- (masterfile$avg_deposit_balance_M1_CA+
                          masterfile$avg_deposit_balance_M2_CA+
                          masterfile$avg_deposit_balance_M3_CA)/masterfile$new_vintage

# Adding branch POS and ecom, to create a new variable ======= POS+ Ecom ========2
class(masterfile$debit_card_pos_usage_count)
class(masterfile$debit_card_ecom_usage_count)  # integer
masterfile$sum_posEcom<- masterfile$debit_card_pos_usage_count+ masterfile$debit_card_ecom_usage_count
class(masterfile$sum_posEcom)

# adding nb+ mb for new variable ======== nb+mb ===========2
class(masterfile$Mb_usage)
class(masterfile$netbanking_usage)  
masterfile$sum_nb_mb<- masterfile$netbanking_usage+ masterfile$Mb_usage
class(masterfile$sum_nb_mb)

#### Atm txns
class(masterfile$`ATM txns`)
unique(masterfile$zone_name)
#Filter to get BBB details ===============BBB=====================2
BBB<- masterfile %>% filter(!zone_name %in% c('GMNE - Rural Zone','Kolhapur- Rural Zone'))
table(BBB$zone_name)

# Keeping fields needed to make pivots
BBBsel <- BBB %>% select(cif_branch_code,segment)

BBBsel<- BBB[,c("cif_branch_code","segment","FinalTFX","Digital_txns","cxcodeflag","avgMAB","sum_posEcom","sum_nb_mb",
                "netbanking_usage","ATM txns","Insurance","LAP_PL_CC","CAavgMAB")] # Add LAP_PL_CC

class(BBBsel$`ATM txns`); ncol(BBBsel)
BBBag<- aggregate(BBBsel[,c(3,4,5,6,7,8,9,10,11,12,13)], BBBsel[,c(1,2)], FUN = sum, na.rm=T)

BBBag <- merge(x=BBBag, y= masterfile_uniq[,c("cif_branch_code","cluster","zone_name")],by.x= "cif_branch_code",by.y= "cif_branch_code",all.x=TRUE)
BBBag$cif_branch_code <- as.numeric(BBBag$cif_branch_code)
BBBag <- BBBag[order(BBBag$cif_branch_code),] # ordering by branch code

BBBaggbox <- as.data.frame(BBBsel[,1])
colnames(BBBaggbox)[1]= "cif_branch_code"
seg <- unique(BBBsel$segment)        
BBBaggbox<- as.data.frame(unique(BBBaggbox$cif_branch_code))

colnames(BBBaggbox)[1]= "cif_branch_code"

BBBaggbox<- as.data.frame(BBBaggbox)
colnames(BBBaggbox)[1]= "cif_branch_code"
class(BBBaggbox$cif_branch_code)
BBBaggbox$cif_branch_code<- as.character(BBBaggbox$cif_branch_code)
BBBaggbox$cif_branch_code<- as.numeric(BBBaggbox$cif_branch_code)
BBBaggbox <- BBBaggbox[order(BBBaggbox$cif_branch_code),]
BBBaggbox<- as.data.frame(BBBaggbox)
colnames(BBBaggbox)[1]= "cif_branch_code"

names(BBBaggbox)

segment<- rep(seg,nrow(BBBaggbox)) # repeat segment (9), times= no of rows in BBB (194) (194*9)
segment<- as.data.frame(segment)
segment <- segment[order(segment$segment),]
segment<- as.data.frame(segment)

BBBaggbox<- cbind(BBBaggbox,segment)
colnames(BBBaggbox)[1]= "cif_branch_code"
#BBBaggbox <- BBBaggbox[order(BBBaggbox$cif_branch_code),]
BBBaggbox<- merge(x=BBBaggbox,y=masterfile_uniq[,c("cif_branch_code","cluster")],by.x="cif_branch_code",by.y= "cif_branch_code",all.x=TRUE)

BBBagg <- merge(x=BBBaggbox, y= BBBag,by.x= c("cif_branch_code", "segment"),by.y= c("cif_branch_code","segment"),all.x=TRUE)
colSums(is.na(BBBagg))
BBBagg[is.na(BBBagg)] = 0
setnames(BBBagg,old="cluster.x",new="cluster")

table(BBBagg$cluster)
#### Cluster: Driver Creation
#=== MAB ====2
str(BBBagg)

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(cluster == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  assign(paste0(i,"_MAB"),cluster_dr)
}

#============= Tfx =====2

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="FinalTFX",subset = .(cluster == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_Tfx"),cluster_dr)
}

#============= Insurance  ==============================2

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="Insurance",subset = .(cluster == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  assign(paste0(i,"_Insur"),cluster_dr)
}

#============= PL_LAP  ==============================2

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="LAP_PL_CC",subset = .(cluster == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  assign(paste0(i,"_LAP_PL"),cluster_dr)
}

#### TASC MAB ##

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(cluster == i,segment=="Tasc"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  cluster_dr <- cluster_dr %>% mutate (Tasc=(Tasc/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  assign(paste0(i,"_TascMAB"),cluster_dr)
}

#### Salary MAB ####2

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(cluster == i,segment=="Salary"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (Salary=(Salary/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  assign(paste0(i,"_SalMAB"),cluster_dr)
}


#### NR MAB ###

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(cluster == i,segment=="NR"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (NR=(NR/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  
  assign(paste0(i,"_NRMAB"),cluster_dr)
}


### Insignia 

#### Insignia MAB ##

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(cluster == i,segment=="Insignia"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  cluster_dr <- cluster_dr %>% mutate (Insignia=(Insignia/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  assign(paste0(i,"_InsigMAB"),cluster_dr)
}

# Signature MAB at cluster

for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(cluster == i,segment=="Signature"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  cluster_dr <- cluster_dr %>% mutate (Signature=(Signature/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  assign(paste0(i,"_SigMAB"),cluster_dr)
}


# CA MAB at Cluster
for (i in unique(BBBagg$cluster)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="CAavgMAB",subset = .(cluster == i,segment=="Mass"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  cluster_dr <- cluster_dr %>% mutate (Mass=(Mass/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  assign(paste0(i,"_caMAB"),cluster_dr)
}

### Cluster: Allocation =====
### Mapping Quarterly Salary and clubbing it according to drivers

# Reading file with driver details for cluster
driver_info_raw <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/5_JunSep20/inputs/People/Drivers People cost.xlsx",sheet="use")
driver_info <- driver_info_raw
#driver_info <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/People cost/Cluster/role_wise_drivers_cluster.xlsx",sheet="use")
table(driver_info$Level)
driver_info <- driver_info %>% filter (Level == "Cluster")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]

# Total salary: Salary for Quarter: functional designation wise
# Pivot : Zone, cluster, branch_cif, sum of salary: functional designation wise
sal_withRBU <- sal_raw
table(sal_withRBU$cluster)
sal_withRBU$cluster <- ifelse(is.na(sal_withRBU$cluster),0,sal_withRBU$cluster)
#sal_withRBU <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/3Jun_Sep2019/inputs/Others/People/BBB_people3_withRBU.xlsx")
# Can only keep the relevant RBU designations for Cluster and Zone, and use that salary file instead
# might make reconciliation easier

#setnames(sal_withRBU,old="Job",new="Functional Designation")
#setnames(sal_withRBU,old="Br Code",new="cif_branch_code")

# keeping branches that are present in masterfile

uniq_branches <- masterfile[!duplicated(masterfile$cif_branch_code),]
uniq_branches <- uniq_branches[,c("cif_branch_code","cif_branch_name")]

sal_withRBU2 <- inner_join(uniq_branches,sal_withRBU,by="cif_branch_code") # keeping costs that can be allocated
# ones that are in our masterfile
sal <- sal_withRBU2

sal<- sal %>% filter (cluster != 0)
table(sal$cluster)
sal<- sal %>% filter (cluster != 'Central Offices') # 990 Allocation
# Those with cluster value as zero will be allocated in 990 adjustment (at end)
# Hence, filtering out those with cluster as 0 & 
names(sal)
unique(sal$cluster)

# Joining file to see all info in one go ;# same result with left/ inner join
sal_join<- inner_join(driver_info,sal,by="Functional Designation")

class(sal_join$Total_Salary)
# Aggregating salaries with same driver, and cluster (since this is cluster wise allocation)
sal_agg<- aggregate(sal_join[,"Total_Salary"], by = sal_join[,c("cluster","Drivers")],FUN = sum, na.rm=T)

####### We have cluster wise aggregated salaries (which have same drivers) to be allocated ###### 2

unique(sal_join$Drivers)
# [1] "Insignia MAB at cluster" "Insurance revenue"       "MAB cluster"             "MAB of cluster: Rural"  
# [5] "NR MAB"                  "PL+LAP + CC customers"   "Salary MAB"              "TASC MAB"               
# [9] "TFX revenue"             "SignatureMAB at cluster" "CA MAB at Cluster" 

# 1. Insurance Revenue
sal_join_sel <- sal_agg %>% filter (Drivers == 'Insurance revenue')
# Will do it for clusters that exist for Insurance Revenue driver
# Hence filtering out the relevant driver

all_list1<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_Insur"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_Insur_all"),call_df_all)
  
  all_list1[[i]]<- assign(paste0(i,"_Insur_all"),call_df_all)
  all_list1a <- do.call(rbind,all_list1)
}

#a[is.nan(a)] = 0
#all_list1[is.nan(all_list1)] <- 0
all_list1a<- rapply( all_list1a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

#all_list1 <- do.call(rbind,all_list)


# 2. MAB cluster: BBB

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers == 'MAB cluster')
all_list2<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_MAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_MAB_all"),call_df_all)
  
  all_list2[[i]]<- assign(paste0(i,"_MAB_all"),call_df_all)
  all_list2a <- do.call(rbind,all_list2)
}
all_list2a<- rapply( all_list2a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )



# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers == "NR MAB")
all_list5<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_NRMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  #call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_NRMAB_all"),call_df_all)
  
  all_list5[[i]]<- assign(paste0(i,"_NRMAB_all"),call_df_all)
  all_list5a <- do.call(rbind,all_list5)
}
all_list5a<- rapply( all_list5a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )


### 5. "PL+LAP + CC customers"

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers == "PL+LAP + CC customers")
all_list6<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_LAP_PL"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_LAP_PL_all"),call_df_all)
  
  all_list6[[i]]<- assign(paste0(i,"_LAP_PL_all"),call_df_all)
  all_list6a <- do.call(rbind,all_list6)
}

all_list6a<- rapply( all_list6a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

### 6. "Salary MAB"

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers == "Salary MAB")
sum(sal_join_sel$Total_Salary)
all_list7<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_SalMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  #call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_SalMABall"),call_df_all)
  
  all_list7[[i]]<- assign(paste0(i,"_SalMABall"),call_df_all)
  all_list7a <- do.call(rbind,all_list7)
}

all_list7a<- rapply( all_list7a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )


### 7.  "TASC MAB" 

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers ==  "TASC MAB" )
all_list8<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_TascMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  #call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  
  
  assign(paste0(i,"_TascMABall"),call_df_all)
  
  all_list8[[i]]<- assign(paste0(i,"_TascMABall"),call_df_all)
  all_list8a <- do.call(rbind,all_list8)
}

all_list8a<- rapply( all_list8a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

### 9.  "TFX revenue"    

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers ==  "TFX revenue"); nrow(sal_join_sel) 
# no cost to be allocated basis this
all_list10<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_Tfx"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_Tfxall"),call_df_all)
  
  all_list10[[i]]<- assign(paste0(i,"_Tfxall"),call_df_all)
  all_list10a <- do.call(rbind,all_list10)
}

all_list10a<- rapply( all_list10a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

### 10. Insignia MAB

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers ==  "Insignia MAB at cluster")
all_list11<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_InsigMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  #call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_InsigMABall"),call_df_all)
  
  all_list11[[i]]<- assign(paste0(i,"_InsigMABall"),call_df_all)
  all_list11a <- do.call(rbind,all_list11)
}

all_list11a<- rapply( all_list11a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

### 11. Signature MAB

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers ==  "SignatureMAB at cluster")
all_list12<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_SigMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  #call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_SigMABall"),call_df_all)
  
  all_list12[[i]]<- assign(paste0(i,"_SigMABall"),call_df_all)
  all_list12a <- do.call(rbind,all_list12)
}

all_list12a<- rapply( all_list12a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

### 12. CA MAB

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_join_sel <- sal_agg %>% filter (Drivers ==  "CA MAB at Cluster")
all_list13<- list()
call_df<- sal_join_sel
#df.list<- list()
for (i in unique(sal_join_sel$cluster))
{
  title<- i
  call_df_name <- (paste0(title,"_caMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_join_sel$Total_Salary[sal_join_sel$cluster == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  #call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_caMABall"),call_df_all)
  
  all_list13[[i]]<- assign(paste0(i,"_caMABall"),call_df_all)
  all_list13a <- do.call(rbind,all_list13)
}

all_list13a<- rapply( all_list13a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

##### Combining them all to create one cluster allocated value

# Error in do.call(rbind, list(all_list1a, all_list2a, all_list3a, all_list5a,  : 
#                                object 'all_list9a' not found
# so, removing list9a, all_list10a

# seeing details of some df
ob_name <-as.data.frame(ls()); colnames(ob_name)[1]<-"name"
ob_name2 <- ob_name %>% filter(name %like% 'all_list')
ob_name2
all_listclusFin <- do.call(rbind,list(all_list1a,all_list2a,all_list5a,
                                      all_list6a,all_list7a,all_list8a,#all_list9a
                                      all_list11a,all_list12a,all_list13a))
# all_list3a,was for rural, hence removed it
# removing those with branch code as 0 (since they are the ones which have cluster = 0 )

clusterFinSep <- all_listclusFin %>% filter (all_listclusFin$cif_branch_code != 0)
sum(clusterFinSep,na.rm=T)- sum(clusterFinSep$cif_branch_code)

# check

chk <- inner_join(uniq_branches,sal_join,by="cif_branch_code")
chk_no990 <- chk %>% filter (cif_branch_code != 990 )
chk2 <- chk %>% dplyr::group_by(Drivers) %>% dplyr::summarize(sal= sum(Total_Salary,na.rm=T))

sum(chk$Total_Salary,na.rm = T)
sum(chk_no990$Total_Salary,na.rm = T)

sum(chk$Total_Salary,na.rm = T)- (sum(clusterFinSep,na.rm=T)- sum(clusterFinSep$cif_branch_code)) # should be 0
sum(chk_no990$Total_Salary,na.rm = T)- (sum(clusterFinSep,na.rm=T)- sum(clusterFinSep$cif_branch_code))

# checking which driver is not getting allocated
sum(all_list13a,na.rm=T)- sum(all_list13a$cif_branch_code) # CA MAB
sum(all_list12a,na.rm=T)- sum(all_list12a$cif_branch_code) # Signature

sum(all_list11a,na.rm=T)- sum(all_list11a$cif_branch_code) # Insignia
sum(all_list10a,na.rm=T)- sum(all_list10a$cif_branch_code) # tfx
#sum(all_list9a,na.rm=T)- sum(all_list9a$cif_branch_code) # tasc with small letters, not for this time
sum(all_list8a,na.rm=T)- sum(all_list8a$cif_branch_code) # TASC
sum(all_list7a,na.rm=T)- sum(all_list7a$cif_branch_code) # Sal
sum(all_list6a,na.rm=T)- sum(all_list6a$cif_branch_code) # PL LAP CC
sum(all_list5a,na.rm=T)- sum(all_list5a$cif_branch_code) # NR
#sum(all_list3a,na.rm=T)- sum(all_list3a$cif_branch_code) # MAB RURAL
sum(all_list2a,na.rm=T)- sum(all_list2a$cif_branch_code) # MAB CLUSTER
sum(all_list1a,na.rm=T)- sum(all_list1a$cif_branch_code) # Insurance

# difference in : TASC, Sal, NR ; in case we need to dig deeper
# 5291064 -(sum(all_list8a,na.rm=T)- sum(all_list8a$cif_branch_code))  # TASC 

# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','pplbranch_sep','clusterFinSep',
          'sal_withRBU2','sal_withRBU','driver_info_raw')
all <- ls()
remove <- all[!all %in% keep ]

rm(list = remove)

### Zone Level====
masterfile <- masterfile_raw3
table(masterfile_raw3$cms_mapping)

table(masterfile$ISC_FLAG)
masterfile$isc_MAB<- ifelse(masterfile$ISC_FLAG == 1, masterfile$avgMAB,0)
masterfile[is.na(masterfile)] = 0

# Adding branch POS and ecom, to create a new variable ============== POS+ Ecom ==============2
class(masterfile$debit_card_pos_usage_count)
class(masterfile$debit_card_ecom_usage_count)  # integer
masterfile$sum_posEcom<- masterfile$debit_card_pos_usage_count+ masterfile$debit_card_ecom_usage_count
class(masterfile$sum_posEcom)

# adding nb+ mb for new variable ======================= nb+mb =============2
class(masterfile$Mb_usage)
class(masterfile$netbanking_usage)  
masterfile$sum_nb_mb<- masterfile$netbanking_usage+ masterfile$Mb_usage
class(masterfile$sum_nb_mb)

# adding insurance+MF for new variable ======================= mf_insur =============2
class(masterfile$Insurance)
class(masterfile$MF)  
masterfile$Insurance<- as.numeric(masterfile$Insurance)
masterfile$MF<- as.numeric(masterfile$MF)

masterfile$mf_insur<- masterfile$Insurance+ masterfile$MF
class(masterfile$mf_insur)

#### Atm txns   ####### to be changed
class(masterfile$`ATM txns`)
masterfile$`ATM txns`<- as.numeric(masterfile$`ATM txns`)
colSums(is.na(masterfile))
masterfile[is.na(masterfile)]<- 0 # Replacing all NAs with 0

masterfile$LAP_PL_CC<- as.numeric(masterfile$LAP_PL_CC)

masterfile$FinalTFX <- rowSums(masterfile[,c("Others","TradeIncome")],na.rm = T) # Final Tfx
class(masterfile$FinalTFX)

#setnames(masterfile,old="TFX",new="FinalTFX")  ### Renaming tfx to Final Tfx for use ahead
#setnames(masterfile,old="CMS",new="cms_mapping")
table(masterfile$cms_mapping) # check that it has valid values
masterfile<- arrange(masterfile,desc(max_balance_date))
masterfile_uniq<- masterfile[!duplicated(masterfile$cif_branch_code),] # for left join/vlookup types

#Filter to get BBB details ===============BBB=====================2
BBB<- masterfile %>% filter(!zone_name %in% c('GMNE - Rural Zone','Kolhapur- Rural Zone'))
table(BBB$zone_name)

# Keeping fields needed to make pivots
BBBsel<- BBB[,c("cif_branch_code","segment","FinalTFX","Digital_txns","cxcodeflag","avgMAB","sum_posEcom","sum_nb_mb",
                "netbanking_usage","ATM txns","Insurance","MF","LAP_PL","mf_insur","total_branch_txns","cms_mapping","isc_MAB")]

#BBBsel <- BBB %>% select(cif_branch_code,segment,FinalTFX,Digital_txns,cxcodeflag,avgMAB,sum_posEcom,
#                         sum_nb_mb,netbanking_usage,`ATM txns`,Insurance,MF,LAP_PL,mf_insur,
#                         total_branch_txns,cms_mapping,isc_MAB)
ncol(BBBsel)
BBBag<- aggregate(BBBsel[,c(3,4,5,6,7,8,9,10,11,12,13,14,15,16,17)], BBBsel[,c(1,2)], FUN = sum, na.rm=T)
BBBag <- merge(x=BBBag, y= masterfile_uniq[,c("cif_branch_code","cluster","zone_name")],by.x= "cif_branch_code",by.y= "cif_branch_code",all.x=TRUE)

BBBag$cif_branch_code <- as.numeric(BBBag$cif_branch_code)
BBBag <- BBBag[order(BBBag$cif_branch_code),] # ordering by branch code
# aggregate (table[,c(columns to be aggregated)],table[,c(columns to be aggregated on)],fun = aggregation to be done, na.rm)

BBBaggbox <- as.data.frame(BBBsel[,1])
colnames(BBBaggbox)[1]= "cif_branch_code"
seg <- unique(BBBsel$segment)        
BBBaggbox<- as.data.frame(unique(BBBaggbox$cif_branch_code))
colnames(BBBaggbox)[1]= "cif_branch_code"
BBBaggbox<- as.data.frame(BBBaggbox)
colnames(BBBaggbox)[1]= "cif_branch_code"
class(BBBaggbox$cif_branch_code)
BBBaggbox$cif_branch_code<- as.character(BBBaggbox$cif_branch_code)
BBBaggbox$cif_branch_code<- as.numeric(BBBaggbox$cif_branch_code)
BBBaggbox <- BBBaggbox[order(BBBaggbox$cif_branch_code),]
BBBaggbox<- as.data.frame(BBBaggbox)
colnames(BBBaggbox)[1]= "cif_branch_code"

names(BBBaggbox)

segment<- rep(seg,nrow(BBBaggbox)) # repeat segment (9), times= no of rows in BBB (194) (194*9)
segment<- as.data.frame(segment)
segment <- segment[order(segment$segment),]
segment<- as.data.frame(segment)

# zone drivers====
BBBaggbox<- cbind(BBBaggbox,segment)
colnames(BBBaggbox)[1]= "cif_branch_code"
#BBBaggbox <- BBBaggbox[order(BBBaggbox$cif_branch_code),]
BBBaggbox<- merge(x=BBBaggbox,y=masterfile_uniq[,c("cif_branch_code","zone_name")],by.x="cif_branch_code",by.y= "cif_branch_code",all.x=TRUE)


BBBagg <- merge(x=BBBaggbox, y= BBBag,by.x= c("cif_branch_code", "segment"),by.y= c("cif_branch_code","segment"),all.x=TRUE)
colSums(is.na(BBBagg))
BBBagg[is.na(BBBagg)] = 0
setnames(BBBagg,old="zone_name.x",new="zone_name")

#============= MAB ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(zone_name == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_MAB"),cluster_dr)
}


#============= Tfx ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="FinalTFX",subset = .(zone_name == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_Tfx"),cluster_dr)
}

#============= Insurance  ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="Insurance",subset = .(zone_name == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_Insur"),cluster_dr)
}

#============= PL_LAP  ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="LAP_PL",subset = .(zone_name == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_LAP_PL"),cluster_dr)
}

#============= MF ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="MF",subset = .(zone_name == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_MF"),cluster_dr)
}

#============= CMS ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="cms_mapping",subset = .(zone_name == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_cms"),cluster_dr)
}

#============= ISC ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="isc_MAB",subset = .(zone_name == i))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr <-  cluster %>% 
    mutate(BranchLevel= rowSums(cluster[,c('Abacus','Diplomat','Aspire','Insignia',
                                           'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  
  cluster_dr<- cluster_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                             "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_isc"),cluster_dr)
}

#### TASC MAB ####2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(zone_name == i,segment=="Tasc"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (Tasc=(Tasc/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  
  assign(paste0(i,"_TascMAB"),cluster_dr)
}

#### Salary MAB ####2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(zone_name == i,segment=="Salary"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (Salary=(Salary/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  
  assign(paste0(i,"_SalMAB"),cluster_dr)
}

#### NR MAB ####2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(zone_name == i,segment=="NR"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (NR=(NR/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  
  assign(paste0(i,"_NRMAB"),cluster_dr)
}

#### Diplomat MAB ####2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(zone_name == i,segment=="Diplomat"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (Diplomat=(Diplomat/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  
  assign(paste0(i,"_DiplMAB"),cluster_dr)
}

#### Mass MAB ####2
for (i in unique(BBBagg$zone_name)) 
{
  cluster<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(zone_name == i,segment=="Mass"))
  colSums(is.na(cluster))
  cluster[is.na(cluster)] = 0
  
  cluster_dr <- cluster
  cluster_dr$Grandtotal = sum(cluster_dr[,2])
  #cluster_dr$Grandtotal = sum(cluster_dr$BranchLevel)
  
  cluster_dr <- cluster_dr %>% mutate (Mass=(Mass/Grandtotal) )
  cluster_dr <- cluster_dr[,-3]
  
  assign(paste0(i,"_MassMAB"),cluster_dr)
}

#============= 20%MAB+ 80% Branch Txn ==============================2
for (i in unique(BBBagg$zone_name)) 
{
  aa<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(zone_name == i))
  colSums(is.na(aa))
  aa[is.na(aa)] = 0
  
  aa_dr <- aa
  aa_dr <-  aa %>% 
    mutate(BranchLevel= rowSums(aa[,c('Abacus','Diplomat','Aspire','Insignia',
                                      'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  aa_dr$Grandtotal = sum(aa_dr$BranchLevel)
  
  aa_dr <- aa_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  #assign(paste0(i,"_MAB"),aa_dr)
  
  # Branch txns
  
  bb<- dcast(BBBagg,cif_branch_code~segment,value.var="total_branch_txns",subset = .(zone_name == i))
  colSums(is.na(bb))
  bb[is.na(bb)] = 0
  
  bb_dr <- bb
  bb_dr <-  bb %>% 
    mutate(BranchLevel= rowSums(bb[,c('Abacus','Diplomat','Aspire','Insignia',
                                      'Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
  
  bb_dr$Grandtotal = sum(bb_dr$BranchLevel)
  
  bb_dr <- bb_dr %>% mutate (
    Abacus=(Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
    NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
    Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
  )
  #assign(paste0(i,"_Branch"),bb_dr)
  
  bb_dr <- rapply(bb_dr, function(x) ifelse(is.nan(x),0,x),how="replace")
  
  MAB_br <- aa_dr
  names(MAB_br)
  MAB_br<-MAB_br[,c('cif_branch_code')]
  MAB_br<-data.frame(MAB_br)
  colnames(MAB_br)[1]="cif_branch_code"
  
  MAB_br$Abacus<-((0.2*(aa_dr$Abacus))+ (0.8*(bb_dr$Abacus)))
  MAB_br$Diplomat<-((0.2*(aa_dr$Diplomat))+ (0.8*(bb_dr$Diplomat)))
  MAB_br$Insignia<-((0.2*(aa_dr$Insignia))+ (0.8*(bb_dr$Insignia)))
  MAB_br$NR<-((0.2*(aa_dr$NR))+ (0.8*(bb_dr$NR)))
  MAB_br$Signature<-((0.2*(aa_dr$Signature))+ (0.8*(bb_dr$Signature)))
  MAB_br$Salary<-((0.2*(aa_dr$Salary))+ (0.8*(bb_dr$Salary)))
  MAB_br$Tasc<-((0.2*(aa_dr$Tasc))+ (0.8*(bb_dr$Tasc)))
  MAB_br$Mass<-((0.2*(aa_dr$Mass))+ (0.8*(bb_dr$Mass)))  
  MAB_br$Aspire<-((0.2*(aa_dr$Aspire))+ (0.8*(bb_dr$Aspire)))
  
  assign(paste0(i,"_MAB_br"),MAB_br)
}

####### Zone: Allocation ###### 
## Zone allocation 
### Mapping Quarterly Salary and clubbing it according to drivers
# Reading file with driver details for cluster
#driver_info_raw <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/5_JunSep20/inputs/People/Drivers People cost.xlsx",sheet="use")
driver_info <- driver_info_raw
#driver_info <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/People cost/Cluster/role_wise_drivers_cluster.xlsx",sheet="use")
table(driver_info$Level)
driver_info <- driver_info %>% filter (Level == "Zone")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]
# Total salary: Salary for Quarter: functional designation wise
# Pivot : Zone, cluster, branch_cif, sum of salary: functional designation wise
sal_withRBU <- sal_raw
#sal_withRBU <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/3Jun_Sep2019/inputs/Others/People/BBB_people3_withRBU.xlsx")
#setnames(sal_withRBU,old="Job",new="Functional Designation")
#setnames(sal_withRBU,old="Br Code",new="cif_branch_code")

# keeping branches that are present in masterfile
uniq_branches <- masterfile[!duplicated(masterfile$cif_branch_code),]
uniq_branches <- uniq_branches[,c("cif_branch_code","cif_branch_name")]

sal_withRBU2 <- inner_join(uniq_branches,sal_withRBU,by="cif_branch_code") # keeping costs that can be allocated
# ones that are in our masterfile
sal <- sal_withRBU2
table(sal_withRBU2$zone_name)
sal<- sal %>% filter (zone_name != 0)
table(sal$zone_name)
sal<- sal %>% filter (zone_name != 'Central Offices') # 990 Allocation
# Those with cluster value as zero will be allocated in 990 adjustment (at end)
# Hence, filtering out those with cluster as 0 & 
names(sal)
unique(sal$zone_name)

# Joining file to see all info in one go ;# same result with left/ inner join
sal_join<- inner_join(driver_info,sal,by="Functional Designation")

class(sal_join$Total_Salary)
# Aggregating salaries with same driver, and Zone (since this is Zone wise allocation)
sal_agg<- aggregate(sal_join[,"Total_Salary"], by = sal_join[,c("zone_name","Drivers")],FUN = sum, na.rm=T)


unique(sal_join$Drivers)

# [1] "MAB zone"         "MF revenue"       "PL+LAP customers" "CMS MAB"          "ISC MAB"         
# [6] "Salary MAB"       "MAB"              "Diplomat MAB"     "NR MAB"           "TFX revenue" 

## 1. "NR MAB"

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
all_list1<- list()
sal_agg_sel <- sal_agg %>% filter (Drivers == "NR MAB")

call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_NRMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  #call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_NRMABall"),call_df_all)
  
  all_list1[[i]]<-assign(paste0(i,"_NRMABall"),call_df_all)
  all_list1a <- do.call(rbind,all_list1)
}
all_list1a<- rapply( all_list1a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

## 2. "MAB zone"
# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
sal_agg_sel <- sal_agg %>% filter (Drivers == "MAB zone")
all_list2<- list()
call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_MAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_MABall"),call_df_all)
  
  all_list2[[i]]<- assign(paste0(i,"_MABall"),call_df_all)
  all_list2a <- do.call(rbind,all_list2)
}

all_list2a<- rapply( all_list2a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 3.  "CMS MAB" # actually CMS mapping (ph) is used to calculate driver
# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_agg_sel <- sal_agg %>% filter (Drivers ==  "CMS MAB")
all_list3<- list()
call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_cms"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_cmsall"),call_df_all)
  
  all_list3[[i]]<- assign(paste0(i,"_cmsall"),call_df_all)
  all_list3a <- do.call(rbind,all_list3)  
  
}
all_list3a<- rapply( all_list3a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 4.  "TASC  MAB"    

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
sal_agg_sel <- sal_agg %>% filter (Drivers ==  "TASC  MAB"); nrow(sal_agg_sel) # 0 means no cost to allocate
all_list4<- list()
call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_TascMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  #call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")] 
  
  assign(paste0(i,"_TascMABall"),call_df_all)
  
  all_list4[[i]]<- assign(paste0(i,"_TascMABall"),call_df_all)
  all_list4a <- do.call(rbind,all_list4)
}

all_list4a<- rapply( all_list4a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 5.  "PL+LAP customers" 

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
all_list5<- list()
sal_agg_sel <- sal_agg %>% filter (Drivers ==  "PL+LAP customers")

call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_LAP_PL"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_LAP_PLall"),call_df_all)
  
  all_list5[[i]]<- assign(paste0(i,"_LAP_PLall"),call_df_all)
  all_list5a <- do.call(rbind,all_list5)
}

all_list5a<- rapply( all_list5a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 6.  "MF revenue" 

# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver

sal_agg_sel <- sal_agg %>% filter (Drivers == "MF revenue" )
all_list6<- list()
call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_MF"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_MFall"),call_df_all)
  
  all_list6[[i]]<- assign(paste0(i,"_MFall"),call_df_all)
  all_list6a <- do.call(rbind,all_list6)  
  
}
all_list6a<- rapply( all_list6a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 7.  "20%  MAB +80% Branch Txn"
# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
sal_agg_sel <- sal_agg %>% filter (Drivers == "20%  MAB +80% Branch Txn" ); nrow(sal_agg_sel)
# 0 rows means no cost to allocate
all_list7<- list()
call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_MAB_br"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_MAB_br_all"),call_df_all)
  
  all_list7[[i]]<- assign(paste0(i,"_MAB_br_all"),call_df_all)
  all_list7a <- do.call(rbind,all_list7)
}

all_list7a<- rapply( all_list7a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 8.  "Mass  MAB"
# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
all_list8<- list()
sal_agg_sel <- sal_agg %>% filter (Drivers == "Mass  MAB" ); nrow(sal_agg_sel)
# 0 rows means no cot to allocate
call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_MassMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  #call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  
  assign(paste0(i,"_MassMABall"),call_df_all)
  
  all_list8[[i]]<- assign(paste0(i,"_MassMABall"),call_df_all)
  all_list8a <- do.call(rbind,all_list8)
}
all_list8a<- rapply( all_list8a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 9.  "Salary MAB" 
# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
sal_agg_sel <- sal_agg %>% filter (Drivers == "Salary MAB")
all_list9<- list()
call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_SalMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  #call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_SalMABall"),call_df_all)
  
  all_list9[[i]]<- assign(paste0(i,"_SalMABall"),call_df_all)
  all_list9a <- do.call(rbind,all_list9)
}
all_list9a<- rapply( all_list9a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

# ## 10.  "ISC MAB" ######################################################### 2
all_list10<- list()
sal_agg_sel <- sal_agg %>% filter (Drivers == "ISC MAB")

call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_isc"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_isc_all"),call_df_all)
  
  all_list10[[i]]<- assign(paste0(i,"_isc_all"),call_df_all)
  all_list10a <- do.call(rbind,all_list10)
}
all_list10a<- rapply( all_list10a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

### 11 "TFX revenue"    
# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
all_list11<- list()
sal_agg_sel <- sal_agg %>% filter (Drivers ==  "TFX revenue")

call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_Tfx"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_Tfxall"),call_df_all)
  
  all_list11[[i]]<- assign(paste0(i,"_Tfxall"),call_df_all)
  all_list11a <- do.call(rbind,all_list11)
}
all_list11a<- rapply( all_list11a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )

### 12 "Diplomat MAB"
# Will do it for clusters that exist for a particular driver
# Hence filtering out the relevant driver
all_list12<- list()
sal_agg_sel <- sal_agg %>% filter (Drivers == "Diplomat MAB")

call_df<- sal_agg_sel
#df.list<- list()
for (i in unique(sal_agg_sel$zone_name))
{
  title<- i
  call_df_name <- (paste0(title,"_DiplMAB"))
  call_df <- get(call_df_name)
  call_df_sel <- call_df[-1]
  call_df_cif <- call_df[1]
  call_df_all <- call_df_sel * sal_agg_sel$Total_Salary[sal_agg_sel$zone_name == i]
  call_df_all<- cbind(call_df_cif,call_df_all)
  
  call_df_all$Abacus <- 0
  #call_df_all$Diplomat <- 0
  call_df_all$Insignia <- 0
  call_df_all$NR <- 0
  call_df_all$Signature <- 0
  call_df_all$Salary <- 0
  call_df_all$Tasc <- 0
  call_df_all$Mass <- 0
  call_df_all$Aspire <- 0
  
  call_df_all<- call_df_all[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                               "Salary","Tasc","Mass","Aspire")]
  # call_df_all[is.nan(call_df_all)] <- 0
  # call_df_all[is.nan(call_df_all)] <- 0
  assign(paste0(i,"_DiplMABall"),call_df_all)
  
  all_list12[[i]]<- assign(paste0(i,"_DiplMABall"),call_df_all)
  all_list12a <- do.call(rbind,all_list12)
}

all_list12a<- rapply( all_list12a, f=function(x) ifelse(is.nan(x),0,x), how="replace" )


#******************************************************************************
table(sal_agg$Drivers)  # to check what all lists need to be rbind *********

# to be removed this time: 7,8,

# Tagging  : 1- NR MAB ; 2- "MAB zone" ; 3- "CMS MAB" ; 4- "TASC  MAB" ; 5- PL+LAP customers
# 6- MF revenue ; 7- 20%  MAB +80% Branch Txn ; 8- Mass  MAB; 9- Salary MAB
# 10- ISC MAB ; 11- TFX revenue; 12- Diplomat MAB ; 13- MAB

all_listZoneFin <- do.call(rbind,list(all_list1a,all_list2a,all_list3a,all_list5a,
                                      all_list6a,all_list9a,all_list10a,
                                      all_list11a,all_list12a))
# removed 4,7,8,,all_list13a
zoneFinSep <- all_listZoneFin %>% filter (all_listZoneFin$cif_branch_code != 0)
sum(zoneFinSep,na.rm=T)- sum(zoneFinSep$cif_branch_code)

chk <- inner_join(uniq_branches,sal_join,by="cif_branch_code")
chk_no990 <- chk %>% filter (cif_branch_code != 990 )
chk2 <- chk %>% dplyr::group_by(Drivers) %>% dplyr::summarize(sal= sum(Total_Salary,na.rm=T))

sum(chk$Total_Salary,na.rm = T)
sum(chk_no990$Total_Salary,na.rm = T)

sum(chk$Total_Salary,na.rm = T)- (sum(zoneFinSep,na.rm=T)- sum(zoneFinSep$cif_branch_code))
sum(chk_no990$Total_Salary,na.rm = T)- (sum(zoneFinSep,na.rm=T)- sum(zoneFinSep$cif_branch_code))

# Checks
sum(all_list1a,na.rm=T)- sum(all_list1a$cif_branch_code) # NR MAB
sum(all_list2a,na.rm=T)- sum(all_list2a$cif_branch_code) # MAB zone
sum(all_list3a,na.rm=T)- sum(all_list3a$cif_branch_code) # CMS MAB
sum(all_list5a,na.rm=T)- sum(all_list5a$cif_branch_code) # "PL+LAP customers"
sum(all_list6a,na.rm=T)- sum(all_list6a$cif_branch_code) # "MF revenue"
#sum(all_list7a,na.rm=T)- sum(all_list7a$cif_branch_code) # 20%  MAB +80% Branch Txn
sum(all_list8a,na.rm=T)- sum(all_list8a$cif_branch_code) # _MassMAB
sum(all_list9a,na.rm=T)- sum(all_list9a$cif_branch_code) # _SalMAB
sum(all_list10a,na.rm=T)- sum(all_list10a$cif_branch_code) # _isc
sum(all_list11a,na.rm=T)- sum(all_list11a$cif_branch_code) # _Tfx
sum(all_list12a,na.rm=T)- sum(all_list12a$cif_branch_code) # _DiplMABall
#sum(all_list13a,na.rm=T)- sum(all_list13a$cif_branch_code) # _MAB

# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','pplbranch_sep','clusterFinSep',
          'sal_withRBU2','sal_withRBU','zoneFinSep', 'driver_info_raw')
all <- ls()
remove <- all[!all %in% keep ]

rm(list = remove)

##### Central drivers ################
masterfile <- masterfile_raw3

masterfile$FinalTFX <- rowSums(masterfile[,c("Others","TradeIncome")],na.rm = T) # Final Tfx
class(masterfile$FinalTFX)

#setnames(masterfile,old="TFX",new="FinalTFX")  ### Renaming tfx to Final Tfx for use ahead

colSums(is.na(masterfile))
masterfile[is.na(masterfile)] = 0 # Replacing all NAs with 0

# Adding branch POS and ecom, to create a new variable ============== POS+ Ecom ==============1
class(masterfile$debit_card_pos_usage_count)
class(masterfile$debit_card_ecom_usage_count)  # integer
masterfile$sum_posEcom<- masterfile$debit_card_pos_usage_count+ masterfile$debit_card_ecom_usage_count
class(masterfile$sum_posEcom)

# adding nb+ mb for new variable ======================= nb+mb =============1
class(masterfile$Mb_usage)
class(masterfile$netbanking_usage)  
masterfile$sum_nb_mb<- masterfile$netbanking_usage+ masterfile$Mb_usage
class(masterfile$sum_nb_mb)

# adding insurance+MF for new variable ======================= mf_insur =============1
class(masterfile$Insurance)
class(masterfile$MF)  
masterfile$Insurance<- as.numeric(masterfile$Insurance)
masterfile$MF<- as.numeric(masterfile$MF)

masterfile$mf_insur<- masterfile$Insurance+ masterfile$MF
class(masterfile$mf_insur)
class(masterfile$LAP_PL_CC)

#### Atm txns   ##################### to be changed
class(masterfile$`ATM txns`)
masterfile$`ATM txns`<- as.numeric(masterfile$`ATM txns`)
colSums(is.na(masterfile))
masterfile[is.na(masterfile)]<- 0 # Replacing all NAs with 0

## DC_usage
class(masterfile$ATM_withdraw)
masterfile$DC_txns <- masterfile$debit_card_pos_usage_count+masterfile$debit_card_ecom_usage_count + masterfile$ATM_withdraw

#Salary MAB
masterfile$SalaryMAB<- ifelse(masterfile$segment == "Salary",masterfile$avgMAB,0)

#Filter to get BBB details ===============BBB=====================2
BBB<- masterfile %>% filter(!zone_name %in% c('GMNE - Rural Zone','Kolhapur- Rural Zone'))
table(BBB$zone_name)

BBBsel<- BBB[,c("cif_branch_code","segment","FinalTFX","Digital_txns","cxcodeflag","avgMAB","sum_posEcom","sum_nb_mb",
                "netbanking_usage","ATM txns","Insurance","MF","LAP_PL","LAP_PL_CC","mf_insur","Mb_usage",
                "DC_txns","SalaryMAB","total_branch_txns")]
ncol(BBBsel)
BBBagg<- aggregate(BBBsel[,c(3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)], BBBsel[,c(1,2)], FUN = sum, na.rm=T)

BBBagg$cif_branch_code <- as.numeric(BBBagg$cif_branch_code)
BBBagg <- BBBagg[order(BBBagg$cif_branch_code),] # ordering by branch code
# aggregate (table[,c(columns to be aggregated)],table[,c(columns to be aggregated on)],fun = aggregation to be done, na.rm)
BBBagg <- BBBagg %>% filter (!cif_branch_code %in% c('990','991','992','993','null','0'))

# === Working on driver creation ==================2
#============= MAB ==============================2

MAB_B<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB")
### could've made one agg file( BBB and RBU combined), added zone, cluster etc. basis branch cif (left join)
# while doing dcast, could've subset using zones - to separate rural and bbb drivers....

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_B))
MAB_B[is.na(MAB_B)] = 0


# Getting sum at branch level (will help in opex)
MAB_B <- MAB_B %>% 
  mutate(BranchLevel= rowSums(MAB_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

MAB_B$Grandtotal = sum(MAB_B$BranchLevel)


# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
MAB_Bdr <- MAB_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
)

names(MAB_Bdr)

# Removing Grand total, and branch total columns, since they are not needed

MAB_Bdr<- MAB_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                     "Mass","Aspire")]


## ===================Branch txn======================2
Branch_B<- dcast(BBBagg,cif_branch_code~segment,value.var="total_branch_txns")
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(Branch_B))
Branch_B[is.na(Branch_B)] = 0

# Getting sum at branch level (will help in opex)
Branch_B <- Branch_B %>% 
  mutate(BranchLevel= rowSums(Branch_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

Branch_B$Grandtotal = sum(Branch_B$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
Branch_Dr <- Branch_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(Branch_Dr)

# Removing Grand total, and branch total columns, since they are not needed
Branch_Dr<- Branch_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                         "Mass","Aspire")]

Branch_Dr <- rapply(Branch_Dr, function(x) ifelse(is.nan(x),0,x),how="replace")

## 50% MAB + 50% Branch Txn
MAB_Dr <- MAB_Bdr

MAB_BranchTxn_Dr<-MAB_Dr
names(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"
MAB_BranchTxn_Dr<-MAB_BranchTxn_Dr[,c('cif_branch_code')]
MAB_BranchTxn_Dr<-data.frame(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"

MAB_BranchTxn_Dr$Abacus<-((0.5*(MAB_Dr$Abacus))+ (0.5*(Branch_Dr$Abacus)))
MAB_BranchTxn_Dr$Diplomat<-((0.5*(MAB_Dr$Diplomat))+ (0.5*(Branch_Dr$Diplomat)))
MAB_BranchTxn_Dr$Insignia<-((0.5*(MAB_Dr$Insignia))+ (0.5*(Branch_Dr$Insignia)))
MAB_BranchTxn_Dr$NR<-((0.5*(MAB_Dr$NR))+ (0.5*(Branch_Dr$NR)))
MAB_BranchTxn_Dr$Signature<-((0.5*(MAB_Dr$Signature))+ (0.5*(Branch_Dr$Signature)))
MAB_BranchTxn_Dr$Salary<-((0.5*(MAB_Dr$Salary))+ (0.5*(Branch_Dr$Salary)))
MAB_BranchTxn_Dr$Tasc<-((0.5*(MAB_Dr$Tasc))+ (0.5*(Branch_Dr$Tasc)))
MAB_BranchTxn_Dr$Mass<-((0.5*(MAB_Dr$Mass))+ (0.5*(Branch_Dr$Mass)))
MAB_BranchTxn_Dr$Aspire<-((0.5*(MAB_Dr$Aspire))+ (0.5*(Branch_Dr$Aspire)))

#============= IB/ net banking ==============================2

nb_B<- dcast(BBBagg,cif_branch_code~segment,value.var="netbanking_usage")


# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(nb_B))
nb_B[is.na(nb_B)] = 0


# Getting sum at branch level (will help in opex)
nb_B <- nb_B %>% 
  mutate(BranchLevel= rowSums(nb_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

nb_B$Grandtotal = sum(nb_B$BranchLevel)


# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
nb_Bdr <- nb_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(nb_Bdr)

# Removing Grand total, and branch total columns, since they are not needed

nb_Bdr<- nb_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]


#============= mb ==============================2
mb_B<- dcast(BBBagg,cif_branch_code~segment,value.var="netbanking_usage")

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(mb_B))
mb_B[is.na(mb_B)] = 0
# Getting sum at branch level (will help in opex)
mb_B <- mb_B %>% 
  mutate(BranchLevel= rowSums(mb_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

mb_B$Grandtotal = sum(mb_B$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
mb_Bdr <- mb_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal)
)
names(mb_B)
# Removing Grand total, and branch total columns, since they are not needed
mb_Bdr<- mb_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]

#============= TFX Revenue ==============================2
TfxB<- dcast(BBBagg,cif_branch_code~segment,value.var="FinalTFX")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(TfxB))
TfxB[is.na(TfxB)] = 0
# Getting sum at branch level (will help in opex)
TfxB <- TfxB %>% 
  mutate(BranchLevel= rowSums(TfxB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

TfxB$Grandtotal = sum(TfxB$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
TfxBdr <- TfxB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(TfxBdr)
# Removing Grand total, and branch total columns, since they are not needed
TfxBdr<- TfxBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]

#============= MF ==============================2
mf_B<- dcast(BBBagg,cif_branch_code~segment,value.var="MF")

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(mf_B))
mf_B[is.na(mf_B)] = 0
# Getting sum at branch level (will help in opex)
mf_B <- mf_B %>% 
  mutate(BranchLevel= rowSums(mf_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

mf_B$Grandtotal = sum(mf_B$BranchLevel)
# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
mf_Bdr <- mf_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(mf_Bdr)

# Removing Grand total, and branch total columns, since they are not needed
mf_Bdr<- mf_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]

#=============Insurance==============================2

Insur_B<- dcast(BBBagg,cif_branch_code~segment,value.var="Insurance")


# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(Insur_B))
Insur_B[is.na(Insur_B)] = 0


# Getting sum at branch level (will help in opex)
Insur_B <- Insur_B %>% 
  mutate(BranchLevel= rowSums(Insur_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

Insur_B$Grandtotal = sum(Insur_B$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
Insur_Bdr <- Insur_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(Insur_Bdr)

# Removing Grand total, and branch total columns, since they are not needed

Insur_Bdr<- Insur_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                         "Mass","Aspire")]


#=============Insurance+ MF==============================2

mf_insur_B<- dcast(BBBagg,cif_branch_code~segment,value.var="mf_insur")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(mf_insur_B))
mf_insur_B[is.na(mf_insur_B)] = 0

# Getting sum at branch level (will help in opex)
mf_insur_B <- mf_insur_B %>% 
  mutate(BranchLevel= rowSums(mf_insur_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

mf_insur_B$Grandtotal = sum(mf_insur_B$BranchLevel)


# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
mf_insur_Bdr <- mf_insur_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(mf_insur_Bdr)

# Removing Grand total, and branch total columns, since they are not needed

mf_insur_Bdr<- mf_insur_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                               "Mass","Aspire")]

#============= LAP PL ==============================2
LAP_PL_B<- dcast(BBBagg,cif_branch_code~segment,value.var="LAP_PL")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(LAP_PL_B))
LAP_PL_B[is.na(LAP_PL_B)] = 0

# Getting sum at branch level (will help in opex)
LAP_PL_B <- LAP_PL_B %>% 
  mutate(BranchLevel= rowSums(LAP_PL_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

LAP_PL_B$Grandtotal = sum(LAP_PL_B$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
LAP_PL_Bdr <- LAP_PL_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(LAP_PL_Bdr)

# Removing Grand total, and branch total columns, since they are not needed

LAP_PL_Bdr<- LAP_PL_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                           "Mass","Aspire")]

#============= LAP PL CC==============================2
LAP_PL_CC_B<- dcast(BBBagg,cif_branch_code~segment,value.var="LAP_PL_CC")

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(LAP_PL_CC_B))
LAP_PL_CC_B[is.na(LAP_PL_CC_B)] = 0


# Getting sum at branch level (will help in opex)
LAP_PL_CC_B <- LAP_PL_CC_B %>% 
  mutate(BranchLevel= rowSums(LAP_PL_CC_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

LAP_PL_CC_B$Grandtotal = sum(LAP_PL_CC_B$BranchLevel)


# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
LAP_PL_CC_Bdr <- LAP_PL_CC_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(LAP_PL_CC_Bdr)

# Removing Grand total, and branch total columns, since they are not needed

LAP_PL_CC_Bdr<- LAP_PL_CC_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                                 "Mass","Aspire")]

#============= Digital ==============================2
DigB<- dcast(BBBagg,cif_branch_code~segment,value.var="Digital_txns")

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(DigB))
DigB[is.na(DigB)] = 0


# Getting sum at branch level (will help in opex)
DigB <- DigB %>% 
  mutate(BranchLevel= rowSums(DigB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

DigB$Grandtotal = sum(DigB$BranchLevel)


# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
DigBdr <- DigB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(DigBdr)

# Removing Grand total, and branch total columns, since they are not needed

DigBdr<- DigBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]

#============= ATM Txns ==============================2
atmB<- dcast(BBBagg,cif_branch_code~segment,value.var="ATM txns")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(atmB))
atmB[is.na(atmB)] = 0


# Getting sum at branch level (will help in opex)
atmB <- atmB %>% 
  mutate(BranchLevel= rowSums(atmB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

atmB$Grandtotal = sum(atmB$BranchLevel)


# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
atmBdr <- atmB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(atmBdr)

# Removing Grand total, and branch total columns, since they are not needed

atmBdr<- atmBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]

#============= POS+ ECom  ==============================2
ecomposB<- dcast(BBBagg,cif_branch_code~segment,value.var="sum_posEcom")

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(ecomposB))
ecomposB[is.na(ecomposB)] = 0
# Getting sum at branch level (will help in opex)
ecomposB <- ecomposB %>% 
  mutate(BranchLevel= rowSums(ecomposB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

ecomposB$Grandtotal = sum(ecomposB$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
ecomposBdr <- ecomposB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(ecomposBdr)

# Removing Grand total, and branch total columns, since they are not needed

ecomposBdr<- ecomposBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                           "Mass","Aspire")]

## =================== CA MAB ======================2
# =======================================================2
master_CA<- BBB %>% filter(customer_tagging == 'CA') 
# Filtering on CA customers, to aggregate only their MAB
master_CA<- master_CA[,c("cif_branch_code","segment","avgMAB")]
table(master_CA$segment)

masteragg_CA <- aggregate(master_CA[,c(3)],master_CA[,c(1,2)],FUN=sum, na.rm=T )
masteragg_CA$cif_branch_code <- as.numeric(masteragg_CA$cif_branch_code)
masteragg_CA <- masteragg_CA[order(masteragg_CA$cif_branch_code),] # ordering by branch code
names(masteragg_CA)
setnames(masteragg_CA,old="x",new="avgMAB")


##### CA product manager cost only allocated to Mass Segment, hence subsetting Mass
CA_MAB<- dcast(masteragg_CA,cif_branch_code~segment,value.var="avgMAB",subset= .(segment == "Mass"))
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(CA_MAB))
CA_MAB[is.na(CA_MAB)] = 0


# Getting sum at branch level (will help in opex)
CA_MAB <- CA_MAB %>% 
  mutate(Grandtotal= sum(CA_MAB[,c('Mass')]))
# no salary
#CA_MAB$Grandtotal = sum(CA_MAB$BranchLevel)

# ======== % value of drivers ======2
CA_MAB_Dr_B <- CA_MAB %>% mutate (Mass=(Mass/Grandtotal) )


CA_MAB_Dr_B$Abacus <- 0
CA_MAB_Dr_B$Diplomat <- 0
CA_MAB_Dr_B$Insignia <- 0
CA_MAB_Dr_B$NR <- 0
CA_MAB_Dr_B$Signature <- 0
CA_MAB_Dr_B$Salary <- 0
CA_MAB_Dr_B$Tasc <- 0
#CA_MAB_Dr_B$Mass <- 0
CA_MAB_Dr_B$Aspire <- 0


names(CA_MAB_Dr_B)

# Removing Grand total, and branch total columns, since they are not needed

CA_MAB_Dr_B<- CA_MAB_Dr_B[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                             "Mass","Aspire")]


## =================== SA MAB ======================2
master_SA<- BBB %>% filter(customer_tagging == 'SA') 
# Filtering on CA customers, to aggregate only their MAB
master_SA<- master_SA[,c("cif_branch_code","segment","avgMAB")]
table(master_SA$segment)

masteragg_SA <- aggregate(master_SA[,c(3)],master_SA[,c(1,2)],FUN=sum, na.rm=T )
masteragg_SA$cif_branch_code <- as.numeric(masteragg_SA$cif_branch_code)
masteragg_SA <- masteragg_SA[order(masteragg_SA$cif_branch_code),] # ordering by branch code
names(masteragg_SA)
setnames(masteragg_SA,old="x",new="avgMAB")


##### CA product manager cost only allocated to Mass Segment, hence subsetting Mass
SA_MAB<- dcast(masteragg_SA,cif_branch_code~segment,value.var="avgMAB",subset= .(segment == "Mass"))
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(SA_MAB))
SA_MAB[is.na(SA_MAB)] = 0


# Getting sum at branch level (will help in opex)
SA_MAB <- SA_MAB %>% 
  mutate(Grandtotal= sum(SA_MAB[,c('Mass')]))
# no salary
#CA_MAB$Grandtotal = sum(CA_MAB$BranchLevel)

# ======== % value of drivers ======2
SA_MAB_Dr_B <- SA_MAB %>% mutate (Mass=(Mass/Grandtotal) )

SA_MAB_Dr_B$Abacus <- 0
SA_MAB_Dr_B$Diplomat <- 0
SA_MAB_Dr_B$Insignia <- 0
SA_MAB_Dr_B$NR <- 0
SA_MAB_Dr_B$Signature <- 0
SA_MAB_Dr_B$Salary <- 0
SA_MAB_Dr_B$Tasc <- 0
#CA_MAB_Dr_B$Mass <- 0
SA_MAB_Dr_B$Aspire <- 0


names(SA_MAB_Dr_B)

# Removing Grand total, and branch total columns, since they are not needed

SA_MAB_Dr_B<- SA_MAB_Dr_B[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                             "Mass","Aspire")]

#============= Mass MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Mass"))
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

MAB_Segment$Grandtotal = sum(MAB_Segment$Mass)  # Sum of Mass MAB across all branches

# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB

# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Mass=(Mass/Grandtotal))

MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
#MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed

mass_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                           "Mass","Aspire")]

#============= Diplomat MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Diplomat"))
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

MAB_Segment$Grandtotal = sum(MAB_Segment$Diplomat)  # Sum of Mass MAB across all branches
# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Diplomat=(Diplomat/Grandtotal))

MAB_Segmentdr$Abacus <- 0
#MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed

diplomat_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                               "Mass","Aspire")]

#============= Insignia MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Insignia"))

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

MAB_Segment$Grandtotal = sum(MAB_Segment$Insignia)  # Sum of Mass MAB across all branches


# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB

# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Insignia=(Insignia/Grandtotal))

MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
#MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed

insignia_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                               "Mass","Aspire")]

#============= NR MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "NR"))

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

MAB_Segment$Grandtotal = sum(MAB_Segment$NR)  # Sum of Mass MAB across all branches
# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( NR=(NR/Grandtotal))

MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
#MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)
# Removing Grand total, and branch total columns, since they are not needed
nr_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                         "Mass","Aspire")]

#============= Tasc MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Tasc"))
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

MAB_Segment$Grandtotal = sum(MAB_Segment$Tasc)  # Sum of Mass MAB across all branches
# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Tasc=(Tasc/Grandtotal))

MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
#MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed

tasc_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                           "Mass","Aspire")]

#============= Signature MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Signature"))
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

MAB_Segment$Grandtotal = sum(MAB_Segment$Signature)  # Sum of Mass MAB across all branches
# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Signature=(Signature/Grandtotal))

MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
#MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed
sig_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                          "Mass","Aspire")]

#============= ib+ nb  ==============================2
mb_nbB<- dcast(BBBagg,cif_branch_code~segment,value.var="sum_nb_mb")

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(mb_nbB))
mb_nbB[is.na(mb_nbB)] = 0

# Getting sum at branch level (will help in opex)
mb_nbB <- mb_nbB %>% 
  mutate(BranchLevel= rowSums(mb_nbB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

mb_nbB$Grandtotal = sum(mb_nbB$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
mb_nbBdr <- mb_nbB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(mb_nbBdr)
# Removing Grand total, and branch total columns, since they are not needed
mb_nbBdr<- mb_nbBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                       "Mass","Aspire")]

#============= Abacus  MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Abacus"))

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

MAB_Segment$Grandtotal = sum(MAB_Segment$Abacus)  # Sum of Mass MAB across all branches

# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Abacus=(Abacus/Grandtotal))

#MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed

abacus_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                             "Mass","Aspire")]

# no of rows in abacus and mbnb driver aren't the same, so driver addition happens incorrectly
# adding rows with value=0 to abacus driver, to equalize the no. of rows.
nrow(abacus_dr)
nrow(mb_nbBdr)
zerodf<- anti_join(mb_nbBdr,abacus_dr,by="cif_branch_code")
# zerodf<- mb_nbBdr
# zerodf <- zerodf[nrow(abacus_dr)+1:nrow(zerodf),]  

# abacus driver has 179 rows, mbnb has 194;
# we need to those rows that are there in mbnb, but not in abacus, hence anti join

# putting zero values
zerodf$Abacus <- 0
zerodf$Diplomat <- 0
zerodf$Insignia <- 0
zerodf$NR <- 0
zerodf$Signature <- 0
zerodf$Salary <- 0
zerodf$Tasc <- 0
zerodf$Mass <- 0
zerodf$Aspire <- 0

abacus_dr<- rbind(abacus_dr,zerodf)
abacus_dr <- abacus_dr[order(abacus_dr$cif_branch_code),] # ordering by branch code, 
# so that 0.5 * happens for drivers of same branches

##### 50% Abacus +50% NB+MB, i.e., 50% Abacus +50% (NB+MB)
#### 40% MAB + 60% Branch txn
abac_mbnb_dr<-mb_nbBdr
names(abac_mbnb_dr)
colnames(abac_mbnb_dr)[1]="cif_branch_code"
abac_mbnb_dr<-abac_mbnb_dr[,c('cif_branch_code')]
abac_mbnb_dr<-data.frame(abac_mbnb_dr)
colnames(abac_mbnb_dr)[1]="cif_branch_code"

class(abacus_dr$Abacus)
class(mb_nbBdr$Abacus)
# we get a warning, not an error. ; driver value is correct though
abac_mbnb_dr$Abacus<-((0.5*(abacus_dr$Abacus))+ (0.5*(mb_nbBdr$Abacus)))
abac_mbnb_dr$Diplomat<-((0.5*(abacus_dr$Diplomat))+ (0.5*(mb_nbBdr$Diplomat)))
abac_mbnb_dr$Insignia<-((0.5*(abacus_dr$Insignia))+ (0.5*(mb_nbBdr$Insignia)))
abac_mbnb_dr$NR<-((0.5*(abacus_dr$NR))+ (0.5*(mb_nbBdr$NR)))
abac_mbnb_dr$Signature<-((0.5*(abacus_dr$Signature))+ (0.5*(mb_nbBdr$Signature)))
abac_mbnb_dr$Salary<-((0.5*(abacus_dr$Salary))+ (0.5*(mb_nbBdr$Salary)))
abac_mbnb_dr$Tasc<-((0.5*(abacus_dr$Tasc))+ (0.5*(mb_nbBdr$Tasc)))
abac_mbnb_dr$Mass<-((0.5*(abacus_dr$Mass))+ (0.5*(mb_nbBdr$Mass)))
abac_mbnb_dr$Aspire<-((0.5*(abacus_dr$Aspire))+ (0.5*(mb_nbBdr$Aspire)))

#sum(abac_mbnb_dr,na.rm=T)- sum(abac_mbnb_dr$cif_branch_code)  #==== this should be 1; (not greater than 1)

#============= DC_txns==============================2
DC_txnsB<- dcast(BBBagg,cif_branch_code~segment,value.var="DC_txns")

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(DC_txnsB))
DC_txnsB[is.na(DC_txnsB)] = 0

# Getting sum at branch level (will help in opex)
DC_txnsB <- DC_txnsB %>% 
  mutate(BranchLevel= rowSums(DC_txnsB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

DC_txnsB$Grandtotal = sum(DC_txnsB$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
DC_txnsBdr <- DC_txnsB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(DC_txnsBdr)

# Removing Grand total, and branch total columns, since they are not needed

DC_txnsBdr<- DC_txnsBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                           "Mass","Aspire")]
sum(DC_txnsBdr)-sum(DC_txnsBdr$cif_branch_code)

## =================== Salary MAB ======================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB", subset= .(segment =="Salary"))
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

# Getting sum at branch level (will help in opex)
MAB_Segment <- MAB_Segment %>% 
  mutate(Grandtotal= sum(MAB_Segment[,c('Salary')]))
# no salary
#MAB_Segment$Grandtotal = sum(MAB_Segment$BranchLevel)

# ======== % value of drivers ======2
sal_MAB_Dr_B <- MAB_Segment %>% mutate (Salary=(Salary/Grandtotal))
# No Salary cx in CA, hence removing Salary=(Salary/BranchLevel)
names(sal_MAB_Dr_B)

sal_MAB_Dr_B$Abacus <- 0
sal_MAB_Dr_B$Diplomat <- 0
sal_MAB_Dr_B$Insignia <- 0
sal_MAB_Dr_B$NR <- 0
sal_MAB_Dr_B$Signature <- 0
#sal_MAB_Dr_B$Salary <- 0
sal_MAB_Dr_B$Tasc <- 0
sal_MAB_Dr_B$Mass <- 0
sal_MAB_Dr_B$Aspire <- 0

# Removing Grand total, and branch total columns, since they are not needed
sal_MAB_Dr_B<- sal_MAB_Dr_B[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                               "Mass","Aspire")]
sum(sal_MAB_Dr_B)-sum(sal_MAB_Dr_B$cif_branch_code)

shell_dc_branches <-  as.data.frame(DC_txnsBdr$cif_branch_code)
colnames(shell_dc_branches)[1] <- "cif_branch_code"

sal_MAB_Dr_B <- left_join(shell_dc_branches,sal_MAB_Dr_B,by="cif_branch_code")

colSums(is.na(sal_MAB_Dr_B))
sal_MAB_Dr_B[is.na(sal_MAB_Dr_B)] = 0

sum(sal_MAB_Dr_B)-sum(sal_MAB_Dr_B$cif_branch_code)

##### 50% Salary MAB+ 50% DC txns
sal_dc_dr<-DC_txnsBdr
names(sal_dc_dr)
colnames(sal_dc_dr)[1]="cif_branch_code"
sal_dc_dr<-sal_dc_dr[,c('cif_branch_code')]
sal_dc_dr<-data.frame(sal_dc_dr)
colnames(sal_dc_dr)[1]="cif_branch_code"

sum(DC_txnsBdr)-sum(DC_txnsBdr$cif_branch_code)
sum(sal_MAB_Dr_B)-sum(sal_MAB_Dr_B$cif_branch_code)

# we get a warning, not an error. ; driver value is correct though
sal_dc_dr$Abacus<-((0.5*(DC_txnsBdr$Abacus))+ (0.5*(sal_MAB_Dr_B$Abacus)))
sal_dc_dr$Diplomat<-((0.5*(DC_txnsBdr$Diplomat))+ (0.5*(sal_MAB_Dr_B$Diplomat)))
sal_dc_dr$Insignia<-((0.5*(DC_txnsBdr$Insignia))+ (0.5*(sal_MAB_Dr_B$Insignia)))
sal_dc_dr$NR<-((0.5*(DC_txnsBdr$NR))+ (0.5*(sal_MAB_Dr_B$NR)))
sal_dc_dr$Signature<-((0.5*(DC_txnsBdr$Signature))+ (0.5*(sal_MAB_Dr_B$Signature)))
sal_dc_dr$Salary<-((0.5*(DC_txnsBdr$Salary))+ (0.5*(sal_MAB_Dr_B$Salary)))
sal_dc_dr$Tasc<-((0.5*(DC_txnsBdr$Tasc))+ (0.5*(sal_MAB_Dr_B$Tasc)))
sal_dc_dr$Mass<-((0.5*(DC_txnsBdr$Mass))+ (0.5*(sal_MAB_Dr_B$Mass)))
sal_dc_dr$Aspire<-((0.5*(DC_txnsBdr$Aspire))+ (0.5*(sal_MAB_Dr_B$Aspire)))

sum(sal_dc_dr)-sum(sal_dc_dr$cif_branch_code)

###################################################2
# Central Cost: Allocation ====
##################################################2
driver_info <- driver_info_raw
#driver_info <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/3Jun_Sep2019/inputs/Us/role_wise_drivers_central2.xlsx")

table(driver_info$Level)
driver_info <- driver_info %>% filter (Level == "Central")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]

chk_dupl <- driver_info[duplicated(driver_info$`Functional Designation`),]# see this first!!**********
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]

table(driver_info$`Functional Designation`)
#driver_info<- driver_info %>% filter (Drivers != "50%  MAB +50% Branch Txn(Exclude insignia where ISM is there)")
#****************** making a change, only for this time.  Using IB as proxy for CIB txns*******
driver_info$Drivers <- ifelse(driver_info$Drivers == "CIB txns","IB txns",driver_info$Drivers)


# Service delivery ambassador & manager should not be at Central level, removing them
#driver_info <- driver_info %>% filter (!`Functional Designation` %in% c('Service Delivery Ambassador - Salary',
#                                                                        'Service Delivery Manager - Corporate Salary'))




# Added the 3 ( 2 agri support, 1 head) RBU central designations here in BBB_people3_withRBU2
sal_withRBU <- sal_raw
#sal_withRBU <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/3Jun_Sep2019/inputs/Others/People/BBB_people3_withRBU2.xlsx")
### Note for Next time:: Don't use file with RBU *****************************
# Since, Central Allocation is also only for BBB, use that instead, to avoid any RBU allocation
# merely because the designation is same, but for RBU

#setnames(sal_withRBU,old="Job",new="Functional Designation")
#setnames(sal_withRBU,old="Br Code",new="cif_branch_code")

# keeping branches that are present in masterfile
uniq_branches <- masterfile[!duplicated(masterfile$cif_branch_code),]
uniq_branches <- uniq_branches[,c("cif_branch_code","cif_branch_name")]

sal_withRBU2 <- inner_join(uniq_branches,sal_withRBU,by="cif_branch_code") # keeping costs that can be allocated
# ones that are in our masterfile
sal <- sal_withRBU2

# Joining file to see all info in one go
# same result with left/ inner join
sal_join<- inner_join(driver_info,sal,by="Functional Designation")

saljoin_chk<- sal_join[!duplicated(sal_join),]

# Separating BBB and RBU, for allotting drivers to the respective costs

# could separate RBU and BBB basis functional desgn easily
# since only 2 distinct designations in RBU have to allocated
sal_join_BBB_raw<- sal_join %>% filter (!`Functional Designation` %in% c("AGRI SUPPORT","HEAD"))
sal_join_BBB<- sal_join_BBB_raw %>% filter (!zone_name %in% c("GMNE - Rural Zone")) # 
# to remove this designation : Relationship Officer - Smart Branch 172 BIRIYANDAYARA ****
# this is not in latest file

#sal_join_RBU <- sal_join %>% filter (`Functional Designation` %in% c("AGRI SUPPORT","HEAD"))

class(sal_join$Total_Salary)
sal_agg_BBB<- aggregate(sal_join_BBB[,"Total_Salary"], by = sal_join_BBB[,"Drivers"],FUN = sum, na.rm=T)
#sal_agg_RBU<- aggregate(sal_join_RBU[,"Total_Salary"], by = sal_join_RBU[,"Drivers"],FUN = sum, na.rm=T)

unique(sal_agg_BBB$Drivers)

############################# BBB ###############################2

# 1 "50%  MAB +50% Branch Txn(Exclude insignia where ISM is there)"

# MAB_BranchTxn_Dr  : 50% MAB + 50% Branch txn 

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "50%  MAB +50% Branch Txn(Exclude insignia where ISM is there)"] 
call_df <- MAB_BranchTxn_Dr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

MAB_BranchTxn_all <- df_all


# 2. MAB :  "All MAB" and  "All segments basis MAB" mean the same, so aggregating those costs
# to be allotted in one go

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "All MAB"] #+
#  sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "All segments basis MAB"]

call_df <- MAB_Bdr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

MAB_Bdrall <- df_all

# 2.  "50% Abacus +50% NB+MB"                                        
cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "50% Abacus +50% NB+MB" ] 

call_df <- abac_mbnb_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

abac_mbnb_drall <- df_all

# 2.  "50% Abacus +50% NB+MB"

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "50% Abacus +50% NB+MB" ]

call_df <- abac_mbnb_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

abac_mbnb_drall <- df_all

# 3.  "ATM txns"                                                     

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "ATM txns" ] 

call_df <- atmBdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

atmBdrall <- df_all

# # 3.  "ATM txns"                                                     
# 
# cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "ATM txns" ] 
# 
# call_df <- atmBdr
# 
# 
# df_sel <- call_df[-1]
# df_cif <- call_df[1]
# 
# df_all <- df_sel * cost
# df_all<- cbind(df_cif,df_all)
# 
# atmBdrall <- df_all

# 4.  "CA MAB"                                                       

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "CA MAB" ] 

call_df <- CA_MAB_Dr_B


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

CA_MAB_Dr_Ball <- df_all

# # 4.   "Digital Txns"                                                 

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "Digital Txns"] 

call_df <- DigBdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

DigBdrall <- df_all


# # 5.  "Diplomat MAB"                                                 

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "Diplomat MAB"] 

call_df <- diplomat_dr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

diplomat_drall <- df_all

# # 6.   "IB txns"                                                      
cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "IB txns"] 
cost
call_df <- nb_Bdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)
# might have no cost to allocate
nb_Bdrall <- df_all

# # 7.   "Insignia"                                                      

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "Insignia"] 

call_df <- insignia_dr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

insignia_drall <- df_all


# # 8.  "Insurance +MF revenue"                                        

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "Insurance +MF revenue"] 

call_df <- mf_insur_Bdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

mf_insur_Bdrall <- df_all

## # # 9.  "Mass MAB"                                                     

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "Mass MAB"] 

call_df <- mass_dr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

mass_drall <- df_all


## # 10.  "MF revenue"                                                   

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "MF revenue"] 

call_df <- mf_Bdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

mf_Bdrall <- df_all


## # 11.   "NR MAB"                                                     

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "NR MAB"] 

call_df <- nr_dr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

nr_drall <- df_all


# ## # 12.  "PL+LAP + CC customers"                                        

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers ==  "PL+LAP + CC customers"] 
cost 
call_df <- LAP_PL_CC_Bdr
# 
# 
df_sel <- call_df[-1]
df_cif <- call_df[1]
# 
df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)
# might have no cost to allocate, hence this might see an error here
LAP_PL_CC_Bdrall <- df_all


## # 13.  "PL+LAP + CC customers"      +  "PL+LAP customers"                                  

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "PL+LAP customers"]

call_df <- LAP_PL_Bdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

LAP_PL_Bdrall <- df_all


## # 14.  "POS+Ecom txns"                                     

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "POS+Ecom txns"] # no such driver this time

call_df <- ecomposBdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

ecomposBdrall <- df_all

## # 15.  "Salary MAB"                                                  

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "Salary MAB"] 

call_df <- sal_MAB_Dr_B


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

sal_MAB_Dr_Ball <- df_all


## # 16.  "TASC MAB"                                                     

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "TASC MAB"] 

call_df <- tasc_dr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

tasc_drall <- df_all

## # 17. "TFX revenue"                                                    

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "TFX revenue"] 

call_df <- TfxBdr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

TfxBdrall <- df_all


## # 17. Mobile txns                                                  

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "Mobile txns"] 

call_df <- mb_Bdr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

mb_Bdrall <- df_all


## # 18. Salary + DC txns                                                  

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "Salary MAB+DC txns"] 

call_df <- sal_dc_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

sal_dc_drall <- df_all


## # 20. Signature MAB                                                

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "Signature MAB"] 

call_df <- sig_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

sig_drall <- df_all


## # 21. SA MAB                                                

cost <- sal_agg_BBB$Total_Salary[sal_agg_BBB$Drivers == "SA MAB"] 
cost
call_df <- SA_MAB_Dr_B

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

sa_drall <- df_all
# might get an error, if there's no cost to allocate

# seeing details of some df
ob_name <-as.data.frame(ls()); colnames(ob_name)[1]<-"name"
ob_name2 <- ob_name %>% filter(name %like% 'all')

names_df <- ob_name2$name
names_df

for (i in names_df) {
  df= get(i)
  print(i)
  print(nrow(df)) # should not be empty df
  print(ncol(df)) # should all have 10 columns
}

# mb_Bdrall,sal_dc_drall,tasc_drall
# mobile txns, Salary MAB+DC txns, TASC MAB

Central_allSep<- do.call(rbind,list(abac_mbnb_drall,atmBdrall,CA_MAB_Dr_Ball,DigBdrall,diplomat_drall,
                                    ecomposBdrall,insignia_drall,LAP_PL_Bdrall,MAB_BranchTxn_all,#LAP_PL_CC_Bdrall,
                                    MAB_Bdrall,mass_drall,mb_Bdrall,mf_Bdrall,mf_insur_Bdrall,#nb_Bdrall
                                    nr_drall,#sa_drall
                                    sal_dc_drall,sal_MAB_Dr_Ball,sig_drall,tasc_drall,TfxBdrall)) 


# Central_allSep<- do.call(rbind,list(TfxBdrall,tasc_drall,sal_MAB_Dr_Ball,ecomposBdrall,
#                                     LAP_PL_Bdrall,nr_drall,mf_Bdrall,mass_drall,mf_insur_Bdrall,insignia_drall,
#                                     nb_Bdrall,diplomat_drall,DigBdrall,CA_MAB_Dr_Ball,atmBdrall,
#                                     abac_mbnb_drall,MAB_Bdrall,mb_Bdrall,LAP_PL_CC_Bdrall,
#                                     sal_dc_drall,sig_drall,sa_drall)) #mab bbb, mab rural, ,

# MAB_Rdrall

sum(Central_allSep,na.rm=T)- sum(Central_allSep$cif_branch_code)

chk <- inner_join(uniq_branches,sal_join_BBB,by="cif_branch_code")
chk_no990 <- chk %>% filter (cif_branch_code != 990 )
chk2 <- chk %>% dplyr::group_by(Drivers) %>% dplyr::summarize(sal= sum(Total_Salary,na.rm=T))

sum(chk$Total_Salary,na.rm = T)
#sum(chk_no990$Total_Salary,na.rm = T)

sum(chk$Total_Salary,na.rm = T) - (sum(Central_allSep,na.rm=T)- sum(Central_allSep$cif_branch_code)) # should be 0

# if there's a diff in prev line, compare with values from chk2 pvt
sum(TfxBdrall,na.rm=T)- sum(TfxBdrall$cif_branch_code)
sum(tasc_drall,na.rm=T)- sum(tasc_drall$cif_branch_code)
sum(sal_MAB_Dr_Ball,na.rm=T)- sum(sal_MAB_Dr_Ball$cif_branch_code)
sum(ecomposBdrall,na.rm=T)- sum(ecomposBdrall$cif_branch_code) # doesn't exist
sum(LAP_PL_Bdrall,na.rm=T)- sum(LAP_PL_Bdrall$cif_branch_code)
sum(nr_drall,na.rm=T)- sum(nr_drall$cif_branch_code)
sum(mf_Bdrall,na.rm=T)- sum(mf_Bdrall$cif_branch_code)
sum(mass_drall,na.rm=T)- sum(mass_drall$cif_branch_code)
sum(mf_insur_Bdrall,na.rm=T)- sum(mf_insur_Bdrall$cif_branch_code)
sum(insignia_drall,na.rm=T)- sum(insignia_drall$cif_branch_code)
sum(nb_Bdrall,na.rm=T)- sum(nb_Bdrall$cif_branch_code)
sum(diplomat_drall,na.rm=T)- sum(diplomat_drall$cif_branch_code)
sum(DigBdrall,na.rm=T)- sum(DigBdrall$cif_branch_code)
sum(CA_MAB_Dr_Ball,na.rm=T)- sum(CA_MAB_Dr_Ball$cif_branch_code)
sum(atmBdrall,na.rm=T)- sum(atmBdrall$cif_branch_code)
sum(abac_mbnb_drall,na.rm=T)- sum(abac_mbnb_drall$cif_branch_code)
sum(MAB_Bdrall,na.rm=T)- sum(MAB_Bdrall$cif_branch_code)
#sum(MAB_Rdrall,na.rm=T)- sum(MAB_Rdrall$cif_branch_code)
sum(mb_Bdrall,na.rm=T)- sum(mb_Bdrall$cif_branch_code)
sum(LAP_PL_CC_Bdrall,na.rm=T)- sum(LAP_PL_CC_Bdrall$cif_branch_code)
sum(sal_dc_drall,na.rm=T)- sum(sal_dc_drall$cif_branch_code)
sum(sig_drall,na.rm=T)- sum(sig_drall$cif_branch_code)
sum(sa_drall,na.rm=T)- sum(sa_drall$cif_branch_code)

# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','pplbranch_sep','clusterFinSep','zoneFinSep',
          'sal_withRBU2','sal_withRBU','Central_allSep','driver_info_raw')
all <- ls() ; remove <- all[!all %in% keep ]
rm(list = remove)

##### Multi- Branch Level ########

# note : compare branch number from ppl cost input file & branch tagging for RMs as per insignia file
masterfile <- masterfile_raw3

colSums(is.na(masterfile))
masterfile[is.na(masterfile)] = 0 # Replacing all NAs with 0

#== insignia customers file; choose correct one
insignia <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/6_Dec20/inputs/3cost/people/Insignia Customer for Dec'20 & Insignia RM list.xlsx",sheet="Dec'20")
names(insignia)
# "customer_code" "CIF_sol_id"    "Group ID"      "cif_rm_code"   "cif_rm_name"   "TL Name" 

# note : compare branch number from ppl cost input file & branch tagging for RMs as per insignia file
tail(count(unique(insignia$cif_rm_code)),5)

names(insignia)
setnames(insignia,old="CIF_sol_id",new="cx_branch_code")
setnames(insignia,old="cif_rm_code",new="Emp_No" ) # can be this RM CODE
#setnames(insignia,old="RM name",new="RM NAME" ) # not necessarily needed

chk_dupl <- insignia[duplicated(insignia$customer_code),]; nrow(chk_dupl) # should be 0
insignia2 <- insignia %>% select(-c(segment,subsegment))
# 1.	Map the Masterfile with Insignia customer details, and get the RM mapped to the customer
insig_join<- left_join(masterfile,insignia2,by="customer_code") 
names(insig_join)
# kept masterfile in left, coz we have to allocate basis that
insig_join_sel <- insig_join[,c("customer_code","avgMAB","cxcodeflag","segment",
                                "cif_branch_code","cx_branch_code","cif_rm_name","Emp_No")]
insig_join2 <- insig_join_sel # making a copy

# we need only avg MAB in the end, selecting that
colSums(is.na(insig_join_sel))
table(insig_join_sel$segment)
# 2. Keeping insignia cx & cx who have RM mapped to them
insig_join_sel<- insig_join_sel %>% filter (!is.na(Emp_No)) # | segment == "Insignia"
colSums(is.na(insig_join_sel))

# RM Branch details: emp master (correct one)
rmbranch <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/6_Dec20/inputs/3cost/people/Insignia Customer for Dec'20 & Insignia RM list.xlsx",sheet="RM List")
#rmbranch <- read_excel("E:/shubhi ahuja/d/Shubhi/15 Unit Economics/5_JunSep20/inputs/People/1. BBB Employee MASTER 30112020.xlsx")
rmbranch2 <- rmbranch[,c("Employee Number","Br Code","Job","ROLE","Employee Status")]
table(rmbranch2$ROLE)
setnames(rmbranch2,old="Br Code",new="RMbranch")
str(rmbranch2)

table(rmbranch$Job,rmbranch2$ROLE)
#rmbranch3 <- rmbranch2 %>% filter (ROLE == "INSIGNIA RM")
rmbranch3 <- rmbranch2 %>% filter(Job %in% c('Relationship Manager - Insignia Preferred Banking',
                                             'Relationship Manager - Insignia',
                                             'Senior Relationship Manager - Insignia Preferred Banking') )
table(rmbranch3$`Employee Status`)
table(rmbranch3$Job)
table(rmbranch3$ROLE)

table(rmbranch3$`Employee Status`)

# 2. Map branch of the RM with the BBB employee details shared by Insignia Team ( getting RM branch via RM emp id)
insig_join_sel2 <- left_join(insig_join_sel,rmbranch3,by=c("Emp_No"="Employee Number"))
table(insig_join_sel2$ROLE)
table(insig_join_sel2$Job)

table(insig_join_sel2$Job,insig_join_sel2$ROLE)

# cost

# Filter for these designations from Cost File:
# Relationship Manager - Insignia Preferred Banking
# Senior Relationship Manager - Insignia Preferred Banking
# Relationship Manager - Insignia
salmultibranch <- sal_raw
salmultibranch$`Functional Designation` <-trimws(salmultibranch$`Functional Designation`)

RM <- salmultibranch %>% filter (`Functional Designation` %in% c('Relationship Manager - Insignia Preferred Banking',
                                                                 'Senior Relationship Manager - Insignia Preferred Banking',
                                                                 'Relationship Manager - Insignia',
                                                                 'Relationship Manager - Insignia Preferred Banking',
                                                                 'Senior Relationship Manager - Insignia Preferred Banking',
                                                                 'Senior Relationship Manager - Insignia Preferred Banking',
                                                                 'Relationship Manager - Insignia Preferred Banking'                                                          ))

table(RM$`Functional Designation`)

# avgRMsal2 not calculating mean, just gave the sum
# These values are not correct, check below file for details ( bcoz of pivot, count is not correctly captured)
# file:///E:/shubhi ahuja/d/Shubhi/15 Unit Economics/4_Dec19_Mar20/checks/RM_cost2 multibranch.xlsx

# Row Labels	                                  Sum of qurter	    Count of Employee Number	Average of qurter2
# Relationship Manager - Insignia	                  1319648	          5	                      263930
# Relationship Manager - Insignia Preferred Banking	29176943  	      102	                    286048
# Senior Relationship Manager - Insignia Preferred Banking	4007499	  10	                    400750
# Grand Total	                                      34504090	        117	                    294907

RM2 <- RM %>% dplyr::group_by(`Functional Designation`) %>% dplyr::summarize(Total_Salary = sum(Total_Salary),
                                                                             RMcount = n(),
                                                                             avgRMsal2 = mean(Total_Salary),
                                                                             avgRMsal = Total_Salary/RMcount)

# Made the below pvt with latest data, same trend as last time

# Row Labels	  Count of Employee Number	Sum of CTC	              Average of CTC	          QUARTER	Q avg
# Relationship Manager - Insignia	14	15625608	1116114.857	          3906402	                279028.7143
# Relationship Manager - Insignia Preferred Banking	98	113729304	1160503.102	28432326	      290125.7755
# Senior Relationship Manager - Insignia Preferred Banking	10	16029996	1602999.6	4007499	  400749.9
# Grand Total	122	145384908	1191679.574	36346227	297919.8934

RM3 <- RM2

RM3 <- RM3 %>% mutate(avgRMsal = ifelse(`Functional Designation`=="Relationship Manager - Insignia",279028.7143,
                                        ifelse(`Functional Designation` == "Relationship Manager - Insignia Preferred Banking",290125.7755,400749.9)))

RM_cost <- RM3#RM_cost_raw
names(RM_cost)

sum(RM_cost$Total_Salary)

# Map avg RM cost basis avg cost for that role
#insig_join_sel3 <- left_join(insig_join_sel2,RM_cost,by=c("RMbranch"="empBranch"))
insig_join_sel3 <- left_join(insig_join_sel2,RM_cost,by=c("Job"="Functional Designation"))

names(insig_join_sel3)
table(insig_join_sel3$Job)
colSums(is.na(insig_join_sel3))
table(insig_join_sel3$ROLE)

# This exercise is for RMs only, not TLs
insig_join_sel4 <- insig_join_sel3 %>% filter(ROLE != "TL - INSIGNIA") # NAs got eliminated
nrow(insig_join_sel4)- nrow(insig_join_sel3) 
table(insig_join_sel4$Job)
table(insig_join_sel4$`Employee Status`)

colSums(is.na(insig_join_sel4))

#insig_join_sel5 <- insig_join_sel4 %>% filter (`Employee Status` == "Active")

chkportfolio <- insig_join_sel4 %>% dplyr::group_by(Emp_No) %>% dplyr::summarize(count=n())

insig_join_use <- insig_join_sel4 # not filtering out emp with a low base

chkval <- insig_join_use[!duplicated(insig_join_use$Emp_No),]; nrow(chkval) # unique RMs
sum(chkval$avgRMsal,na.rm = T)
sum(RM_cost$Total_Salary)
table(chkval$ROLE)
table(insig_join_use$ROLE)

chknonresigned <- chkval %>% filter (ROLE != 'RESIGNED')
sum(chknonresigned$avgRMsal,na.rm = T)

chk2 <- chkval %>% dplyr::group_by(RMbranch) %>% dplyr::summarize(countRM= n()) # no of RMs mapped to branches
#unique(insig_join_use$Emp_No)

## just to check
cx_with_RM <- insig_join_use  %>% filter (Emp_No== 4202 )
table(cx_with_RM$avgRMsal)
cx_with_RM$total_mab <- sum(cx_with_RM$avgMAB)
cx_with_RM$total_cx <- sum(cx_with_RM$cxcodeflag)
cx_with_RM$dr<- ifelse(cx_with_RM$total_mab != 0,cx_with_RM$avgMAB/cx_with_RM$total_mab,
                       cx_with_RM$cxcodeflag/cx_with_RM$total_cx)
cx_with_RM$allotted_cost<- (cx_with_RM$dr)*cx_with_RM$avgRMsal
branch_cost<- cx_with_RM
branch_cost<- branch_cost[,c("cx_branch_code","customer_code","allotted_cost","segment")]
sum(branch_cost$allotted_cost)


branch_list <- list()
for (i in unique(insig_join_use$Emp_No))
{
  
  cx_with_RM <- insig_join_use  %>% filter (Emp_No== i )
  cx_with_RM$total_mab <- sum(cx_with_RM$avgMAB)
  cx_with_RM$total_cx <- sum(cx_with_RM$cxcodeflag)
  cx_with_RM$dr<- ifelse(cx_with_RM$total_mab != 0,cx_with_RM$avgMAB/cx_with_RM$total_mab,
                         cx_with_RM$cxcodeflag/cx_with_RM$total_cx)
  cx_with_RM$allotted_cost<- (cx_with_RM$dr)*cx_with_RM$avgRMsal
  branch_cost<- cx_with_RM
  branch_cost<- branch_cost[,c("cx_branch_code","customer_code","allotted_cost","segment")]
  branch_list[[i]]<- branch_cost
  
}

branch_cost_appended <- do.call(rbind,branch_list)
class(branch_cost_appended)
class(branch_cost_appended$allotted_cost)
#branch_cost_agg<- aggregate(branch_cost_appended[,3], by= c(branch_cost_appended[,"cx_branch_code","segment"]),FUN= sum, na.rm=T)
branch_cost_agg_all<- aggregate(branch_cost_appended[,"allotted_cost"], by= (branch_cost_appended[,c("cx_branch_code","segment")]),FUN= sum, na.rm=T)

colnames(branch_cost_agg_all) [1]<-  "cif_branch_code"
colnames(branch_cost_agg_all) [3]<- "Cost" # alotted cost

table(branch_cost_agg_all$segment)
sum(branch_cost_agg_all$Cost)

# Scaling to match cost as per Chetna's cost value
branch_cost_agg_all2 <- branch_cost_agg_all 

branch_cost_appended <- do.call(rbind,branch_list)
class(branch_cost_appended)
class(branch_cost_appended$allotted_cost)
#branch_cost_agg<- aggregate(branch_cost_appended[,3], by= c(branch_cost_appended[,"cx_branch_code","segment"]),FUN= sum, na.rm=T)
branch_cost_agg_all<- aggregate(branch_cost_appended[,"allotted_cost"], by= (branch_cost_appended[,c("cx_branch_code","segment")]),FUN= sum, na.rm=T)

colnames(branch_cost_agg_all) [1]<-  "cif_branch_code"
colnames(branch_cost_agg_all) [3]<- "Cost" # alotted cost

table(branch_cost_agg_all$segment)
sum(branch_cost_agg_all$Cost)

# Scaling to match cost as per Chetna's cost value
branch_cost_agg_all2 <- branch_cost_agg_all 

# Scaling to match cost as per Chetna's cost value barring those tagged to branch 990 (covered in central 990)
RM_non990 <- RM %>% filter (cif_branch_code != 990)
sum(RM_non990$Total_Salary)
#branch_cost_agg_all2$Cost <- branch_cost_agg_all2$Cost * (sum(RM_cost$Total_Salary)/sum(branch_cost_agg_all$Cost))
branch_cost_agg_all2$Cost <- branch_cost_agg_all2$Cost * (sum(RM_non990$Total_Salary)/sum(branch_cost_agg_all$Cost))
sum(branch_cost_agg_all2$Cost)

table(branch_cost_agg_all$segment) # see which segment is missing, most likely Diplomat

# Long to wide
branch_cost_agg_all3<- dcast(branch_cost_agg_all2,cif_branch_code~segment,value.var="Cost")
branch_cost_agg_all3[is.na(branch_cost_agg_all3)] <- 0

sum(branch_cost_agg_all3,na.rm=T)- sum(branch_cost_agg_all3$cif_branch_code)
names(branch_cost_agg_all3)

sum(RM_non990$Total_Salary)-(sum(branch_cost_agg_all3,na.rm=T)- sum(branch_cost_agg_all3$cif_branch_code)) # should be 0

colSums(branch_cost_agg_all3)  # ********* see what all segments got value!!!!!!!!!!!!!!!!!!*************************

branch_cost_agg_all3$Diplomat <- 0 # adding the diplomat column, for uniformity

multi_branch<- branch_cost_agg_all3[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature",
                                       "Salary","Tasc","Mass","Aspire")]

sum(RM_cost$Total_Salary)-(sum(branch_cost_agg_all3,na.rm=T)- sum(branch_cost_agg_all3$cif_branch_code)) # should be equal to cost that will be allocated using central 990

sum(multi_branch,na.rm=T)- sum(multi_branch$cif_branch_code)
sum(RM_non990$Total_Salary,na.rm = T)- (sum(multi_branch,na.rm=T)- sum(multi_branch$cif_branch_code)) # should be 0


# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','pplbranch_sep','clusterFinSep',
          'sal_withRBU2','sal_withRBU','Central_allSep','multi_branch','zoneFinSep','driver_info_raw')
all <- ls()
remove <- all[!all %in% keep ]

rm(list = remove)

# Central 990==================
# 990 Central : Allocate at all levels, barring Central, to cases where branch == 990

sal_all <- sal_raw
chk_na <- sal_all %>% filter(is.na(cif_branch_code)); nrow(chk_na) 
# if it has value, see if they are to be allocated using central 990
class(sal_withRBU2$cif_branch_code)

sal_990 <- sal_raw %>% filter (cif_branch_code >= 990)

# Removing those which were allocated using central drivers, and have level as Central
driver_info <- driver_info_raw

table(driver_info$Level)
driver_info <- driver_info %>% filter (Level == "Central")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]

chk_dupl <- driver_info[duplicated(driver_info$`Functional Designation`),]; nrow(chk_dupl)# see this first!!**********
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]

table(driver_info$`Functional Designation`)
driver_info<- driver_info %>% filter (Drivers != "50%  MAB +50% Branch Txn(Exclude insignia where ISM is there)")
#****************** making a change, only for this time.  Using IB as proxy for CIB txns*******
driver_info$Drivers <- ifelse(driver_info$Drivers == "CIB txns","IB txns",driver_info$Drivers)

# Service delivery ambassador & manager should not be at Central level, removing them
#driver_info <- driver_info %>% filter (!`Functional Designation` %in% c('Service Delivery Ambassador - Salary',
#                                                                        'Service Delivery Manager - Corporate Salary'))

central_desig<-driver_info
sal990v2 <- sal_990 %>% filter(!`Functional Designation` %in% central_desig$`Functional Designation`)
sal990v2 <- sal990v2 %>% filter(`Functional Designation` != "Head - North and East - Branch & Business Banking")

old_dr <- driver_info_raw %>% filter(Level == "Central990")
names(old_dr)
old_dr2 <- old_dr[!duplicated(old_dr$`Functional Designation`),]
setnames(old_dr2,old="Drivers",new="Driver")
old_dr2 <- old_dr2[,c("Functional Designation","Level","Driver")]

sal990v3 <- left_join(sal990v2,old_dr2,by="Functional Designation")
chk_na2 <- sal990v3 %>% filter (is.na(Driver)) ; table(chk_na2$`Functional Designation`)

sal990v4 <- sal990v3
#sal990v4$Driver <- ifelse(sal990v4$`Functional Designation` == "Regional NR Banking Head","NR MAB",
#                          ifelse(sal990v4$`Functional Designation` == "Relationship Manager - Insignia Preferred Banking","Insignia MAB",sal990v4$Driver))

sal_agg <- sal990v4 %>% dplyr::group_by(Driver) %>% dplyr::summarize(Total_Salary= sum(Total_Salary,na.rm = T))
#sal_agg<- aggregate(sal990v4[,"Total_Salary"], by = list(sal990v4[,"Driver"]),FUN = sum, na.rm=T)
#sal_agg$Central_driver<- sal_agg$Driver <- sal_agg$Group.1
#setnames(sal_agg,old="x",new="Total_Salary")
sal_agg$Central_driver <- sal_agg$Driver
sal_agg$Central_driver<- ifelse(sal_agg$Driver %in% c("MAB across branches","MAB cluster","MAB zone"),"MAB",sal_agg$Central_driver)

sal_agg <- sal_agg %>% dplyr::group_by(Central_driver) %>% dplyr::summarize(Total_Salary= sum(Total_Salary,na.rm = T))

table(sal_agg$Central_driver)

###########################33
### now, coming to masterfile
masterfile <- masterfile_raw3
#setnames(masterfile,old="TFX",new="FinalTFX")  ### Renaming tfx to Final Tfx for use ahead
# setnames(masterfile,old="CMS",new="cms_mapping") # using ph value

colSums(is.na(masterfile))
masterfile[is.na(masterfile)] = 0 # Replacing all NAs with 0

# Adding branch POS and ecom, to create a new variable ============== POS+ Ecom ==============1
class(masterfile$debit_card_pos_usage_count)
class(masterfile$debit_card_ecom_usage_count)  # integer
masterfile$sum_posEcom<- masterfile$debit_card_pos_usage_count+ masterfile$debit_card_ecom_usage_count
class(masterfile$sum_posEcom)

# adding nb+ mb for new variable ======================= nb+mb =============1
class(masterfile$Mb_usage)
class(masterfile$netbanking_usage)  
masterfile$sum_nb_mb<- masterfile$netbanking_usage+ masterfile$Mb_usage
class(masterfile$sum_nb_mb)

# adding insurance+MF for new variable ======================= mf_insur =============1
class(masterfile$Insurance)
class(masterfile$MF)  
masterfile$Insurance<- as.numeric(masterfile$Insurance)
masterfile$MF<- as.numeric(masterfile$MF)

masterfile$mf_insur<- masterfile$Insurance+ masterfile$MF
class(masterfile$mf_insur)
class(masterfile$LAP_PL_CC)

#### Atm txns   ##################### to be changed
class(masterfile$`ATM txns`)
masterfile$`ATM txns`<- as.numeric(masterfile$`ATM txns`)
colSums(is.na(masterfile))
masterfile[is.na(masterfile)]<- 0 # Replacing all NAs with 0

## DC_usage
class(masterfile$ATM_withdraw)
masterfile$DC_txns <- masterfile$debit_card_pos_usage_count+masterfile$debit_card_ecom_usage_count + masterfile$ATM_withdraw

#Salary MAB
masterfile$SalaryMAB<- ifelse(masterfile$segment == "Salary",masterfile$avgMAB,0)

masterfile$FinalTFX <- rowSums(masterfile[,c("Others","TradeIncome")],na.rm = T) # Final Tfx
class(masterfile$FinalTFX)

masterfile$isc_MAB<- ifelse(masterfile$ISC_FLAG == 1, masterfile$avgMAB,0)

#Filter to get BBB details ===============BBB=====================2
BBB<- masterfile %>% filter(!zone_name %in% c('GMNE - Rural Zone','Kolhapur- Rural Zone'))
table(BBB$zone_name)

# Keeping fields needed to make pivots
BBBsel<- BBB[,c("cif_branch_code","segment","FinalTFX","Digital_txns","cxcodeflag","avgMAB","sum_posEcom","sum_nb_mb",
                "netbanking_usage","ATM txns","Insurance","MF","LAP_PL","LAP_PL_CC","mf_insur","Mb_usage","DC_txns","SalaryMAB",
                "cms_mapping","total_branch_txns","isc_MAB")]
ncol(BBBsel)
BBBagg<- aggregate(BBBsel[,c(3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)], BBBsel[,c(1,2)], FUN = sum, na.rm=T)


# Central 990 drivers====
#============= MAB ==============================2

MAB_B<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB")
### could've made one agg file( BBB and RBU combined), added zone, cluster etc. basis branch cif (left join)
# while doing dcast, could've subset using zones - to separate rural and bbb drivers....

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_B))
MAB_B[is.na(MAB_B)] = 0


# Getting sum at branch level (will help in opex)
MAB_B <- MAB_B %>% 
  mutate(BranchLevel= rowSums(MAB_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

MAB_B$Grandtotal = sum(MAB_B$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
MAB_Bdr <- MAB_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))

names(MAB_Bdr)
# Removing Grand total, and branch total columns, since they are not needed
MAB_Bdr<- MAB_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                     "Mass","Aspire")]


#============= TFX Revenue ==============================2
TfxB<- dcast(BBBagg,cif_branch_code~segment,value.var="FinalTFX")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(TfxB))
TfxB[is.na(TfxB)] = 0
# Getting sum at branch level (will help in opex)
TfxB <- TfxB %>% 
  mutate(BranchLevel= rowSums(TfxB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

TfxB$Grandtotal = sum(TfxB$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
TfxBdr <- TfxB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(TfxBdr)
# Removing Grand total, and branch total columns, since they are not needed
TfxBdr<- TfxBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]

#============= ISC ==============================2
ISCB<- dcast(BBBagg,cif_branch_code~segment,value.var="isc_MAB")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(ISCB))
ISCB[is.na(ISCB)] = 0
# Getting sum at branch level (will help in opex)
ISCB <- ISCB %>% 
  mutate(BranchLevel= rowSums(ISCB[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

ISCB$Grandtotal = sum(ISCB$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
ISCBdr <- ISCB %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(ISCBdr)
# Removing Grand total, and branch total columns, since they are not needed
ISCBdr<- ISCBdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]


#============= LAP PL ==============================2

LAP_PL_B<- dcast(BBBagg,cif_branch_code~segment,value.var="LAP_PL")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(LAP_PL_B))
LAP_PL_B[is.na(LAP_PL_B)] = 0

# Getting sum at branch level (will help in opex)
LAP_PL_B <- LAP_PL_B %>% 
  mutate(BranchLevel= rowSums(LAP_PL_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
LAP_PL_B$Grandtotal = sum(LAP_PL_B$BranchLevel)
# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
LAP_PL_Bdr <- LAP_PL_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(LAP_PL_Bdr)
# Removing Grand total, and branch total columns, since they are not needed
LAP_PL_Bdr<- LAP_PL_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                           "Mass","Aspire")]

#============= LAP PL CC==============================2
LAP_PL_CC_B<- dcast(BBBagg,cif_branch_code~segment,value.var="LAP_PL_CC")
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(LAP_PL_CC_B))
LAP_PL_CC_B[is.na(LAP_PL_CC_B)] = 0
# Getting sum at branch level (will help in opex)
LAP_PL_CC_B <- LAP_PL_CC_B %>% 
  mutate(BranchLevel= rowSums(LAP_PL_CC_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
LAP_PL_CC_B$Grandtotal = sum(LAP_PL_CC_B$BranchLevel)
# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
LAP_PL_CC_Bdr <- LAP_PL_CC_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(LAP_PL_CC_Bdr)

# Removing Grand total, and branch total columns, since they are not needed
LAP_PL_CC_Bdr<- LAP_PL_CC_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                                 "Mass","Aspire")]


#============= MF ==============================2

mf_B<- dcast(BBBagg,cif_branch_code~segment,value.var="MF")


# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(mf_B))
mf_B[is.na(mf_B)] = 0


# Getting sum at branch level (will help in opex)
mf_B <- mf_B %>% 
  mutate(BranchLevel= rowSums(mf_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))
mf_B$Grandtotal = sum(mf_B$BranchLevel)
# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 
# ========  value of drivers ======2
mf_Bdr <- mf_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(mf_Bdr)
# Removing Grand total, and branch total columns, since they are not needed
mf_Bdr<- mf_Bdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]


#============= Insignia MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Insignia"))
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0
MAB_Segment$Grandtotal = sum(MAB_Segment$Insignia)  # Sum of Mass MAB across all branches

# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Insignia=(Insignia/Grandtotal))
MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
#MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0
names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed
insignia_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                               "Mass","Aspire")]

#============= NR MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "NR"))
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0
MAB_Segment$Grandtotal = sum(MAB_Segment$NR)  # Sum of Mass MAB across all branches
# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( NR=(NR/Grandtotal))
MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
#MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)
# Removing Grand total, and branch total columns, since they are not needed
nr_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                         "Mass","Aspire")]

#============= Tasc MAB ==============================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB",subset = .(segment == "Tasc"))
# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0
MAB_Segment$Grandtotal = sum(MAB_Segment$Tasc)  # Sum of Mass MAB across all branches
# Driver value: Proportion of Mass MAB of Branch, divided by Grand Total of Mass MAB
# ========  value of drivers ======2
MAB_Segmentdr <- MAB_Segment %>% mutate ( Tasc=(Tasc/Grandtotal))

MAB_Segmentdr$Abacus <- 0
MAB_Segmentdr$Diplomat <- 0
MAB_Segmentdr$Insignia <- 0
MAB_Segmentdr$NR <- 0
MAB_Segmentdr$Signature <- 0
MAB_Segmentdr$Salary <- 0
#MAB_Segmentdr$Tasc <- 0
MAB_Segmentdr$Mass <- 0
MAB_Segmentdr$Aspire <- 0

names(MAB_Segmentdr)

# Removing Grand total, and branch total columns, since they are not needed

tasc_dr<- MAB_Segmentdr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                           "Mass","Aspire")]

## =================== Salary MAB ======================2
MAB_Segment<- dcast(BBBagg,cif_branch_code~segment,value.var="avgMAB", subset= .(segment =="Salary"))
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(MAB_Segment))
MAB_Segment[is.na(MAB_Segment)] = 0

# Getting sum at branch level (will help in opex)
MAB_Segment <- MAB_Segment %>% 
  mutate(Grandtotal= sum(MAB_Segment[,c('Salary')]))
# no salary
#MAB_Segment$Grandtotal = sum(MAB_Segment$BranchLevel)

# ======== % value of drivers ======2
sal_MAB_Dr_B <- MAB_Segment %>% mutate (Salary=(Salary/Grandtotal))
# No Salary cx in CA, hence removing Salary=(Salary/BranchLevel)
names(sal_MAB_Dr_B)

sal_MAB_Dr_B$Abacus <- 0
sal_MAB_Dr_B$Diplomat <- 0
sal_MAB_Dr_B$Insignia <- 0
sal_MAB_Dr_B$NR <- 0
sal_MAB_Dr_B$Signature <- 0
#sal_MAB_Dr_B$Salary <- 0
sal_MAB_Dr_B$Tasc <- 0
sal_MAB_Dr_B$Mass <- 0
sal_MAB_Dr_B$Aspire <- 0

# Removing Grand total, and branch total columns, since they are not needed
sal_MAB_Dr_B<- sal_MAB_Dr_B[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                               "Mass","Aspire")]
sum(sal_MAB_Dr_B)-sum(sal_MAB_Dr_B$cif_branch_code)

## =================== CMS ======================2
CMS_B<- dcast(BBBagg,cif_branch_code~segment,value.var="cms_mapping")
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(CMS_B))
CMS_B[is.na(CMS_B)] = 0

# Getting sum at branch level (will help in opex)
CMS_B <- CMS_B %>% 
  mutate(BranchLevel= rowSums(CMS_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

CMS_B$Grandtotal = sum(CMS_B$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
cms_dr <- CMS_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(CMS_B)

# Removing Grand total, and branch total columns, since they are not needed
cms_dr<- cms_dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                   "Mass","Aspire")]


## ===================Branch txn======================2
Branch_B<- dcast(BBBagg,cif_branch_code~segment,value.var="total_branch_txns")
# has average MAB values

# After dcast, for missing values, we get NA, hence, making NA=0, for smoothening further calculation
colSums(is.na(Branch_B))
Branch_B[is.na(Branch_B)] = 0

# Getting sum at branch level (will help in opex)
Branch_B <- Branch_B %>% 
  mutate(BranchLevel= rowSums(Branch_B[,c('Abacus','Aspire','Diplomat','Insignia','Mass','NR','Salary','Signature','Tasc')],na.rm=TRUE))

Branch_B$Grandtotal = sum(Branch_B$BranchLevel)

# Driver value: Proportion of Payments for Segment, Branch divided by Grand Total 

# ========  value of drivers ======2
Branch_Dr <- Branch_B %>% mutate (
  Abacus = (Abacus/Grandtotal),Diplomat= (Diplomat/Grandtotal),Insignia=(Insignia/Grandtotal),
  NR=(NR/Grandtotal),Signature=(Signature/Grandtotal),Salary=(Salary/Grandtotal),
  Tasc=(Tasc/Grandtotal),Mass=(Mass/Grandtotal),Aspire=(Aspire/Grandtotal))
names(Branch_Dr)

# Removing Grand total, and branch total columns, since they are not needed
Branch_Dr<- Branch_Dr[,c("cif_branch_code","Abacus","Diplomat","Insignia","NR","Signature","Salary","Tasc",
                         "Mass","Aspire")]

Branch_Dr <- rapply(Branch_Dr, function(x) ifelse(is.nan(x),0,x),how="replace")

## 50% MAB + 50% Branch Txn
MAB_Dr <- MAB_Bdr

MAB_BranchTxn_Dr<-MAB_Dr
names(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"
MAB_BranchTxn_Dr<-MAB_BranchTxn_Dr[,c('cif_branch_code')]
MAB_BranchTxn_Dr<-data.frame(MAB_BranchTxn_Dr)
colnames(MAB_BranchTxn_Dr)[1]="cif_branch_code"

MAB_BranchTxn_Dr$Abacus<-((0.5*(MAB_Dr$Abacus))+ (0.5*(Branch_Dr$Abacus)))
MAB_BranchTxn_Dr$Diplomat<-((0.5*(MAB_Dr$Diplomat))+ (0.5*(Branch_Dr$Diplomat)))
MAB_BranchTxn_Dr$Insignia<-((0.5*(MAB_Dr$Insignia))+ (0.5*(Branch_Dr$Insignia)))
MAB_BranchTxn_Dr$NR<-((0.5*(MAB_Dr$NR))+ (0.5*(Branch_Dr$NR)))
MAB_BranchTxn_Dr$Signature<-((0.5*(MAB_Dr$Signature))+ (0.5*(Branch_Dr$Signature)))
MAB_BranchTxn_Dr$Salary<-((0.5*(MAB_Dr$Salary))+ (0.5*(Branch_Dr$Salary)))
MAB_BranchTxn_Dr$Tasc<-((0.5*(MAB_Dr$Tasc))+ (0.5*(Branch_Dr$Tasc)))
MAB_BranchTxn_Dr$Mass<-((0.5*(MAB_Dr$Mass))+ (0.5*(Branch_Dr$Mass)))
MAB_BranchTxn_Dr$Aspire<-((0.5*(MAB_Dr$Aspire))+ (0.5*(Branch_Dr$Aspire)))

### Central 990: Allocation====

### TFX REVENUE
table(sal_agg$Central_driver)
#cost <- sal_agg$Total_Salary[sal_agg$Central_driver %in% c("MAB across branches","MAB cluster","MAB zone")] 
cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "TFX revenue"] 
call_df <- TfxBdr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

Tfx_all <- df_all

### ISC
table(sal_agg$Central_driver)
#cost <- sal_agg$Total_Salary[sal_agg$Central_driver %in% c("MAB across branches","MAB cluster","MAB zone")] 
cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "ISC MAB"] 
call_df <- ISCBdr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

ISC_all <- df_all

### MAB
table(sal_agg$Central_driver)

#cost <- sal_agg$Total_Salary[sal_agg$Central_driver %in% c("MAB across branches","MAB cluster","MAB zone")] 
cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "MAB"] 
call_df <- MAB_Bdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

MAB_all <- df_all

### "CMS MAB" 

cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "CMS MAB"] 
call_df <- cms_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

cms_all <- df_all

### "PL+LAP customers"

cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "PL+LAP customers"]

call_df <- LAP_PL_Bdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

lap_pl_all <- df_all

### "PL+LAP + CC customers" ; "PL+LAP customers"
# ("PL+LAP + CC customers" being allocated with this, since we don't have CC data currently)

cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "PL+LAP + CC customers"]

call_df <- LAP_PL_CC_Bdr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

lap_pl_cc_all <- df_all

### "MF revenue"
cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "MF revenue"] 
call_df <- mf_Bdr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

mf_all <- df_all

### "Salary MAB" 

cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "Salary MAB"] 
call_df <- sal_MAB_Dr_B


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

sal_all <- df_all


### "Insignia MAB"
cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "Insignia MAB"] 
#cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "Insignia MAB"] 
call_df <- insignia_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

insig_all <- df_all


### "TASC MAB"
cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "TASC MAB"] 
call_df <- tasc_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

tasc_all <- df_all


### "NR MAB"
cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "NR MAB"] 
call_df <- nr_dr

df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

nr_all <- df_all

# MAB_BranchTxn_Dr  : 50% MAB + 50% Branch txn 

cost <- sal_agg$Total_Salary[sal_agg$Central_driver == "50% MAB + 50% Branch txns"] +
  sal_agg$Total_Salary[sal_agg$Central_driver == "50%  MAB +50% Branch Txn(Exclude insignia where ISM is there)"] 
call_df <- MAB_BranchTxn_Dr


df_sel <- call_df[-1]
df_cif <- call_df[1]

df_all <- df_sel * cost
df_all<- cbind(df_cif,df_all)

MAB_BranchTxn_all <- df_all

##### Combining all the 990 costs ###############
central990all<- do.call("rbind", list(MAB_all, cms_all,lap_pl_all,lap_pl_cc_all,
                                      sal_all,insig_all,tasc_all,mf_all,
                                      MAB_BranchTxn_all,nr_all,Tfx_all,ISC_all))

sum(sal_agg$Total_Salary) -(sum(central990all)-sum(central990all$cif_branch_code)) # should be 0
sum(central990all)-sum(central990all$cif_branch_code)

sum(MAB_all,na.rm=T)- sum(MAB_all$cif_branch_code)
sum(tasc_all,na.rm=T)- sum(tasc_all$cif_branch_code)
sum(cms_all,na.rm=T)- sum(cms_all$cif_branch_code)
sum(lap_pl_all,na.rm=T)- sum(lap_pl_all$cif_branch_code) 
sum(lap_pl_cc_all,na.rm=T)- sum(lap_pl_cc_all$cif_branch_code)
sum(sal_all,na.rm=T)- sum(sal_all$cif_branch_code)
sum(insig_all,na.rm=T)- sum(insig_all$cif_branch_code)
sum(mf_all,na.rm=T)- sum(mf_all$cif_branch_code)
sum(MAB_BranchTxn_all,na.rm=T)- sum(MAB_BranchTxn_all$cif_branch_code)
sum(nr_all,na.rm=T)- sum(nr_all$cif_branch_code)

# 50% MAB + 50% Branch txns; ISC, TFX


# removing unncessary stuff
keep <- c('masterfile_raw','sal_raw','masterfile_raw3','pplbranch_sep','clusterFinSep','zoneFinSep',
          'sal_withRBU2','sal_withRBU','Central_allSep','multi_branch',#'multi_zone_all',
          'central990all','driver_info_raw')
all <- ls();remove <- all[!all %in% keep ]

rm(list = remove)

ppl_cost_Sep<- do.call(rbind,list(pplbranch_sep,clusterFinSep,zoneFinSep, 
                                  Central_allSep,multi_branch,central990all)) # multi_zone_all

ppl_cost_Sep <- aggregate(ppl_cost_Sep[,2:10], by = list(ppl_cost_Sep[,1]), FUN=sum, na.rm=T)
colnames(ppl_cost_Sep)[1] = "cif_branch_code"

# Final Checks====

sum(sal_raw$Total_Salary)
sum(ppl_cost_Sep,na.rm=T) - sum(ppl_cost_Sep$cif_branch_code)
(sum(sal_raw$Total_Salary))-(sum(ppl_cost_Sep,na.rm=T) - sum(ppl_cost_Sep$cif_branch_code))  # should be 0

# Branch
driver_info <- driver_info_raw %>% filter(Level != "Central990")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]

chk_all <- left_join(sal_raw,driver_info,by= "Functional Designation")
chk_all2 <- chk_all %>% filter(is.na(Level))
chk_all2 <- chk_all2 %>% filter(cif_branch_code< 990)
chk_all2 <- chk_all2 %>% filter(!`Functional Designation` %in% c('Relationship Manager - Insignia Preferred Banking',
                                                                 'Relationship Manager - Insignia',
                                                                 'Senior Relationship Manager - Insignia Preferred Banking'))

sum(chk_all2$Total_Salary)
sum(chk_all2$Total_Salary) - (sum(pplbranch_sep,na.rm=T)- sum(pplbranch_sep$cif_branch_code,na.rm=T)) # should be 0


# central
driver_info <- driver_info_raw %>% filter (Level == "Central")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]
chk_all <- left_join(sal_raw,driver_info,by= "Functional Designation")
chk_all1 <- chk_all %>% 
  mutate(Level_revised = ifelse(cif_branch_code >= 990 & Level %in% c('Cluster','Zone'),"Central990",Level))
chk_all2 <- chk_all1 %>% dplyr::group_by(Level_revised) %>% dplyr::summarize(total = sum(Total_Salary,na.rm=T))
chk_all2

sum(Central_allSep,na.rm=T) - sum(Central_allSep$cif_branch_code)  

# cluster
driver_info <- driver_info_raw %>% filter (Level == "Cluster")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]
chk_all <- left_join(sal_raw,driver_info,by= "Functional Designation")
chk_all1 <- chk_all %>% 
  mutate(Level_revised = ifelse(cif_branch_code >= 990 & Level %in% c('Cluster','Zone'),"Central990",Level))
chk_all2 <- chk_all1 %>% dplyr::group_by(Level_revised) %>% dplyr::summarize(total = sum(Total_Salary,na.rm=T))
chk_all2

# central 990
driver_info <- driver_info_raw %>% filter (Level == "Central990")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]
sal_interm <-sal_raw %>% filter (cif_branch_code >= 990)
chk_all <- left_join(sal_interm,driver_info,by= "Functional Designation")
chk_all1 <- chk_all %>% 
  mutate(Level_revised = ifelse(cif_branch_code >= 990 & Level %in% c('Cluster','Zone'),"Central990",Level))
chk_all2 <- chk_all1 %>% dplyr::group_by(Level_revised) %>% dplyr::summarize(total = sum(Total_Salary,na.rm=T))
chk_all2

sum(central990all,na.rm=T) - sum(central990all$cif_branch_code) ## Matching

# zone
driver_info <- driver_info_raw %>% filter (Level == "Zone")
driver_info<- driver_info[!duplicated(driver_info$`Functional Designation`),]
chk_all <- left_join(sal_raw,driver_info,by= "Functional Designation")
chk_all1 <- chk_all %>% 
  mutate(Level_revised = ifelse(cif_branch_code >= 990 & Level %in% c('Cluster','Zone'),"Central990",Level))
chk_all2 <- chk_all1 %>% dplyr::group_by(Level_revised) %>% dplyr::summarize(total = sum(Total_Salary,na.rm=T))
chk_all2

sum(zoneFinSep,na.rm=T) - sum(zoneFinSep$cif_branch_code) # Matched




masterfile <- masterfile_raw3
# uniq_branches <- masterfile[!duplicated(masterfile$cif_branch_code),]
# uniq_branches <- uniq_branches[,c("cif_branch_code","cif_branch_name")]

#masterfile <- masterfile_raw3

### Customer level allocation====
masterfile_sel<- masterfile[,c("customer_code","segment","cif_branch_code","cif_branch_name",
                               "avgMAB","total_txns","cxcodeflag")]
masterfile_sel$key<- paste0(masterfile_sel$segment,masterfile_sel$cif_branch_code) 

uniq_branches <- masterfile_sel %>% group_by(cif_branch_code) %>% dplyr::summarize(count=n())

##### making the pivot ######2  
# grouping by key
pivot <- masterfile_sel %>% dplyr::group_by(key) %>% dplyr::summarize(Br_seg_MAB= sum(avgMAB,na.rm=T),
                                                                      Br_seg_txns= sum(total_txns,na.rm=T),
                                                                      Br_seg_cx = sum(cxcodeflag,na.rm=T))

# Join by 'key' to get the needed table _____________________
use<- left_join(masterfile_sel,pivot,by="key")
colSums(is.na(use))

######### Driver creation cx allocation ############
class(use$Br_seg_MAB);class(use$avgMAB)
str(use)
use$MAB_dr <- use$avgMAB/use$Br_seg_MAB
use$txns_dr<- use$total_txns/use$Br_seg_txns
use$cx_dr<- use$cxcodeflag/use$Br_seg_cx

use_orig <- use # now will remove NaN
use$MAB_dr[is.nan(use$MAB_dr)] <- 0; use$txns_dr[is.nan(use$txns_dr)] <- 0
use$MAB_txns_dr <- (0.5*use$MAB_dr) + (0.5*use$txns_dr)

use_raw <- use

pvt_driver <- use %>% dplyr::group_by(key) %>% dplyr::summarize(MAB_dr=sum(MAB_dr,na.rm=T),
                                                                txns_dr=sum(txns_dr,na.rm=T),
                                                                MAB_txns_dr=sum(MAB_txns_dr,na.rm=T),
                                                                cx_dr = sum(cx_dr,na.rm=T))

pvt_driver2 <- pvt_driver %>% filter(MAB_txns_dr < 0.4)
table(pvt_driver2$MAB_txns_dr)
table(pvt_driver2$cx_dr)

## using cx_driver as backup, if mab_txns dr = 0
use_raw2 <- use_raw %>% mutate(MAB_txns_dr = ifelse(key %in% pvt_driver2$key,cx_dr,MAB_txns_dr))

chkdr <- use_raw2 %>% dplyr::group_by(key) %>% dplyr::summarize(MAB_dr=sum(MAB_dr,na.rm=T),
                                                                txns_dr=sum(txns_dr,na.rm=T),
                                                                MAB_txns_dr=sum(MAB_txns_dr,na.rm=T),
                                                                cx_dr = sum(cx_dr,na.rm=T))

chkdr2 <- chkdr %>% filter(MAB_txns_dr < 0.4); nrow(chkdr2) # should be 0, where driver was 0, we used cx driver as backup


chk_dr <- use_raw2 %>% select(cif_branch_code,segment,MAB_dr,txns_dr,MAB_txns_dr,cx_dr)
chk_dr <- chk_dr %>% dplyr::group_by(cif_branch_code,segment) %>% dplyr::summarize(MAB_dr=sum(MAB_dr,na.rm=T),
                                                                                   txns_dr=sum(txns_dr,na.rm=T),
                                                                                   MAB_txns_dr=sum(MAB_txns_dr,na.rm=T),
                                                                                   cx_dr = sum(cx_dr,na.rm=T))

table(chk_dr$MAB_txns_dr)
chk_dr2 <- chk_dr %>% filter(MAB_txns_dr>0 & MAB_txns_dr < 1.0)
chk_dr3 <- chk_dr %>% filter(MAB_txns_dr == 0.5) # doesn't capture all cases we want
chk_dr4 <- chk_dr %>% filter(MAB_txns_dr>0 & MAB_txns_dr < 0.8)
table(chk_dr4$MAB_txns_dr)
chk_dr4$key <- paste0(chk_dr4$segment,chk_dr4$cif_branch_code)

use_raw3 <- use_raw2 %>% mutate(MAB_txns_dr = ifelse(key %in% chk_dr4$key,(MAB_txns_dr*2),MAB_txns_dr))

chk_dr <- use_raw3 %>% select(key,MAB_dr,txns_dr,MAB_txns_dr,cx_dr)
chk_dr <- chk_dr %>% dplyr::group_by(key) %>% dplyr::summarize(MAB_dr=sum(MAB_dr,na.rm=T),
                                                               txns_dr=sum(txns_dr,na.rm=T),
                                                               MAB_txns_dr=sum(MAB_txns_dr,na.rm=T),
                                                               cx_dr = sum(cx_dr,na.rm=T))
chk_dr2 <- chk_dr %>% filter(MAB_txns_dr < 0.8); nrow(chk_dr2) # should be 0, where driver was 0, we used cx driver as backup


chk_dr <- use_raw3 %>% dplyr::group_by(key) %>% dplyr::summarize(MAB_dr=sum(MAB_dr,na.rm=T),
                                                                 txns_dr=sum(txns_dr,na.rm=T),
                                                                 MAB_txns_dr=sum(MAB_txns_dr,na.rm=T),
                                                                 cx_dr = sum(cx_dr,na.rm=T))

table(chk_dr$MAB_txns_dr) # all should have driver value 1

# BBB
costs <- ppl_cost_Sep
sum(costs)-sum(costs$cif_branch_code)
names(costs)

cx_branch_pvt <- masterfile %>% dplyr::group_by(cif_branch_code) %>% 
  dplyr::summarize(count_cx = sum(cxcodeflag,na.rm=T))

cx_branch_small <- cx_branch_pvt %>% filter(count_cx < 10) # filtering out branches with < 10 cx
max(cx_branch_small$count_cx)

cost_branch_small <- costs %>% filter(cif_branch_code %in% cx_branch_small$cif_branch_code)
cost_share <- sum(cost_branch_small,na.rm=T)- sum(cost_branch_small$cif_branch_code,na.rm=T)

# branches with >= 10 cx
costs1 <- costs %>% filter(!cif_branch_code %in% cx_branch_small$cif_branch_code)
cost_share_perBranch <- cost_share/nrow(costs1)

(sum(costs)-sum(costs$cif_branch_code)) - ((sum(costs1,na.rm=T)- sum(costs1$cif_branch_code,na.rm=T)) + sum(cost_branch_small)-sum(cost_branch_small$cif_branch_code))

costs12 <- costs1 %>% mutate(TotalBefore = rowSums(costs1[,c("Aspire","Signature","Insignia",
                                                             "Mass","Abacus","Salary","Diplomat",
                                                             "NR","Tasc"),],na.rm = T),
                             cost_share_perBranch = cost_share_perBranch,
                             TotalAfter = TotalBefore + cost_share_perBranch,
                             scaling_ratio = TotalAfter/TotalBefore)

cost_scale_fn <- function(inVal) {outVal = inVal * costs12$scaling_ratio}

costs13 <- costs12 %>% select(-c(TotalAfter,TotalBefore,cost_share_perBranch))
costs13[,2:(ncol(costs13)-1)] <- lapply(costs13[,2:(ncol(costs13)-1)], cost_scale_fn)

costs13 <- costs13 %>% mutate(AfterScaling = rowSums(costs13[,c("Aspire","Signature","Insignia",
                                                                "Mass","Abacus","Salary","Diplomat",
                                                                "NR","Tasc"),],na.rm = T))


sum(costs13$AfterScaling,na.rm=T)- sum(costs12$TotalAfter) # might get a multiple of cost_per_branch
sum(cost_branch_small)-sum(cost_branch_small$cif_branch_code)

costs14 <- costs13 %>% select(-c(AfterScaling,scaling_ratio))

costs2 <- melt(costs14, id.vars = "cif_branch_code", variable.name = "segment")
setnames(costs2,old="value",new="total_cost")

costs2$key <- paste0(costs2$segment,costs2$cif_branch_code)
costs2$cif_branch_code<- NULL;costs2$segment<- NULL

sum(costs2$total_cost,na.rm=T)
sum(costs2$total_cost,na.rm=T) - (sum(costs,na.rm = T)- sum(costs$cif_branch_code)) # might get a multiple of cost_per_branch
# ideally = 0

# Joining to add the costs to our use table
use<- use_raw3
use<- left_join(use,costs2,by="key")

colSums(is.na(use))
#table(colSums(is.na(use)))
use[is.na(use)]<- 0

use$allocated_cost <- use$MAB_txns_dr * use$total_cost

sum(use$allocated_cost,na.rm=T)
sum(ppl_cost_Sep,na.rm = T)- sum(ppl_cost_Sep$cif_branch_code,na.rm=T)

(sum(ppl_cost_Sep,na.rm = T)- sum(ppl_cost_Sep$cif_branch_code,na.rm=T))-(sum(use$allocated_cost,na.rm=T)) #~0

## PNL Scaling====
cr <- 10000000

### Scale to the value as per PnL
pnl <- 27.602276617976 * cr

fin <- use

sum(fin$allocated_cost) # BEFORE
fin$allocated_cost<- ifelse(fin$allocated_cost != 0, fin$allocated_cost*(pnl/sum(fin$allocated_cost)) ,fin$allocated_cost) 
sum(fin$allocated_cost) #After

fin2 <- fin %>% select(customer_code,allocated_cost)
setnames(fin2,old="allocated_cost",new="Salary_cost")


# dividing this into ppl central and ppl non central
#We will need the below sets
# 1. People cost : all levels (to be used as driver for HR in Central Allocated)
# 2. People cost barring Central costs: For driver in Opex
# 3. Central ppl cost: Since Grishma's file has overall central cost as sum of :
# a. central allocated    b.central non allocated     c. central ppl cost


# people cost- central ppl cost, for opex ===
ppl_cost_non_central<- do.call(rbind,list(pplbranch_sep,clusterFinSep,zoneFinSep,
                                          multi_branch,central990all)) # multi_zone_all
ppl_cost_non_central <- aggregate(ppl_cost_non_central[,2:10], by = list(ppl_cost_non_central[,1]), FUN=sum, na.rm=T)
colnames(ppl_cost_non_central)[1] = "cif_branch_code"
sum(ppl_cost_non_central,na.rm=T)- sum(ppl_cost_non_central$cif_branch_code)

cost_noncentral <- sum(ppl_cost_non_central,na.rm=T)- sum(ppl_cost_non_central$cif_branch_code)

# to check
sum(ppl_cost_Sep,na.rm=T)- sum(ppl_cost_Sep$cif_branch_code) - (sum(Central_allSep,na.rm=T)- sum(Central_allSep$cif_branch_code)) 


# Central people cost
ppl_cost_central <- Central_allSep
ppl_cost_central <- aggregate(ppl_cost_central[,2:10], by = list(ppl_cost_central[,1]), FUN=sum, na.rm=T)
colnames(ppl_cost_central)[1] = "cif_branch_code"
sum(ppl_cost_central,na.rm=T)- sum(ppl_cost_central$cif_branch_code)

cost_central <- sum(ppl_cost_central,na.rm=T)- sum(ppl_cost_central$cif_branch_code)
#write.csv(ppl_cost_central,"Mar20_ppl_cost_Central_cost_only_part1.csv",row.names = F)

cost_ppl_total <- sum(ppl_cost_Sep,na.rm = T)- sum(ppl_cost_Sep$cif_branch_code,na.rm=T)

ratio_central <- cost_central/cost_ppl_total
ratio_noncentral <- cost_noncentral/cost_ppl_total

fin2$Salary_cost_central <- (fin2$Salary_cost)*ratio_central
fin2$Salary_cost_noncentral <- (fin2$Salary_cost)*ratio_noncentral

chk <- fin2$Salary_cost - (fin2$Salary_cost_central + fin2$Salary_cost_noncentral)
max(abs(chk))

sum(fin2$Salary_cost_central) + sum(fin2$Salary_cost_noncentral)
sum(fin2$Salary_cost)



setwd("E:\\shubhi ahuja\\d\\Shubhi\\15 Unit Economics\\6_Dec20\\outputs\\2cost")#
#write.csv(fin2,"Salary_cost_cx.csv",row.names=F)

###### HR====
library(readxl)
library(dplyr)
library(data.table)
library(lubridate)
options(scipen = 999)

# E:\shubhi ahuja\d\Shubhi\4 HR project\HR Attrition\v3\Model
# File: Attrition model Data Requirements

list.files("E:\\shubhi ahuja\\d\\Shubhi\\4 HR project\\HR Attrition\\Predictions\\input")

# Team tag: To be created dynamically with each set
setwd("E:\\shubhi ahuja\\d\\Shubhi\\4 HR project\\HR Attrition\\Predictions\\input\\Data - Dec")

masterfile_raw<- read_excel("Attrition - Dec.xlsx")
masterfile_raw$`Emp Id` <- as.character(masterfile_raw$`Emp Id`); masterfile_raw$`Mgr Id` <- as.character(masterfile_raw$`Mgr Id`)
names(masterfile_raw)
masterfile_raw <- masterfile_raw %>% filter (!DOR %like% 'Emp') # it read the records with emp id etc in date as NA
#setnames(masterfile_raw,old="Last Working Day",new="Last working date")
class(masterfile_raw$`Last working date`)

fixed_day<- strftime(today(), format="%Y-%m-15") # fixed date of every month
class(fixed_day); fixed_day<- as.POSIXct(fixed_day)

mancom_pvt <- masterfile_raw %>% filter(`ManCom Flag`==1)
mancom_pvt <- mancom_pvt %>% select (`Emp Id`) %>% mutate(Reviewer_Mancom_Flag = 1)
str(mancom_pvt)
setnames(mancom_pvt,old="Emp Id",new="Mancom_EmpId")

# Filter to get relevant subset*********************
# Live employees + Exits in duration :   to 
masterfile1 <- masterfile_raw %>% mutate(time_LWD = round((`Last working date`- fixed_day)/24))
table(masterfile1$`Employee Type`)
head(masterfile1$time_LWD)
chk <- masterfile1 %>% select(`Emp Id`,`Last working date`,time_LWD)
#masterfile1 <- masterfile1 %>% filter (`Employee Type`== "CTC")
# masterfile1 <- masterfile1 %>% filter (is.na(`Last working date`) | 
#                                          ((time_LWD>0 & time_LWD<= 365)))
max(masterfile1$`Last working date`,na.rm=T)
min(masterfile1$`Last working date`,na.rm=T)

# Team size, only live employees? ***********
# Team id to be mapped for everyone, while finding other details, like team size, we can filter on only live emp
masterfile_live <- masterfile_raw %>% filter (is.na(`Last working date`))

# Making team ID, no of reportees discarded, will be correctly derived later
#boss_pvt <- masterfile_live %>% group_by(`Mgr Id`) %>% summarize(No_of_reportees_Manager = n())
boss_pvt <- masterfile_raw %>% dplyr::group_by(`Mgr Id`) %>% dplyr::summarize(No_of_reportees_Manager = n())
# create a random series B1:Bxyz to make teams basis boss
#boss_pvt$TeamId_Boss <- NA # gave error in Nov and onwards
boss_pvt$TeamId_Boss <- "NA"
boss_pvt<- boss_pvt %>% filter (!is.na(`Mgr Id`))

count= 1

for ( i in 1:nrow(boss_pvt)) {
  boss_pvt[i,"TeamId_Boss"] <- paste0("B",count)  
  count = count+1
}

emp_managerTbl <- masterfile_raw %>% select(`Emp Id`,`Mgr Id`)

boss_pvt2 <- left_join(boss_pvt,emp_managerTbl,by=c("Mgr Id"="Emp Id"))
setnames(boss_pvt2,old="Mgr Id.y",new="Boss_of_Managers")
boss_pvt2 <- left_join(boss_pvt2,mancom_pvt,by=c("Boss_of_Managers"="Mancom_EmpId"))
setnames(boss_pvt2,old="Reviewer_Mancom_Flag",new="Boss_of_Manager_Mancom")

#boss_pvt2[is.na(boss_pvt2)] <- 0  # gave error in Nov

# Number of reportees under managers 
reviewer_pvt <- masterfile_raw %>% dplyr::group_by(`Reviewer Id`) %>% dplyr::summarize(No_of_reportees_Reviewer = n())
# create a random series R1:Rxyz to make teams basis Reviewer

reviewer_pvt<- reviewer_pvt %>% filter (!is.na(`Reviewer Id`))

count= 1

for ( i in 1:nrow(reviewer_pvt)) {
  reviewer_pvt[i,"TeamId_Reviewer"] <- paste0("R",count)  
  count = count+1
}

reviewer_pvt$No_of_reportees_Reviewer <- NULL # this has all history, only needed with live emp

boss_pvt3 <- left_join(boss_pvt2,reviewer_pvt,by=c("Mgr Id"= "Reviewer Id"))
#boss_pvt3$No_of_reportees_Reviewer<- NULL
class(boss_pvt3$Boss_of_Manager_Mancom); table(boss_pvt3$Boss_of_Manager_Mancom)
boss_pvt3$Boss_of_Manager_Mancom <- ifelse(is.na(boss_pvt3$Boss_of_Manager_Mancom),0,boss_pvt3$Boss_of_Manager_Mancom)
#boss_pvt3 <- boss_pvt3 %>% mutate(TeamId = ifelse(Boss_of_Manager_Mancom == 1, TeamId_Reviewer,TeamId_Boss))
boss_pvt3 <- boss_pvt3 %>% mutate(TeamId = ifelse(Boss_of_Manager_Mancom == 1 & !is.na(TeamId_Reviewer), TeamId_Reviewer,TeamId_Boss))
# If a manager's boss is Mancom, then all people under manager would be part of one team
# To keep Team id consistent, we use Reviewer Id as final team id
# To get Reviewer team ID equivalent of the Manager, 
# we find them in Reviewer table & map the corresponding Reviewer team id, provided reviwer team id exists

boss_pvt4 <- boss_pvt3 %>% select(`Mgr Id`,TeamId_Boss,TeamId)
colSums(is.na(boss_pvt4))

# masterfile2 =====
masterfile2 <- left_join(masterfile1,boss_pvt4,by="Mgr Id")
masterfile2 <- left_join(masterfile2,reviewer_pvt,by= "Reviewer Id")

# masterfile 3=====
# Team Mapping
masterfile3<- left_join(masterfile2,mancom_pvt,by=c("Reviewer Id"="Mancom_EmpId"))

masterfile3$Reviewer_Mancom_Flag <- ifelse(is.na(masterfile3$Reviewer_Mancom_Flag),0,masterfile3$Reviewer_Mancom_Flag)
masterfile3 <- masterfile3 %>% mutate(Final_TeamID = ifelse(Reviewer_Mancom_Flag== 1, TeamId,TeamId_Reviewer))

# masterfile 4 =====
masterfile4 <- masterfile3 %>% select(-c(TeamId_Boss,TeamId,TeamId_Reviewer)) # removing these vars

emp_teamIdTbl <- masterfile4 %>% select(`Emp Id`,Final_TeamID) # subsetting these vars

class(masterfile4$`Last working date`)
# Team ID to be mapped to exited employees too, so that we can find attrition in team
date6m <- fixed_day %m-% months(6)
date12m <- fixed_day %m-% months(12)

masterfile4 <- masterfile4  %>% mutate(Attrition6mFlag = ifelse(`Last working date` >= date6m & `Last working date` <= fixed_day,1,0),
                                       Attrition12mFlag = ifelse(`Last working date` >= date12m & `Last working date` <= fixed_day,1,0))

backup_masterfile4 <- masterfile4

masterfile4 <- masterfile4 %>% filter(`Employee Type` == "CTC")

# Team size basis CTC live employees # Attrition also only for CTC
# How to filter for live employees :# Live + LWD in future *********

# Attrition in team count 6m ,12m =====
team_tbl <- masterfile4 %>% dplyr::group_by(Final_TeamID) %>% dplyr::filter(`Employee Type`== "CTC") %>%
  dplyr::summarize(Attrition6mCount = sum(Attrition6mFlag,na.rm = T),
                   Attrition12mCount = sum(Attrition12mFlag,na.rm = T))

# No of reportees under the employee=====
reportees <- masterfile4 %>% dplyr::filter(time_LWD>=0 | is.na(time_LWD)) %>%
  dplyr::group_by(`Mgr Id`) %>% dplyr::summarize(No_of_Reportees = n()) 

# No of male reportees under the employee=====
reportees_male <- masterfile4 %>% dplyr::filter((time_LWD>=0 | is.na(time_LWD))& Gender=="Male" ) %>%
  dplyr::group_by(`Mgr Id`) %>% dplyr::summarize(No_of_MaleReportees = n())

# Age of Reporting Manager====
manager_age <- masterfile_raw %>% select(`Emp Id`,Age,DOB) %>% mutate(Age_calc = (fixed_day-DOB)/365)# `Age of Emp`
setnames(manager_age,old="Age_calc",new="Age_Manager")
manager_age2 <- manager_age %>% select(`Emp Id`,Age_Manager)

# Modified Dept====
modified_dept <- masterfile4 %>% select(`Emp Id`,`Business Unit`)
lor<- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/dept.xlsx")
modified_dept2 <- left_join(modified_dept,lor,by=c("Business Unit"= "Department"))
colSums(is.na(modified_dept2))

modified_dept2$`Business Unit` <- NULL

# Grade====
grade_conv <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/Rating_Grade_Convention.xlsx",sheet="Grade_convention")
grade <- masterfile4 %>% select(`Emp Id`,Grade)

# Grade	              New Grade
# Graduate Trainee 1	Clerk
# Graduate Trainee 2	Clerk
# Trainee	            Clerk
# Executive Trainee	Deputy Manager
# Management Trainee	Manager

# Imputing Grade for trainees, as done while training set prep
grade2 <- grade %>% mutate(Final_Grade = ifelse(Grade=="Executive Trainee","Deputy Manager",
                                                ifelse(Grade =="Graduate Trainee 1" | Grade =="Graduate Trainee 2" |Grade =="Trainee" | Grade == "Officer (Trainee) - Sales","Clerk",
                                                       ifelse(Grade=="Management Trainee","Manager",Grade))))

grade2 <- left_join(grade2,grade_conv,by=c("Final_Grade"="Grade"))
colSums(is.na(grade2))

chkna<- grade2 %>% filter(is.na(Grade_point))
table(chkna$Grade) #Secretary

grade2$Grade <- NULL

# % people at same designation *********
team_designation <- masterfile4 %>% filter(time_LWD>=0 | is.na(time_LWD)) %>% 
  group_by(Final_TeamID,Grade) %>% dplyr::summarize(Ppl_sameDesignation_team = n() - 1) ## -1 done******
# ppl at same designation will exclude the employee themselves, hence -1

teamSize_base <- masterfile4 %>% filter(time_LWD>=0 | is.na(time_LWD)) # chk if df is correct
table(teamSize_base$`Employee Status`)
# 11 employees were tagged inactive though there's no LWD/DOR next to them

# Team size====
teamSize <- masterfile4 %>% filter(time_LWD>=0 | is.na(time_LWD)) %>% group_by(Final_TeamID) %>%  
  dplyr::summarize(Team_Size = n() )

# Will need pivot with live employees for findingno of reportees
# masterfile_live
masterfile_live2 <- left_join(masterfile_live,emp_teamIdTbl,by="Emp Id")

mis_teamID <- masterfile4 %>% filter (is.na(Final_TeamID))
table(mis_teamID$`Employee Status`)
colSums(is.na(mis_teamID))
# 100 out of 120 don't have manager id; 119 don't have reviewer id. Only one emp has reviewer id, doesn't have mgr id
# Since there is no reviewer mapped, we can't map their teams basis reviewer
# for one case where we have reviewer, bcoz of mancom flag, team had to be mapped to the Manager
# why no team id for : 9525857313 : no team id for emp whose manager is : 0458372456


# Necessary Filters on Masterfile====
# Predicting for employees who have not already resigned
# masterfile5====
masterfile5 <- masterfile4 %>% filter (`Employee Type` == "CTC" &
                                         (is.na(`Last working date`)| DOR > date12m))
# to keep consistency with trained model, for imputations, in terms of timelines
table(masterfile5$`Employee Status`) #  Inactive as well

masterfile5 <- left_join(masterfile5,team_tbl,by="Final_TeamID")
masterfile5 <- left_join(masterfile5,teamSize,by="Final_TeamID")
masterfile5 <- left_join(masterfile5,manager_age2,by=c("Mgr Id"="Emp Id"))
masterfile5 <- left_join(masterfile5,team_designation,by=c("Final_TeamID","Grade"))
masterfile5 <- left_join(masterfile5,modified_dept2,by="Emp Id")
masterfile5 <- left_join(masterfile5,grade2,by="Emp Id")

masterfile5 <- masterfile5 %>% mutate(Attrition6mPer = Attrition6mCount/Team_Size,
                                      Attrition12mPer = Attrition12mCount/Team_Size)

masterfile5 <- masterfile5 %>% mutate(Ppl_sameDesignation_team_per = Ppl_sameDesignation_team/Team_Size)

masterfile5<- left_join(masterfile5,reportees,by=c("Emp Id"="Mgr Id"))
masterfile5<- left_join(masterfile5,reportees_male,by=c("Emp Id"="Mgr Id"))

# for cases with Team id as NA, we get wrong values

# Mapping data from files
# Latest Ratings====
rating_lat <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/Ratings 2020.xlsx")
str(rating_lat)
rating_lat$`Emp. Code` <- as.character(rating_lat$`Emp. Code`)
# Map rating value
rating_conv <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/Rating_Grade_Convention.xlsx",sheet="Rating_convention")
rating_lat$`Rating 2020` <- tolower(rating_lat$`Rating 2020`)
rating_conv$Rating <- tolower(rating_conv$Rating)

rating_lat2 <- left_join(rating_lat,rating_conv,by=c("Rating 2020"="Rating"))
colSums(is.na(rating_lat2)) # rating point should not have nulls
setnames(rating_lat2,old="Rating_point",new="RatingPt2020")

# masterfile6=====
masterfile6<- left_join(masterfile5,rating_lat2,by=c("Emp Id"="Emp. Code"))

chk_mis_rating <- left_join(masterfile_live,rating_lat2,by=c("Emp Id"="Emp. Code"))
chk_mis_rating2 <- chk_mis_rating %>% filter (is.na(RatingPt2020))
chk_mis_rating3 <- chk_mis_rating2 %>% filter (is.na(DOR))
table(chk_mis_rating3$`Business Unit`);table(chk_mis_rating3$Grade)

setwd("E:\\shubhi ahuja\\d\\Shubhi\\4 HR project\\HR Attrition\\Predictions\\CommonInputs")

# Promotion data====
promotion_raw<- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/input/Data - Dec/Dhanesh/PromotionData.xlsx")
setnames(promotion_raw,old="Masked E code",new="Emp Id")
promotion_raw$`Emp Id` <- as.character(promotion_raw$`Emp Id`)
promotion<- promotion_raw
str(promotion)
#promotion$Ranking <- NULL
promotion<- promotion[rev(order(promotion$`Promotion date`)),] # sorting in desc order, latest promotion first
promotion<- promotion[!duplicated(promotion$`Emp Id`),]# removing duplicates
promotion$Time_in_current_grade <- (fixed_day- promotion$`Promotion date`)/365

promotion_count <- promotion_raw %>% group_by(`Emp Id`) %>% dplyr::summarize(count_of_promotions = n())

# % CTC mean====
ctc<- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/input/Data - Dec/Dhanesh/hike_CTCmean_rating.xlsx",sheet="CTC_mean")
setnames(ctc,old="Encoded Emp. Code",new="Emp Id"); setnames(ctc,old="% difference\r\n(CTC - Mean)",new="CTC_mean_per_diff")

ctc$`Emp Id`<- as.character(ctc$`Emp Id`)
#ctc2<- ctc %>% select(`Emp Id`,CTC_mean_per_diff)
ctc2 <- ctc[!duplicated(ctc$`Emp Id`),]; table(ctc2$tag)

ctc2 <- ctc2[!is.na(ctc2$CTC_mean_per_diff),]; table(ctc2$tag)
ctc2<- ctc2 %>% select(`Emp Id`,CTC_mean_per_diff)


# Salary Hike 2019====
sal19 <- read_excel("Copy of Comp Data_30 - 9 -2019.xlsx")
setnames(sal19,old="Encoded Emp. Code",new="Emp Id"); sal19$`Emp Id`<- as.character(sal19$`Emp Id`)
setnames(sal19,old="% Hike 2018-19",new="SalaryHike_2019"); setnames(sal19,old="Rating 2018-19",new="Rating2019")
salaryhike2019 <- sal19 %>% select(`Emp Id`,SalaryHike_2019)

# Rating 2019====
rating2019 <- sal19 %>% select(`Emp Id`,Rating2019)

rating2019$Rating2019 <- tolower(rating2019$Rating2019)

rating2019 <- left_join(rating2019,rating_conv,by=c("Rating2019"="Rating"))
colSums(is.na(rating2019)) # rating point should not have nulls
setnames(rating2019,old="Rating_point",new="RatingPt2019")

# 2020/2018 comp data====
# taken an excerpt from password protected file # wherever we have 2020 data, that's taken, otherwise 2018
# details currently are only till AVP/DVP, hence, we compile the two sources
comp2018 <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/input/Data - Dec/Dhanesh/hike_CTCmean_rating.xlsx",sheet="hike_use")
names(comp2018);table(comp2018$Tag)
setnames(comp2018,old="Encoded Emp. Code",new="Emp Id")

latest_salaryhike <- comp2018 %>% filter(Tag == "new_oct20"); latest_salaryhike$Tag <- NULL
setnames(latest_salaryhike,old="% Hike Oct 2020",new="SalaryHike_2020")

setnames(comp2018,old="% Hike Oct 2020",new="SalaryHike_2018")
comp2018$`Emp Id` <- as.character(comp2018$`Emp Id`)

# Salary Hike 2018====
salaryhike2018 <- comp2018 #%>% select(`Emp Id`,SalaryHike_2018)
salaryhike2018 <- salaryhike2018[!duplicated(salaryhike2018$`Emp Id`),]
table(salaryhike2018$Tag)


# keeping latest entry, if we have data for 2020 & 2018, for senior folks, retaining 2018 data for avg

# Trainings====
#Trainings in the year (Rolling Year) 
# 2020

setwd("E:\\shubhi ahuja\\d\\Shubhi\\4 HR project\\HR Attrition\\Predictions\\input\\Data - Dec")
trainings_ytd <- read_excel("Training Data.xlsx") # this will be updated, the WD, to get updated data

chk <- trainings_ytd %>% filter (STATUS == "Present" | `ACTUAL STATUS`=="Present") # chk if there are typos in Present
table(chk$`Program Methodology`) # we'd want virtual classroom
chk2 <- chk %>% distinct(`PROGRAM NAME`) # Virtual Classroom
chk11 <- trainings_ytd %>% filter (STATUS == "NA" | `ACTUAL STATUS`=="NA")
table(chk11$`Program Methodology`) # should be only e-learning programs ideally
chk12<- chk11 %>% distinct(`PROGRAM NAME`)

table(trainings_ytd$STATUS);table(trainings_ytd$`ACTUAL STATUS`)

trainings_ytd2 <- trainings_ytd %>% filter (STATUS == "Present" | `ACTUAL STATUS`=="Present")
table(trainings_ytd2$`Program Methodology`) # we'd want virtual classroom
trainings_ytd2 <- trainings_ytd2 %>% filter (`Program Methodology`=="Virtual Classroom")
setnames(trainings_ytd2,old="PROGRAM NAME",new="Program Name")

# Jan-Mar20 data
trainings_ytd_file2 <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/Sep20/Training Data - FY1920.xlsx",sheet="ILT")
str(trainings_ytd_file2)

trainings_ytd_file22 <- trainings_ytd_file2 %>% filter (`START DATE` >= dmy('01-01-2020'))
setnames(trainings_ytd_file22,old="PROGRAM NAME",new="Program Name")
table(trainings_ytd_file22$STATUS);table(trainings_ytd_file22$`ACTUAL STATUS`)
trainings_ytd_file22 <- trainings_ytd_file22 %>% filter (STATUS == "Present" | `ACTUAL STATUS` %like% "Pr")
table(trainings_ytd_file22$STATUS);table(trainings_ytd_file22$`ACTUAL STATUS`) # Present Presnet*****************
trainings_ytd_file22 <- trainings_ytd_file22 %>% select(`Emp Id`,`Program Name`) 

trainings_ytd2 <- trainings_ytd2 %>% select(`Emp Id`,`Program Name`)
# 2019
# trainings_lastyr <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/ClassroomTraining2019.xlsx")
# setnames(trainings_lastyr,old="Emp No",new="Emp Id"); trainings_lastyr$`Emp Id`<- as.character(trainings_lastyr$`Emp Id`)
# str(trainings_lastyr)
# trainings_lastyr2 <- trainings_lastyr %>% filter(`Start Date`>= date12m) # all trainings that happened after 2019 fixed date
# min(trainings_lastyr2$`Start Date`);max(trainings_lastyr2$`Start Date`)
# trainings_lastyr3 <- trainings_lastyr2 %>% select(`Emp Id`,`Program Name`) 
# trainings_ytd3 <- trainings_ytd2 %>% select(`Emp Id`,`Program Name`) 

# compile : Trainings *************
trainings_use<- rbind(trainings_ytd2,trainings_ytd_file22)# trainings_ytd3
trainings_use2 <- trainings_use %>% group_by(`Emp Id`) %>% dplyr::summarize(Trainings_yr = n())

# prev exp====
prev_exp <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/Prev exp.xlsx")
str(prev_exp)
prev_exp2 <- prev_exp %>% filter(!`Years of Experience` %like% "A")
prev_exp2$`Years of Experience` <- as.numeric(prev_exp2$`Years of Experience`)
setnames(prev_exp2,old="Years of Experience",new="Prev_exp_yr") # in years

#masterfile7====
#  Appending variables
masterfile7 <- left_join(masterfile6,promotion_count,by="Emp Id")
masterfile7$count_of_promotions <- ifelse(is.na(masterfile7$count_of_promotions),0,masterfile7$count_of_promotions)
masterfile7<- masterfile7 %>% mutate(promotions_denr = count_of_promotions+1)
masterfile7 <- masterfile7 %>% mutate(Experience_calc = (fixed_day-DOJ)/365) # will filter only for live employees, hence this can be done

masterfile7 <- left_join(masterfile7,prev_exp2,by="Emp Id") # prev exp
masterfile7$Prev_exp_yr <- ifelse(is.na(masterfile7$Prev_exp_yr),0,masterfile7$Prev_exp_yr)

# Total_Experience====
masterfile7<- masterfile7 %>% mutate(Total_Experience = Experience_calc + Prev_exp_yr)

# Avg time in grade====
masterfile7<- masterfile7 %>% mutate(Avg_time_in_each_grade = Experience_calc/promotions_denr)
masterfile7<- left_join(masterfile7,promotion,by="Emp Id")

chkna <- masterfile7 %>% filter (is.na(Time_in_current_grade)); nrow(chkna)
table(chkna$count_of_promotions) # no promotion data

# 482014221
# if no promotion history, time they spent in system is their time in grade *************
masterfile7$Time_in_current_grade <- ifelse(is.na(masterfile7$Time_in_current_grade),masterfile7$Experience_calc,masterfile7$Time_in_current_grade)

masterfile7<- left_join(masterfile7,ctc2,by="Emp Id") # mapping CTC % diff
masterfile7<- left_join(masterfile7,salaryhike2019,by="Emp Id") # mapping salary hike 2019

latest_salaryhike$`Emp Id` <- as.character(latest_salaryhike$`Emp Id`)
salaryhike2018$Tag <- NULL

masterfile7 <- left_join(masterfile7,latest_salaryhike,by="Emp Id")
masterfile7<- left_join(masterfile7,salaryhike2018,by="Emp Id") # mapping salary hike 2018

masterfile7$latest_salary_hike <- ifelse(is.na(masterfile7$SalaryHike_2020),masterfile7$SalaryHike_2019,masterfile7$SalaryHike_2020)
colSums(is.na(masterfile7))

masterfile7$latest_salary_hike <- ifelse(is.na(masterfile7$latest_salary_hike),masterfile7$SalaryHike_2018,masterfile7$latest_salary_hike)
# if 2020 hike is missing, we use 2019, and if even then there's missing, we use 2018
# if still missing we impute later

masterfile7$avg_sal_hike = rowMeans(masterfile7[c("SalaryHike_2019","SalaryHike_2018")],na.rm=T)
# Impute for NaN

masterfile7<- left_join(masterfile7,trainings_use2,by="Emp Id")
masterfile7<- left_join(masterfile7,rating2019,by="Emp Id")
# latest rating: 2020, if 2020 not available, 2019's Rating******************
masterfile7 <- masterfile7 %>% mutate(Latest_Rating = ifelse(is.na(RatingPt2020),RatingPt2019,RatingPt2020))

chk_rating<- masterfile7 %>% select(`Emp Id`,Latest_Rating,RatingPt2020,RatingPt2019,`Rating 2020`,Rating2019)
chk_rating_na <- masterfile7 %>% filter (is.na(Latest_Rating)) 
table(chk_rating_na$`Modified dept`)

# Attendance====
# Attendance data: to get leaves taken        #Leaves taken : AL	CL	SL	FL	LWP	PL	ML
# Leaves after appraisal July- MTD + previous year's July-Dec leaves

# 2019 leaves
leaves2019 <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/Leaves_afterApp2019.xlsx")
leaves2019$`Emp Id`<- as.character(leaves2019$`Emp Id`)
str(leaves2019)
masterfile7<- left_join(masterfile7,leaves2019,by="Emp Id")

# 2020 leaves
# July 20
getwd()
leaves2020 <- read_excel("AttendanceJuly20onwards.xlsx",sheet="July 20")

leaves2020$AL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "AL")
leaves2020$CL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "CL")
leaves2020$SL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "SL")
leaves2020$FL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "FL")
leaves2020$LWP <- rowSums(leaves2020[,2:ncol(leaves2020)] == "LWP")
leaves2020$PL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "PL")
leaves2020$ML <- rowSums(leaves2020[,2:ncol(leaves2020)] == "ML")
leaves2020[is.na(leaves2020)] <- 0
leaves2020 <- leaves2020 %>% mutate (Leaves = AL+CL+SL+FL+LWP+PL+ML)

leaves2020_v1 <- leaves2020 %>% select(`Emp Id`,Leaves)
leaves2020_v2 <- left_join(masterfile7,leaves2020_v1,by="Emp Id")
leaves2020_v2 <- leaves2020_v2 %>% select(`Emp Id`,Leaves)

# Aug 20
leaves2020 <- read_excel("AttendanceJuly20onwards.xlsx",sheet="Aug 20")

leaves2020$AL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "AL")
leaves2020$CL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "CL")
leaves2020$SL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "SL")
leaves2020$FL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "FL")
leaves2020$LWP <- rowSums(leaves2020[,2:ncol(leaves2020)] == "LWP")
leaves2020$PL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "PL")
leaves2020$ML <- rowSums(leaves2020[,2:ncol(leaves2020)] == "ML")
leaves2020[is.na(leaves2020)] <- 0
leaves2020 <- leaves2020 %>% mutate (Leaves = AL+CL+SL+FL+LWP+PL+ML)

leaves2020_v1 <- leaves2020 %>% select(`Emp Id`,Leaves)
leaves2020_v2 <- left_join(leaves2020_v2,leaves2020_v1,by="Emp Id")


# Sept 20
leaves2020 <- read_excel("AttendanceJuly20onwards.xlsx",sheet="Sept 20")

leaves2020$AL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "AL")
leaves2020$CL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "CL")
leaves2020$SL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "SL")
leaves2020$FL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "FL")
leaves2020$LWP <- rowSums(leaves2020[,2:ncol(leaves2020)] == "LWP")
leaves2020$PL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "PL")
leaves2020$ML <- rowSums(leaves2020[,2:ncol(leaves2020)] == "ML")
leaves2020[is.na(leaves2020)] <- 0
leaves2020 <- leaves2020 %>% mutate (Leaves = AL+CL+SL+FL+LWP+PL+ML)

leaves2020_v1 <- leaves2020 %>% select(`Emp Id`,Leaves)
leaves2020_v2 <- left_join(leaves2020_v2,leaves2020_v1,by="Emp Id")


## Oct 20
leaves2020 <- read_excel("AttendanceJuly20onwards.xlsx",sheet="Oct 20")

leaves2020$AL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "AL")
leaves2020$CL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "CL")
leaves2020$SL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "SL")
leaves2020$FL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "FL")
leaves2020$LWP <- rowSums(leaves2020[,2:ncol(leaves2020)] == "LWP")
leaves2020$PL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "PL")
leaves2020$ML <- rowSums(leaves2020[,2:ncol(leaves2020)] == "ML")
leaves2020[is.na(leaves2020)] <- 0
leaves2020 <- leaves2020 %>% mutate (Leaves = AL+CL+SL+FL+LWP+PL+ML)

leaves2020_v1 <- leaves2020 %>% select(`Emp Id`,Leaves)
leaves2020_v2 <- left_join(leaves2020_v2,leaves2020_v1,by="Emp Id")

# Nov 20
leaves2020 <- read_excel("AttendanceJuly20onwards.xlsx",sheet="Nov20")

leaves2020$AL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "AL")
leaves2020$CL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "CL")
leaves2020$SL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "SL")
leaves2020$FL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "FL")
leaves2020$LWP <- rowSums(leaves2020[,2:ncol(leaves2020)] == "LWP")
leaves2020$PL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "PL")
leaves2020$ML <- rowSums(leaves2020[,2:ncol(leaves2020)] == "ML")
leaves2020[is.na(leaves2020)] <- 0
leaves2020 <- leaves2020 %>% mutate (Leaves = AL+CL+SL+FL+LWP+PL+ML)

leaves2020_v1 <- leaves2020 %>% select(`Emp Id`,Leaves)
leaves2020_v2 <- left_join(leaves2020_v2,leaves2020_v1,by="Emp Id")

# Dec 20
leaves2020 <- read_excel("AttendanceJuly20onwards.xlsx",sheet="Dec20")

leaves2020$AL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "AL")
leaves2020$CL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "CL")
leaves2020$SL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "SL")
leaves2020$FL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "FL")
leaves2020$LWP <- rowSums(leaves2020[,2:ncol(leaves2020)] == "LWP")
leaves2020$PL <- rowSums(leaves2020[,2:ncol(leaves2020)] == "PL")
leaves2020$ML <- rowSums(leaves2020[,2:ncol(leaves2020)] == "ML")
leaves2020[is.na(leaves2020)] <- 0
leaves2020 <- leaves2020 %>% mutate (Leaves = AL+CL+SL+FL+LWP+PL+ML)

leaves2020_v1 <- leaves2020 %>% select(`Emp Id`,Leaves)
leaves2020_v2 <- left_join(leaves2020_v2,leaves2020_v1,by="Emp Id")

# Compiling for year: July onwards
leaves2020_fin <- leaves2020_v2
leaves2020_fin$LeavesAfterApp2020 <- rowSums(leaves2020_fin[,2:ncol(leaves2020_fin)],na.rm=T)

masterfile7<- left_join(masterfile7,leaves2020_fin,by="Emp Id")

masterfile7$Avg_lv_Af_App = rowMeans(masterfile7[c("LeavesAfterApp2019","LeavesAfterApp2020")],na.rm=T)
chk_leaves <- masterfile7 %>% select(`Emp Id`,LeavesAfterApp2019,LeavesAfterApp2020,Avg_lv_Af_App)


sel_var <- masterfile7 %>% select(`Emp Id`,`Modified dept`,Department,Final_TeamID,Avg_lv_Af_App,Grade_point,
                                  Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Ppl_sameDesignation_team_per,
                                  Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Experience_calc,
                                  CTC_mean_per_diff,Age_Manager,No_of_Reportees,No_of_MaleReportees,Avg_time_in_each_grade,
                                  Final_Grade,latest_salary_hike,avg_sal_hike)

colSums(is.na(sel_var))
# Avg sal hike: NaN : Impute    # Latest Rating: Impute
# CTC_mean : Impute             # Latest Salary Hike: Impute
# Team Id: ??? # Leaves? Map

# Age Manager: only 1 na, expected, no action reqd # No of reportees: will be NA for ICs, no action reqd
# No of male reportees: NA for ICs/ only female reportees, no action reqd # Trainings_yr : NA -> 0, no action reqd

### Imputations: Avg of people at same designation in team
# Latest Rating
impute <- masterfile7 %>% group_by(Final_TeamID,Final_Grade) %>% 
  dplyr::summarize(imputeAvgSalHike = mean(avg_sal_hike,na.rm=T),
                   imputeRating = mean(Latest_Rating,na.rm=T),
                   imputeCTCmean = mean(CTC_mean_per_diff,na.rm=T),
                   imputeLatestSalaryHike = mean(latest_salary_hike,na.rm=T))

# masterfile 8====
masterfile8 <- left_join(masterfile7,impute,by=c("Final_TeamID","Final_Grade"))

# Imputing with avg values
masterfile8 <- masterfile8 %>% mutate(avg_sal_hike= ifelse(is.na(avg_sal_hike)| avg_sal_hike == "NaN",imputeAvgSalHike,avg_sal_hike),
                                      Latest_Rating= ifelse(is.na(Latest_Rating)| Latest_Rating == "NaN",imputeRating,Latest_Rating),
                                      CTC_mean_per_diff= ifelse(is.na(CTC_mean_per_diff)| CTC_mean_per_diff == "NaN",imputeCTCmean,CTC_mean_per_diff),
                                      latest_salary_hike= ifelse(is.na(latest_salary_hike)| latest_salary_hike == "NaN",imputeLatestSalaryHike,latest_salary_hike))

sel_var2 <- masterfile8 %>% select(`Emp Id`,`Modified dept`,Department,Final_TeamID,Avg_lv_Af_App,Grade_point,
                                   Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Ppl_sameDesignation_team_per,
                                   Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Experience_calc,
                                   CTC_mean_per_diff,Age_Manager,No_of_Reportees,No_of_MaleReportees,Avg_time_in_each_grade,
                                   Final_Grade,latest_salary_hike,avg_sal_hike)
colSums(is.na(sel_var2))

# Impute 2: Basis mgr id, 
impute2 <- masterfile8 %>%  mutate(imputeAvgSalHike2 = avg_sal_hike,
                                   imputeRating2 = Latest_Rating,
                                   imputeCTCmean2 = CTC_mean_per_diff,
                                   imputeLatestSalaryHike2 = latest_salary_hike) %>% 
  select(`Emp Id`,imputeAvgSalHike2,imputeRating2,imputeCTCmean2,imputeLatestSalaryHike2)

# masterfile9====
masterfile9 <- left_join(masterfile8,impute2,by=c("Mgr Id"="Emp Id"))

# Imputing with Mgr values
masterfile9 <- masterfile9 %>% mutate(avg_sal_hike= ifelse(is.na(avg_sal_hike)| avg_sal_hike == "NaN",imputeAvgSalHike2,avg_sal_hike),
                                      Latest_Rating= ifelse(is.na(Latest_Rating)| Latest_Rating == "NaN",imputeRating2,Latest_Rating),
                                      CTC_mean_per_diff= ifelse(is.na(CTC_mean_per_diff)| CTC_mean_per_diff == "NaN",imputeCTCmean2,CTC_mean_per_diff),
                                      latest_salary_hike= ifelse(is.na(latest_salary_hike)| latest_salary_hike == "NaN",imputeLatestSalaryHike2,latest_salary_hike))

sel_var3 <- masterfile9 %>% select(`Emp Id`,`Modified dept`,Department,Final_TeamID,Avg_lv_Af_App,Grade_point,
                                   Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Ppl_sameDesignation_team_per,
                                   Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Experience_calc,
                                   CTC_mean_per_diff,Age_Manager,No_of_Reportees,No_of_MaleReportees,Avg_time_in_each_grade,
                                   Final_Grade,latest_salary_hike,avg_sal_hike)
colSums(is.na(sel_var3))

# Impute 3 : Dept, Final Grade
impute3 <- masterfile9 %>% group_by(Department,Final_Grade) %>% 
  dplyr::summarize(imputeAvgSalHike3 = mean(avg_sal_hike,na.rm=T),
                   imputeRating3 = mean(Latest_Rating,na.rm=T),
                   imputeCTCmean3 = mean(CTC_mean_per_diff,na.rm=T),
                   imputeLatestSalaryHike3 = mean(latest_salary_hike,na.rm=T))

masterfile9 <- left_join(masterfile9,impute3,by=c("Department","Final_Grade"))

# Imputing with dept & grade
masterfile9 <- masterfile9 %>% mutate(avg_sal_hike= ifelse(is.na(avg_sal_hike)| avg_sal_hike == "NaN",imputeAvgSalHike3,avg_sal_hike),
                                      Latest_Rating= ifelse(is.na(Latest_Rating)| Latest_Rating == "NaN",imputeRating3,Latest_Rating),
                                      CTC_mean_per_diff= ifelse(is.na(CTC_mean_per_diff)| CTC_mean_per_diff == "NaN",imputeCTCmean3,CTC_mean_per_diff),
                                      latest_salary_hike= ifelse(is.na(latest_salary_hike)| latest_salary_hike == "NaN",imputeLatestSalaryHike3,latest_salary_hike))

sel_var4 <- masterfile9 %>% select(`Emp Id`,`Modified dept`,Department,Final_TeamID,Avg_lv_Af_App,Grade_point,
                                   Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Ppl_sameDesignation_team_per,
                                   Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Experience_calc,
                                   CTC_mean_per_diff,Age_Manager,No_of_Reportees,No_of_MaleReportees,Avg_time_in_each_grade,
                                   Final_Grade,latest_salary_hike,avg_sal_hike)
colSums(is.na(sel_var4))

# Impute 4
# Business Unit & grade
impute4 <- masterfile9 %>% group_by(`Modified dept`,Final_Grade) %>% 
  dplyr::summarize(imputeAvgSalHike4 = mean(avg_sal_hike,na.rm=T),
                   imputeRating4 = mean(Latest_Rating,na.rm=T),
                   imputeCTCmean4 = mean(CTC_mean_per_diff,na.rm=T),
                   imputeLatestSalaryHike4 = mean(latest_salary_hike,na.rm=T))

masterfile9 <- left_join(masterfile9,impute4,by=c("Modified dept","Final_Grade"))

masterfile9 <- masterfile9 %>% mutate(avg_sal_hike= ifelse(is.na(avg_sal_hike)| avg_sal_hike == "NaN",imputeAvgSalHike4,avg_sal_hike),
                                      Latest_Rating= ifelse(is.na(Latest_Rating)| Latest_Rating == "NaN",imputeRating4,Latest_Rating),
                                      CTC_mean_per_diff= ifelse(is.na(CTC_mean_per_diff)| CTC_mean_per_diff == "NaN",imputeCTCmean4,CTC_mean_per_diff),
                                      latest_salary_hike= ifelse(is.na(latest_salary_hike)| latest_salary_hike == "NaN",imputeLatestSalaryHike4,latest_salary_hike))

sel_var5 <- masterfile9 %>% select(`Emp Id`,`Modified dept`,Department,Final_TeamID,Avg_lv_Af_App,Grade_point,
                                   Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Ppl_sameDesignation_team_per,
                                   Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Experience_calc,
                                   CTC_mean_per_diff,Age_Manager,No_of_Reportees,No_of_MaleReportees,Avg_time_in_each_grade,
                                   Final_Grade,latest_salary_hike,avg_sal_hike)
colSums(is.na(sel_var5))
# Impute 5
# Business Unit avg

impute5 <- masterfile9 %>% group_by(`Modified dept`) %>% 
  dplyr::summarize(imputeAvgSalHike5 = mean(avg_sal_hike,na.rm=T),
                   imputeRating5 = mean(Latest_Rating,na.rm=T),
                   imputeCTCmean5 = mean(CTC_mean_per_diff,na.rm=T),
                   imputeLatestSalaryHike5 = mean(latest_salary_hike,na.rm=T))


masterfile9 <- left_join(masterfile9,impute5,by="Modified dept")

masterfile9 <- masterfile9 %>% mutate(avg_sal_hike= ifelse(is.na(avg_sal_hike)| avg_sal_hike == "NaN",imputeAvgSalHike5,avg_sal_hike),
                                      Latest_Rating= ifelse(is.na(Latest_Rating)| Latest_Rating == "NaN",imputeRating5,Latest_Rating),
                                      CTC_mean_per_diff= ifelse(is.na(CTC_mean_per_diff)| CTC_mean_per_diff == "NaN",imputeCTCmean5,CTC_mean_per_diff),
                                      latest_salary_hike= ifelse(is.na(latest_salary_hike)| latest_salary_hike == "NaN",imputeLatestSalaryHike5,latest_salary_hike))

sel_var6 <- masterfile9 %>% select(`Emp Id`,`Modified dept`,Department,Final_TeamID,Avg_lv_Af_App,Grade_point,
                                   Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Ppl_sameDesignation_team_per,
                                   Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Experience_calc,
                                   CTC_mean_per_diff,Age_Manager,No_of_Reportees,No_of_MaleReportees,Avg_time_in_each_grade,
                                   Final_Grade,latest_salary_hike,avg_sal_hike)

colSums(is.na(sel_var6))

#chk
getwd()
setwd("E:\\shubhi ahuja\\d\\Shubhi\\4 HR project\\HR Attrition\\Predictions\\Workings\\chks")
library(writexl)
#write_xlsx(masterfile9,"masterfile9_chk2.xlsx")
#write_xlsx(masterfile4,"masterfile4.xlsx")

## Prediction/Test set====
# Should have spent a year in system
class(masterfile9$DOJ)
predSet <- masterfile9 %>% filter (is.na(`Last working date`) & DOJ <= date12m)
predSet <- predSet %>% filter (is.na(DOR) & `Employee Type` == "CTC") # extra check
predSet <- predSet %>% filter (!Grade %like% 'Secretary')
predSet <- predSet %>% filter (`ManCom Flag`==0) 
min(predSet$DOJ)
max(predSet$DOJ)

sel_var_predSet <- predSet %>% select(`Emp Id`,`Modified dept`,Department,Final_TeamID,Avg_lv_Af_App,Grade_point,
                                      Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Ppl_sameDesignation_team_per,
                                      Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Experience_calc,
                                      CTC_mean_per_diff,Age_Manager,No_of_Reportees,No_of_MaleReportees,Avg_time_in_each_grade,
                                      Final_Grade,latest_salary_hike,avg_sal_hike)
colSums(is.na(sel_var_predSet))

chkna<- sel_var_predSet %>% filter(is.na(latest_salary_hike))
table(chkna$`Modified dept`)

# Now that the major vars are taken care of, we can make NAs as 0
predSet2 <- predSet %>% select(`Emp Id`,`Modified dept`,
                               Latest_Rating, Team_Size,Attrition6mCount,Attrition12mCount,Avg_lv_Af_App,
                               Attrition6mPer,Attrition12mPer,Trainings_yr,Time_in_current_grade,Total_Experience,
                               CTC_mean_per_diff,Age_Manager,No_of_Reportees,Ppl_sameDesignation_team_per,
                               No_of_MaleReportees,Avg_time_in_each_grade,Grade_point,latest_salary_hike,avg_sal_hike)
predSet2[is.na(predSet2)]<- 0

# Outlier Treatment, with values done earlier
# Team Size 178          # Experience 8.7 # Years of exp : 23       # reportees 14
# male reportees: 10     # Trainings 5

#Team Size
quantile(predSet2$Team_Size,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1))
v95 <- as.integer(quantile(predSet2$Team_Size,0.95)) # 183
predSet2$Team_Size<- ifelse(predSet2$Team_Size > v95,v95,predSet2$Team_Size)

# Total_Experience
quantile(predSet2$Total_Experience,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1))
v95 <- as.numeric(quantile(predSet2$Total_Experience,0.95));v95 # 19.9
predSet2$Total_Experience<- ifelse(predSet2$Total_Experience > v95,v95,predSet2$Total_Experience)

# No_of_Reportees
quantile(predSet2$No_of_Reportees,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1))
v99 <- as.numeric(quantile(predSet2$No_of_Reportees,0.99)); v99 # 12
predSet2$No_of_Reportees<- ifelse(predSet2$No_of_Reportees > v99,v99,predSet2$No_of_Reportees)

# No_of_MaleReportees
quantile(predSet2$No_of_MaleReportees,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1))
v99 <- as.numeric(quantile(predSet2$No_of_MaleReportees,0.99)) # 10
predSet2$No_of_MaleReportees<- ifelse(predSet2$No_of_MaleReportees > v99,v99,predSet2$No_of_MaleReportees)

# Trainings_yr
quantile(predSet2$Trainings_yr,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1))
v99 <- as.numeric(quantile(predSet2$Trainings_yr,0.99)) # 7
predSet2$Trainings_yr<- ifelse(predSet2$Trainings_yr > v99,v99,predSet2$Trainings_yr)

# Avg_lv_Af_App
quantile(predSet2$Avg_lv_Af_App,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,0.995,1))
v99 <- as.numeric(quantile(predSet2$Avg_lv_Af_App,0.995)) # 26.5 # 99.5th percentile
predSet2$Avg_lv_Af_App<- ifelse(predSet2$Avg_lv_Af_App > v99,v99,predSet2$Avg_lv_Af_App)

setnames(predSet2,old="Modified dept",new="Modified.dept")

# Making factors: dept
library(dummies)
class(predSet2)
class(predSet2$Modified.dept) 
predSet2$Modified.dept <- as.factor(predSet2$Modified.dept)
predSet2 <- as.data.frame(predSet2) # needed, gave error otherwise
predSet3 <- dummy.data.frame(predSet2, names=c("Modified.dept"), sep="_")
names(predSet3)

#Attrition_Testing1
# "Modified.dept_Others" removed
predSet4 <- predSet3 %>% select(-c(Modified.dept_Others))
setnames(predSet4,old="Modified.dept_Branch and Business Banking",new="Modified.dept_Branch_and_Business_Banking")
setnames(predSet4,old="Modified.dept_Client Services",new="Modified.dept_Client_Services")
setnames(predSet4,old="Modified.dept_Corporate and Institutional Banking",new="Modified.dept_Corporate_and_Institutional_Banking")
setnames(predSet4,old="Modified.dept_Technology and Solutions",new="Modified.dept_Technology_and_Solutions")
setnames(predSet4,old="Modified.dept_Credit Cards, Retail and MSME Lending",new="Modified.dept_Credit_Cards_Retail_and_MSME_Lending")
setnames(predSet4,old="Modified.dept_Commercial Banking",new="Modified.dept_Commercial_Banking")
setnames(predSet4,old="Modified.dept_Central Operations",new="Modified.dept_Central_Operations")


# Training Set===
training_set <- fread("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Attrition/Predictions/CommonInputs/TrainingSet_HRattrition_use.csv")
str(training_set)  
table(training_set$Flag)
#   0    1 
# 2419  586

setdiff(names(training_set),names(predSet4))
setdiff(names(predSet4),names(training_set))

training_set2<- training_set
setnames(training_set2,old="Latest.Employee.Rating",new="Latest_Rating")
setnames(training_set2,old="Num_Team.size",new="Team_Size")
setnames(training_set2,old="Attrition.in.last.6.months",new="Attrition6mCount")
setnames(training_set2,old="Attrition.in.last.12.months",new="Attrition12mCount")
setnames(training_set2,old="Per_Attrition.in.last.6.months",new="Attrition6mPer")
setnames(training_set2,old="Per_Attrition.in.last.12.months",new="Attrition12mPer")
setnames(training_set2,old="Num_Training_2019",new="Trainings_yr")
setnames(training_set2,old="Boss_Age.Reporting_manager_age",new="Age_Manager")
setnames(training_set2,old="Latest_PercentDifferenceCTC.Mean",new="CTC_mean_per_diff")
setnames(training_set2,old="Num_Reportees.u.have",new="No_of_Reportees")
setnames(training_set2,old="Male.reportees.u.have",new="No_of_MaleReportees")
setnames(training_set2,old="Final_Grade_according_to_month",new="Grade_point")
setnames(training_set2,old="Latest_salary.hike",new="latest_salary_hike")
setnames(training_set2,old="Avg_Salary.hike_2Yrs",new="avg_sal_hike")
setnames(training_set2,old="Years.of.Experience",new="Total_Experience")
setnames(training_set2,old="Per_people.at.the.same.designation",new="Ppl_sameDesignation_team_per")

setdiff(names(training_set2),names(predSet4)) # training set has flag column
setdiff(names(predSet4),names(training_set2)) # prediction set has emp id

getwd()
#write_xlsx(predSet4,"predset4.xlsx")

# Attrition_Training1
Attrition_Training1 <- training_set2

seecol <- colnames(Attrition_Training1);seecol <- seecol[!seecol == "Flag"] # removing flag

#predSet4$Flag <- NA # adding to get same column list
predSet5 <- predSet4 %>% select_at(.vars = seecol) # employee id also removed in predset5******

setdiff(names(training_set2),names(predSet5)) # Flag values won't be present in test set (only NA)
setdiff(names(predSet5),names(training_set2))

#Attrition_Training1
Attrition_Testing1 <- predSet5 

# xgboost====
library(xgboost)
table(Attrition_Training1$Flag) # 1 is exited, 0 is live
set.seed(123)
class(Attrition_Training1$Flag)
#Attrition_Testing1$Flag <- as.integer(Attrition_Testing1$Flag)

#Attrition_Testing1$Flag <- NULL
new_tr <- model.matrix(~.+0,data = Attrition_Training1[,-c("Flag")])
new_ts <- model.matrix(~.+0,data = Attrition_Testing1)

lables <- Attrition_Training1$Flag
#ts_lables <- Attrition_Testing1$Flag
str(Attrition_Training1$Flag)
#Attrition_Testing1$Flag

names(Attrition_Training1)
names(Attrition_Testing1)

str(Attrition_Testing1)
str(Attrition_Training1)

dtrain <- xgb.DMatrix(data = new_tr,label = lables)
dtest <- xgb.DMatrix(data = new_ts)
#dtest <- xgb.DMatrix(data = new_ts, label = ts_lables)
#ts_label <- as.numeric(ts_lables);str(ts_lables)

params <- list(booster = "gbtree", objective =  "binary:logistic", eta=0.3, gamma=0, 
               max_depth=6, min_child_weight=1, subsample=1, colsample_bytree=1,scale_pos_weight = 4,set.seed=123)

xgb1 <- xgb.train(params = params, data = dtrain, nrounds = 72, watchlist = list(train=dtrain), print_every_n = 10, early_stopping_rounds = 40, maximize = F, eval_metric = "error")

xgbpred <- predict(xgb1,dtest)
#xgbpred
xgbpred2 <- ifelse (xgbpred > 0.2418644,1,0)

output1 <- cbind(predSet4,xgbpred,xgbpred2)
table(output1$xgbpred2) # High Attrition expected for 0
# 0    1 
# 2723 1801 

#   0    1 
# 3092 1432

# 0    1 
#3013 1511

# 0    1 
# 2926 1598

# 0    1 
# 3150 1793

output2 <- output1 %>% select(`Emp Id`,xgbpred,xgbpred2)

### Remove HR team from output. Latest Ratings not shared for the same.
output3 <- left_join(output2,masterfile_raw,by="Emp Id")
setnames(output3,old="xgbpred",new="Propensity")
setnames(output3,old="xgbpred2",new="Classification_attrition")
setnames(output3,old="Age",new="Age of Emp")
# age bucket
output4 <- output3 %>% mutate(AgeBucket = ifelse(`Age of Emp`<=25,"<=25",
                                                 ifelse(`Age of Emp`>=26 & `Age of Emp` <= 30,"26-30",
                                                        ifelse(`Age of Emp`>=31 & `Age of Emp` <= 35,"31-35",
                                                               ifelse(`Age of Emp`>=36 & `Age of Emp` <= 40,"36-40",
                                                                      ifelse(`Age of Emp`>=41 & `Age of Emp` <= 45,"41-45",
                                                                             ifelse(`Age of Emp`>=46 & `Age of Emp` <= 50,"46-50","51 and above")))))))


output4 <- output4 %>% mutate(Experience_calc = (fixed_day-DOJ)/365) # will filter only for live employees, hence this can be done
# exp bucket
output4 <- output4 %>% mutate(Experience_Bucket= ifelse(Experience_calc < 1,"< 1y",
                                                        ifelse(Experience_calc <2,"1-2",
                                                               ifelse(Experience_calc <3,"2-3",
                                                                      ifelse(Experience_calc<5,"3-5",
                                                                             ifelse(Experience_calc<10,"5-10","10 and above"))))))

output4 <- output4 %>% mutate(Propensity_bucket =ifelse(Propensity<=.10,"<=0.10",
                                                        ifelse(Propensity<=0.2,"0.10-0.20",
                                                               ifelse(Propensity<=0.3,"0.20-0.30",
                                                                      ifelse(Propensity<=0.4,"0.30-0.40",
                                                                             ifelse(Propensity<=0.5,"0.40-0.50",
                                                                                    ifelse(Propensity<=0.6,"0.50-0.60",
                                                                                           ifelse(Propensity<=0.7,"0.60-0.70",
                                                                                                  ifelse(Propensity<=0.8,"0.70-0.80",
                                                                                                         ifelse(Propensity<=0.9,"0.80-0.90","0.90-1.0"))))))))))

output4 <- output4 %>% mutate(Propensity_bucket2 = ifelse(Propensity<=0.25,"<=0.25",
                                                          ifelse(Propensity<=0.50,"0.25-0.50",
                                                                 ifelse(Propensity<=0.75,"0.50-0.75","0.75-1.0"))))

library(lubridate)

date_month <- format(fixed_day,format="%b_%y")
output4 <- output4 %>%mutate(Output_month = date_month)

first_date <- strftime(today(),format="%y-%m-01"); first_date <- ymd(first_date)
first_date_nextMonth <- first_date %m+% months(1)
bal_date<- first_date_nextMonth - days(1); bal_date

output4 <- output4 %>%mutate(Output_date = bal_date)

output_exit <- output4 %>% filter (Classification_attrition ==1)
table(output_exit$`Business Unit`)


# ShapforXgboost=====
library(SHAPforxgboost)
#---------------------------------ShapforXgboost
class(Attrition_Testing1)
Attrition_Testing1$Age_Manager <- as.numeric(Attrition_Testing1$Age_Manager)
Attrition_Testing1$Avg_time_in_each_grade <- as.numeric(Attrition_Testing1$Avg_time_in_each_grade)
str(Attrition_Testing1)

data <- as.matrix(Attrition_Testing1)
shap_values <- shap.values(xgb_model = xgb1, X_train = data)
#shap_values <- shap.values(xgb_model = xgb1, X_train = dtest)

shap_values$mean_shap_score
shap_long <- shap.prep(shap_contrib = shap_values$shap_score,X_train = data)
#shap.plot.summary(shap_long)

#-----------------------Shap Data
shap_data <- shap_values$shap_score

shap_data2 <- shap_data
colnames(shap_data2) <- paste0(colnames(shap_data),"_shap")

rec <- cbind(output4,shap_data2)

#high prop		>0.75				
#rating 1,2,3 		undesirable attriion				
# map rating, avg hike, latest hike
info <- masterfile9 %>% select(`Emp Id`,Latest_Rating,avg_sal_hike,latest_salary_hike,Avg_lv_Af_App,Attrition6mCount,
                               Attrition6mPer,Attrition12mPer,Avg_time_in_each_grade,Team_Size,CTC_mean_per_diff,Trainings_yr)
info$Trainings_yr <- ifelse(is.na(info$Trainings_yr),0,info$Trainings_yr)

rec1 <- left_join(rec,info,by="Emp Id")

#trainings		positive shapley value			rec	niche trainings   
#latest rrating			shap>0			latest rating  # indirect monetary benefits (conference, car lease option)
#& avg sal hike			shap >0			
#& latest sal hiks			shap>0	
# avg leaves after appraisal  # urge emp to take leaves

# if shap for : avg attrition 12m & 6m ( per & count) high - Control attrition in team
# team size - employees might be overburdened, consider increasing team size
# avg time in grade- promotion/ indirect benefits

#avg leave after appriasal						
#positive shap value						

#Intangibles: open ended						
#Give pointers for conversation ( generic pointers: will apply for all L2/L1s)

#table(rec$Latest_Rating)
max(rec1$Latest_Rating)

rec2 <- rec1 %>% filter(Propensity >= 0.75 &
                          Latest_Rating >= 4) %>% mutate(Recommendation_targeted = 1)

max(rec2$Latest_Rating);min(rec2$Latest_Rating)

# updates basis discussion with Prashant and Shiv - 09/Mar/2021

# .Average and latest salary hike variables contributing to attrition propensity- 
# Check for indirect monetary benefits ( nomination for conference/ course/ ESOPs for employees > 2 years vintage + top 2 ratings)	increase recognition -
#thank you card (RnR platform), appreciation mails,
#gratitude campaign, program for managers (to create more of an appreciation culture in the team)
# to be part of actionable 

# .Avg time in grade variable contributing + spent > 3 years on avg, in the grade- Check if due for promotion	high performers for 2 appraisal cycle 
# consider giving additional responsibilities + reportee
# 
# .CTC_Mean variable contributing + employee earning below the ctc_mean - Check for salary dissatisfaction	
# standardize the salary yoy and reduce the mean ctc gap, basis performance



rec2<- rec2 %>% mutate(Rec1 = ifelse(avg_sal_hike_shap>0& latest_salary_hike_shap >0,"Increase recognition - Thank You card (RnR platform), Appreciation mails, Gratitude campaign, Program for managers (create an appreciation culture in the team)",""))
table(rec2$Rec1)
rec2<- rec2 %>% mutate(Rec21 = ifelse(Avg_lv_Af_App_shap>0 & Avg_lv_Af_App <= 4,"Urge employee to take leaves",""))
table(rec2$Rec21)
rec2<- rec2 %>% mutate(Rec22 = ifelse(Avg_lv_Af_App_shap>0 & Avg_lv_Af_App > 10,"Many leaves taken - keep in watchlist",""))
table(rec2$Rec22)
rec2<- rec2 %>% mutate(Rec3 = ifelse(Attrition6mCount_shap>0 & Attrition6mPer_shap>0 & Attrition12mPer_shap >0,"Control attrition in team/ Bring timely replacement,evaluate workload on other team members bcoz of attrition, evaluate duration of notice period of employee who resigned, evaluate team environment bcoz of attrition",""))
table(rec2$Rec3)
rec2<- rec2 %>% mutate(Rec4 = ifelse(Team_Size_shap>0 & Team_Size <= 4,"Please evaluate the team bandwidth, consider adding resources, if needed",""))
table(rec2$Rec4)
rec2<- rec2 %>% mutate(Rec5 = ifelse(Avg_time_in_each_grade_shap>0 & Avg_time_in_each_grade >3,"For High performers for 2 appraisal cycles -Consider giving additional responsibilities + Reportee",""))
table(rec2$Rec5)
rec2<- rec2 %>% mutate(Rec6 = ifelse(CTC_mean_per_diff_shap>0 & CTC_mean_per_diff <0 ,"Standardize the salary YoY & reduce the mean ctc gap, basis employee performance",""))
table(rec2$Rec6)
rec2<- rec2 %>% mutate(Rec7 = ifelse(Trainings_yr_shap>0 & Trainings_yr < 1,"Nominate for trainings",""))
table(rec2$Rec7)

rec2 <- rec2 %>% mutate(Actionable = paste(Rec1,Rec21,Rec22,Rec7,sep="|"))
table(rec2$Actionable)
rec2 <- rec2 %>% mutate(Actionable = ifelse(Actionable == "|||","",Actionable)) # replacing no rec/ just "|" with blanks 

rec2 <- rec2 %>% mutate(Monetary = paste(Rec5,Rec6,sep="|"))
table(rec2$Monetary)
rec2 <- rec2 %>% mutate(Monetary = ifelse(Monetary == "|","",Monetary)) # replacing no rec/ just "|" with blanks 

rec2 <- rec2 %>% mutate(Other = paste(Rec3,Rec4,sep="|"))
table(rec2$Other)
rec2 <- rec2 %>% mutate(Other = ifelse(Other == "|","",Other)) # replacing no rec/ just "|" with blanks 

rec2 <- rec2 %>% mutate(Actionable = ifelse(Actionable == "|||","",Actionable))

rec2 <- rec2 %>% mutate(Team_Size_var = ifelse(Team_Size_shap>0,"Team size",""),
                        Avf_leaves_var = ifelse(Avg_lv_Af_App_shap>0,"Leaves taken post appraisal",""),
                        attrn_var = ifelse(Attrition6mPer_shap>0 | Attrition12mPer_shap>0 | Attrition6mCount_shap>0 | Attrition12mCount_shap>0,"Attrition in the team",""),
                        Hike_var = ifelse(avg_sal_hike_shap>0 | latest_salary_hike_shap>0,"Salary Hike",""),
                        Ratings_var = ifelse(Latest_Rating_shap>0,"Rating",""),
                        CTC_mean_var = ifelse(CTC_mean_per_diff_shap>0,"CTC_mean_difference",""),
                        Trainings_var = ifelse(Trainings_yr_shap>0,"Trainings",""),
                        TimeInGrade_var = ifelse(Avg_time_in_each_grade_shap>0,"Avg time in Grade",""))

rec2 <- rec2 %>% mutate(Miscellaneous = paste(Team_Size_var,Avf_leaves_var,attrn_var,Hike_var,Ratings_var,
                                              CTC_mean_var,Trainings_var,TimeInGrade_var,sep="|"))
rec2 <- rec2 %>% mutate(Misc = ifelse(Actionable == "" & Monetary == "" & Other == "",Miscellaneous,""))

table(rec2$Misc)

rec3 <- rec2 %>% select(`Emp Id`,Recommendation_targeted,Actionable,Monetary,Other,Misc,Latest_Rating)


output5 <- left_join(output4,rec3,by="Emp Id")

## mgr analysis====

mgrAnalysis <- read_excel("E:/shubhi ahuja/d/Shubhi/4 HR project/HR Manager/outputs/ManagerAnalysis_v2.xlsx")
mgrAnalysis2 <- mgrAnalysis %>% select(`Emp Id`,Bucket_Final,HighAttrition_mgr)

setnames(mgrAnalysis2,old="Bucket_Final",new="Mgr_Bucket_Final")

output6 <- left_join(output5,mgrAnalysis2,by=c("Mgr Id"="Emp Id")) # mapping bucket of mgr, from mgr analysis

mgrAnalysis3 <- mgrAnalysis2 # for mapping reviewer info

setnames(mgrAnalysis3,old="Mgr_Bucket_Final",new="Reviewer_Bucket_Final")
setnames(mgrAnalysis3,old="HighAttrition_mgr",new="HighAttrition_Reviewer")

output6 <- left_join(output6,mgrAnalysis3,by=c("Reviewer Id"="Emp Id")) # mapping bucket of mgr, from mgr analysis


output7 <- output6 %>% filter (`Business Unit` != "HR") # just for this time

nrow(output6)- nrow(output7)

final_output <- output7

str(final_output)
table(final_output$Classification_attrition)
table(final_output$`Employee Status`)# should only have Active here***********************

# bring timely replacement
# evaulate load on other team members bcoz of attrition
# evaluate duration of notice period of exited employee
# evaluate the environment in team because of attrition

# output====
getwd()
setwd("E:\\shubhi ahuja\\d\\Shubhi\\4 HR project\\HR Attrition\\Predictions\\output")

#write_xlsx(final_output,"EmpPropensity_Jan21_v6.xlsx")

####### SA At Risk====
### 1 event====
library(readxl)
library(Matrix)
library(car)
library(dplyr)
library(readr)
library(caret) #for confusion matrix
library(ROCR) 
library(data.table)
options(scipen = 999)

library(RODBC)
library(sqldf)  
conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

# can expand on/run Checks below, to get funnel etc.
# Checks=====
chk <- sqlQuery(conn,paste("select revised_constitution, count(*) as count from dl_customer_master
                           where customer_tagging = 'SA'
                           group by revised_constitution
                           order by count(*) desc"))
sum(chk$count)

chk2 <- sqlQuery(conn,paste("select count(*) from dl_customer_master
                            where customer_tagging = 'SA'
                            and (revised_constitution in ('Individual','') or revised_constitution is null)"))
chk2

chk3 <- sqlQuery(conn,paste("select min(create_date) as min, max(create_date) as max from dl_customer_master
                            where datediff(month,create_date,'2020-02-29') = 12 "))
chk3

chk4 <- sqlQuery(conn,paste("select zone_name, count(*) as count from al_dl_customer_master 
                            where balance_date>= '2019-04-30'
                            group by zone_name"))
chk4

chk5 <- sqlQuery(conn,paste("select distinct zone_name from al_dl_customer_master
                            where zone_name not like '%rural%'
                            and  balance_date>= '2019-04-30'"))
chk5


## Pulling txns====

# since zone names keep changing, not doing a filter on zone names here. Will 
total_txns_raw <- sqlQuery(conn,paste("select * from (select customer_code, left(datename(month,balance_date),3) as balance_month,
                                      (isnull(netbanking_usage,0) + isnull(mb_usage,0) + isnull(atm_withdraw,0) +
                                      isnull(total_branch_txns,0) +isnull(debit_card_pos_usage_count,0) +isnull(debit_card_ecom_usage_count,0)) as total_txns
                                      from dl_customer_master
                                      where customer_tagging = 'SA'
                                      and (revised_constitution in ('Individual','') or revised_constitution is null)
                                      and datediff(month,create_date,'2020-02-29') >= 12
                                      and active>0 and live>0
                                      and zone_name not like '%rural%'
                                      union all 
                                      select customer_code,left(datename(month,balance_date),3) as balance_month,
                                      (isnull(netbanking_usage,0) + isnull(mb_usage,0) + isnull(atm_withdraw,0) +
                                      isnull(total_branch_txns,0) +isnull(debit_card_pos_usage_count,0) +isnull(debit_card_ecom_usage_count,0)) as total_txns
                                      from al_dl_customer_master
                                      where customer_tagging = 'SA'
                                      and (revised_constitution in ('Individual','') or revised_constitution is null
                                      and datediff(month,create_date,'2020-02-29') >= 12)
                                      and active>0 and live>0
                                      and zone_name not like '%rural%'
                                      and balance_date >= '2019-04-30') ss  --- change month accordingly *****
                                      pivot (sum(total_txns) for  balance_month in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

names(total_txns_raw)
total_txns_raw$customer_code <- as.character(total_txns_raw$customer_code)
head(total_txns_raw,5)
col_orig <- names(total_txns_raw)
ncol(total_txns_raw)

# upi
upi_raw <- sqlQuery(conn,paste("select * from 
                               (select a.customer_code, count(*) as UPI_debits, left(datename(month,b.creation_ts),3) as txn_month
                               from dbo.BAAS_UPI_TXNS b
                               left join dl_accounts a 
                               on b.bank_ac_number = a.account_number
                               where b.creation_ts >= '2019-04-01' 
                               and b.creation_ts <= '2020-02-29'
                               and b.payer_payee_flag='payer' 
                               group by a.customer_code,left(datename(month,b.creation_ts),3)) ss
                               pivot (sum(UPI_debits) for txn_month in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

names(upi_raw)
upi_raw$customer_code <- as.character(upi_raw$customer_code)
head(upi_raw,5)
head(total_txns_raw)


# keeping only cx that came in the rules we chose earlier
upi_raw2 <- upi_raw %>% filter (customer_code %in% total_txns_raw$customer_code)

# appending upi details to total cx txn details
total_txns_withUPI <- rbind(total_txns_raw,upi_raw2)
total_txns_withUPI2 <- total_txns_withUPI
total_txns_withUPI2[is.na(total_txns_withUPI2)] <- 0  # converting NAs to 0, for aggregation

total_txns_withUPI3 <- total_txns_withUPI2 %>% group_by(customer_code) %>% summarise_all(funs(sum))

#?summarise_all

# making a copy for transformation
total_txns <- total_txns_withUPI3 # not  the df,total_txns_raw, since we added upi too
head(total_txns,5) # just a copy of original, so will have actual month names
colnames(total_txns)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 
head(total_txns,5) # Renamed to generic M1,M2,M3
col_new <- names(total_txns)

col_orig;col_new

total_txns2 <- total_txns;str(total_txns2)

# Reasoning ********************
# riskflag5 = ifelse(M3 >0 & (M4+M5)==0,1,0),   
# Done some txn in M3, then no txn for 60 days (M4,M5): At risk in M5

# riskmonth5 = ifelse((M3 >0 & (M4+M5)==0) |(M4+M5)>0 ,"M5",""),
# for at risk event (1), there'd be no txn in M4,M5;
# to get 0/non at risk cx, we take those who did some txn in M4/M5

# risktxnflag5 = rowSums(total_txns2[,c("M1","M2","M3")]>0
# tells in the prev three months, in how many months did cx do a txn
# for at risk, it would be 1 min (coz it is a part of the condn) M3>0



total_txns2 <- total_txns2 %>% mutate(riskflag5 = ifelse(M3 >0 & (M4+M5)==0,1,0),
                                      riskmonth5 = ifelse((M3 >0 & (M4+M5)==0) |(M4+M5)>0 ,"M5",""),
                                      risktxnflag5 = rowSums(total_txns2[,c("M1","M2","M3")]>0),
                                      
                                      riskflag6 = ifelse(M4 >0 & (M5+M6)==0,1,0),
                                      riskmonth6 = ifelse((M4 >0 & (M5+M6)==0) |(M5+M6)>0 ,"M6",""),
                                      risktxnflag6 = rowSums(total_txns2[,c("M1","M2","M3")]>0),
                                      
                                      riskflag7 = ifelse(M5 >0 & (M6+M7)==0,1,0),
                                      riskmonth7 = ifelse((M5 >0 & (M6+M7)==0) |(M6+M7)>0,"M7",""),
                                      risktxnflag7 = rowSums(total_txns2[,c("M2","M3","M4")]>0),
                                      
                                      riskflag8 = ifelse(M6 >0 & (M7+M8)==0,1,0),
                                      riskmonth8 = ifelse((M6 >0 & (M7+M8)==0) |(M7+M8)>0,"M8",""),
                                      risktxnflag8 = rowSums(total_txns2[,c("M3","M4","M5")]>0),
                                      
                                      riskflag9 = ifelse(M7 >0 & (M8+M9)==0,1,0),
                                      riskmonth9 = ifelse((M7 >0 & (M8+M9)==0) |(M8+M9)>0,"M9",""),
                                      risktxnflag9 = rowSums(total_txns2[,c("M4","M5","M6")]>0), 
                                      
                                      riskflag10 = ifelse(M8 >0 & (M9+M10)==0,1,0),
                                      riskmonth10 = ifelse((M8 >0 & (M9+M10)==0) |(M9+M10)>0,"M10",""),
                                      risktxnflag10 = rowSums(total_txns2[,c("M5","M6","M7")]>0),
                                      
                                      riskflag11 = ifelse(M9 >0 & (M10+M11)==0,1,0),
                                      riskmonth11 = ifelse((M9 >0 & (M10+M11)==0) |(M10+M11)>0,"M11",""),
                                      risktxnflag11 = rowSums(total_txns2[,c("M6","M7","M8")]>0))

colSums(is.na(total_txns2))

risk5 <- total_txns2 %>% filter(riskmonth5 == "M5")
risk6 <- total_txns2 %>% filter(riskmonth6 == "M6")
risk7 <- total_txns2 %>% filter(riskmonth7 == "M7")
risk8 <- total_txns2 %>% filter(riskmonth8 == "M8")
risk9 <- total_txns2 %>% filter(riskmonth9 == "M9")
risk10 <- total_txns2 %>% filter(riskmonth10 == "M10")
risk11 <- total_txns2 %>% filter(riskmonth11 == "M11")

risk5 <- risk5[,c("customer_code","riskflag5","riskmonth5","risktxnflag5")]
risk6 <- risk6[,c("customer_code","riskflag6","riskmonth6","risktxnflag6")]
risk7 <- risk7[,c("customer_code","riskflag7","riskmonth7","risktxnflag7")]
risk8 <- risk8[,c("customer_code","riskflag8","riskmonth8","risktxnflag8")]
risk9 <- risk9[,c("customer_code","riskflag9","riskmonth9","risktxnflag9")]
risk10 <- risk10[,c("customer_code","riskflag10","riskmonth10","risktxnflag10")]
risk11 <- risk11[,c("customer_code","riskflag11","riskmonth11","risktxnflag11")]

colnames(risk5)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")
colnames(risk6)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")
colnames(risk7)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")
colnames(risk8)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")
colnames(risk9)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")
colnames(risk10)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")
colnames(risk11)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")

#table(total)


#colnames(risk11)<-c("customer_code","AtRisk_flag","RiskMonth","TxnFlagPrev3m")

riskall <- rbind(risk5,risk6,risk7,risk8,risk9,risk10,risk11)# risk11
table(riskall$AtRisk_flag)
table(riskall$RiskMonth,riskall$AtRisk_flag)

# keeping only those where tnxflagprev3m != 0 
#where last 3 months' thnx are zero

setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")

str(riskall)
write.csv(riskall,"AtRiskSAeventV1.csv",row.names = F)

#### adding vars=====
library(readxl)
library(Matrix)
library(car)
library(dplyr)
library(readr)
library(caret) #for confusion matrix
library(ROCR) 
library(data.table)
options(scipen = 999)

library(RODBC)
library(sqldf)  
# conn====
conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")

chk_date <- sqlQuery(conn,paste("select distinct(balance_date) from dl_customer_master"))
chk_date # march data is uploaded now. 

raw <- fread("AtRiskSAeventV1.csv",colClasses = c(customer_code ="character"))
head(raw)
nrow(raw) #14.04 lakhs
table(raw$AtRisk_flag)

see_str <- raw %>% group_by(RiskMonth,AtRisk_flag) %>% summarise(count=n())
see_str2 <- raw %>% group_by(RiskMonth) %>% summarise(total_month=n())

see_str3 <- left_join(see_str,see_str2,by="RiskMonth")
see_str4 <- see_str3 %>% mutate(perc= (count/total_month)*100)

# > col_orig
# [1] "customer_code" "Apr"           "May"           "Jun"           "Jul"           "Aug"           "Sep"          
# [8] "Oct"           "Nov"           "Dec"           "Jan"           "Feb"          
# > col_new
# [1] "customer_code" "M1"            "M2"            "M3"            "M4"            "M5"            "M6"           
# [8] "M7"            "M8"            "M9"            "M10"           "M11"    

chk<- sqlQuery(conn,paste("select distinct balance_date from al_dl_customer_master
                          order by balance_date desc"))
chk
## Starting with appending relevant datapoints
# mab
mab<- sqlQuery(conn,paste("select * from 
                          (select customer_code, mab, left(datename(month,balance_date),3) as [month] from al_dl_customer_master
                          where balance_date >= '2019-04-30'
                          and balance_date <= '2020-02-29'
                          --union all select customer_code, mab,left(datename(month,balance_date),3) as [month] from dl_customer_master
                          )ss
                          pivot (sum(mab) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

map <- mab # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 
f1 <- left_join(raw,map,by="customer_code")
names(f1)

f2 <- f1 %>% mutate(M1_MAB = ifelse(RiskMonth == "M5",M1,
                                    ifelse(RiskMonth== "M6",M2,
                                           ifelse(RiskMonth=="M7",M3,
                                                  ifelse(RiskMonth=="M8",M4,
                                                         ifelse(RiskMonth=="M9",M5,
                                                                ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_MAB = ifelse(RiskMonth == "M5",M2,
                                    ifelse(RiskMonth== "M6",M3,
                                           ifelse(RiskMonth=="M7",M4,
                                                  ifelse(RiskMonth=="M8",M5,
                                                         ifelse(RiskMonth=="M9",M6,
                                                                ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_MAB= ifelse(RiskMonth == "M5",M3,
                                   ifelse(RiskMonth== "M6",M4,
                                          ifelse(RiskMonth=="M7",M5,
                                                 ifelse(RiskMonth=="M8",M6,
                                                        ifelse(RiskMonth=="M9",M7,
                                                               ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

#  ********************************************
# debit count
debit_count <- sqlQuery(conn,paste("select * from
                                   (select a.customer_code, count(*) as debit_count, left(datename(month,tran_date),3) as [month]
                                   from dbo.DL_BBB_HTD h
                                   left join al_dl_accounts a
                                   on h.account_no = a.account_number
                                   where h.part_tran_type = 'D'
                                   and h.tran_date >= '2019-04-01' --- enter starting date
                                   and h.tran_date <= '2020-02-29' -- enter end date
                                   and a.balance_date = '2020-02-29' -- change accordingly
                                   and a.closing_date is null
                                   and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                   and h.tran_particular not like  '%disbursement credit%' ---
                                   and h.tran_particular not like '%draw down credit%' --- ??
                                   and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                   and h.tran_particular not like 'REV %'
                                   and h.tran_particular not like '%reversal%'
                                   and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                   and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                   and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                   group by a.customer_code,left(datename(month,tran_date),3)) ss
                                   pivot (sum(debit_count) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt "))

map <- debit_count # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_debitcount = ifelse(RiskMonth == "M5",M1,
                                           ifelse(RiskMonth== "M6",M2,
                                                  ifelse(RiskMonth=="M7",M3,
                                                         ifelse(RiskMonth=="M8",M4,
                                                                ifelse(RiskMonth=="M9",M5,
                                                                       ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_debitcount = ifelse(RiskMonth == "M5",M2,
                                           ifelse(RiskMonth== "M6",M3,
                                                  ifelse(RiskMonth=="M7",M4,
                                                         ifelse(RiskMonth=="M8",M5,
                                                                ifelse(RiskMonth=="M9",M6,
                                                                       ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_debitcount= ifelse(RiskMonth == "M5",M3,
                                          ifelse(RiskMonth== "M6",M4,
                                                 ifelse(RiskMonth=="M7",M5,
                                                        ifelse(RiskMonth=="M8",M6,
                                                               ifelse(RiskMonth=="M9",M7,
                                                                      ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

#********************************************************88
# credit count
credit_count <- sqlQuery(conn,paste("select * from
                                    (select a.customer_code, count(*) as credit_count, left(datename(month,tran_date),3) as [month]
                                    from dbo.DL_BBB_HTD h
                                    left join al_dl_accounts a
                                    on h.account_no = a.account_number
                                    where h.part_tran_type = 'C'
                                    and h.tran_date >= '2019-04-01' --- enter starting date
                                    and h.tran_date <= '2020-02-29' -- enter end date
                                    and a.balance_date = '2020-02-29' -- change accordingly
                                    and a.closing_date is null
                                    and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                    and h.tran_particular not like  '%disbursement credit%' ---
                                    and h.tran_particular not like '%draw down credit%' --- ??
                                    and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                    and h.tran_particular not like 'REV %'
                                    and h.tran_particular not like '%reversal%'
                                    and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                    and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                    and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                    group by a.customer_code,left(datename(month,tran_date),3)) ss
                                    pivot (sum(credit_count) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt "))


map <- credit_count # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_creditcount = ifelse(RiskMonth == "M5",M1,
                                            ifelse(RiskMonth== "M6",M2,
                                                   ifelse(RiskMonth=="M7",M3,
                                                          ifelse(RiskMonth=="M8",M4,
                                                                 ifelse(RiskMonth=="M9",M5,
                                                                        ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_creditcount = ifelse(RiskMonth == "M5",M2,
                                            ifelse(RiskMonth== "M6",M3,
                                                   ifelse(RiskMonth=="M7",M4,
                                                          ifelse(RiskMonth=="M8",M5,
                                                                 ifelse(RiskMonth=="M9",M6,
                                                                        ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_creditcount= ifelse(RiskMonth == "M5",M3,
                                           ifelse(RiskMonth== "M6",M4,
                                                  ifelse(RiskMonth=="M7",M5,
                                                         ifelse(RiskMonth=="M8",M6,
                                                                ifelse(RiskMonth=="M9",M7,
                                                                       ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

#****************************************************************
# Debit value
debit_value <- sqlQuery(conn,paste("select * from
                                   (select a.customer_code, sum(h.tran_amt) as debit_amt,left(datename(month,tran_date),3) as [month]
                                   from dbo.DL_BBB_HTD h
                                   left join al_dl_accounts a
                                   on h.account_no = a.account_number
                                   where h.part_tran_type = 'D'
                                   and h.tran_date >= '2019-04-01' --- enter starting date
                                   and h.tran_date <= '2020-02-29' -- enter end date
                                   and a.balance_date = '2020-02-29' -- change accordingly
                                   and a.closing_date is null
                                   and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                   and h.tran_particular not like  '%disbursement credit%' ---
                                   and h.tran_particular not like '%draw down credit%' --- ??
                                   and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                   and h.tran_particular not like 'REV %'
                                   and h.tran_particular not like '%reversal%'
                                   and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                   and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                   and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                   group by a.customer_code,left(datename(month,tran_date),3) ) ss
                                   pivot (sum(debit_amt) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt "))

map <- debit_value # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_debitvalue = ifelse(RiskMonth == "M5",M1,
                                           ifelse(RiskMonth== "M6",M2,
                                                  ifelse(RiskMonth=="M7",M3,
                                                         ifelse(RiskMonth=="M8",M4,
                                                                ifelse(RiskMonth=="M9",M5,
                                                                       ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_debitvalue = ifelse(RiskMonth == "M5",M2,
                                           ifelse(RiskMonth== "M6",M3,
                                                  ifelse(RiskMonth=="M7",M4,
                                                         ifelse(RiskMonth=="M8",M5,
                                                                ifelse(RiskMonth=="M9",M6,
                                                                       ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_debitvalue= ifelse(RiskMonth == "M5",M3,
                                          ifelse(RiskMonth== "M6",M4,
                                                 ifelse(RiskMonth=="M7",M5,
                                                        ifelse(RiskMonth=="M8",M6,
                                                               ifelse(RiskMonth=="M9",M7,
                                                                      ifelse(RiskMonth=="M10",M8,M9)))))))
compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))




#***************************************
# credit value
credit_value <- sqlQuery(conn,paste("select * from 
                                    (select a.customer_code, sum(h.tran_amt) as credit_amt,left(datename(month,tran_date),3) as [month]
                                    from dbo.DL_BBB_HTD h
                                    left join al_dl_accounts a
                                    on h.account_no = a.account_number
                                    where h.part_tran_type = 'C'
                                    and h.tran_date >= '2019-04-01' --- enter starting date
                                    and h.tran_date <= '2020-02-29' -- enter end date
                                    and a.balance_date = '2020-02-29' -- change accordingly
                                    and a.closing_date is null
                                    and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                    and h.tran_particular not like  '%disbursement credit%' ---
                                    and h.tran_particular not like '%draw down credit%' --- ??
                                    and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                    and h.tran_particular not like 'REV %'
                                    and h.tran_particular not like '%reversal%'
                                    and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                    and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                    and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                    group by a.customer_code,left(datename(month,tran_date),3)) ss
                                    pivot (sum(credit_amt) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

map <- credit_value
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_creditvalue = ifelse(RiskMonth == "M5",M1,
                                            ifelse(RiskMonth== "M6",M2,
                                                   ifelse(RiskMonth=="M7",M3,
                                                          ifelse(RiskMonth=="M8",M4,
                                                                 ifelse(RiskMonth=="M9",M5,
                                                                        ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_creditvalue = ifelse(RiskMonth == "M5",M2,
                                            ifelse(RiskMonth== "M6",M3,
                                                   ifelse(RiskMonth=="M7",M4,
                                                          ifelse(RiskMonth=="M8",M5,
                                                                 ifelse(RiskMonth=="M9",M6,
                                                                        ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_creditvalue= ifelse(RiskMonth == "M5",M3,
                                           ifelse(RiskMonth== "M6",M4,
                                                  ifelse(RiskMonth=="M7",M5,
                                                         ifelse(RiskMonth=="M8",M6,
                                                                ifelse(RiskMonth=="M9",M7,
                                                                       ifelse(RiskMonth=="M10",M8,M9)))))))
compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))


#************************************************
# pos-ecom count

posecom_count <- sqlQuery(conn,paste("select * from (/*select customer_code, left(datename(month,balance_date),3) as balance_month,
                                     (isnull(debit_card_pos_usage_count,0) +isnull(debit_card_ecom_usage_count,0)) as pos_ecom
                                     from dl_customer_master
                                     union all */
                                     select customer_code,left(datename(month,balance_date),3) as balance_month,
                                     (isnull(debit_card_pos_usage_count,0) +isnull(debit_card_ecom_usage_count,0)) as pos_ecom
                                     from al_dl_customer_master
                                     where balance_date >= '2019-04-30'
                                     and balance_date <= '2020-02-29') ss
                                     pivot (sum(pos_ecom) for balance_month in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

map <- posecom_count # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_posecomcount = ifelse(RiskMonth == "M5",M1,
                                             ifelse(RiskMonth== "M6",M2,
                                                    ifelse(RiskMonth=="M7",M3,
                                                           ifelse(RiskMonth=="M8",M4,
                                                                  ifelse(RiskMonth=="M9",M5,
                                                                         ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_posecomcount = ifelse(RiskMonth == "M5",M2,
                                             ifelse(RiskMonth== "M6",M3,
                                                    ifelse(RiskMonth=="M7",M4,
                                                           ifelse(RiskMonth=="M8",M5,
                                                                  ifelse(RiskMonth=="M9",M6,
                                                                         ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_posecomcount= ifelse(RiskMonth == "M5",M3,
                                            ifelse(RiskMonth== "M6",M4,
                                                   ifelse(RiskMonth=="M7",M5,
                                                          ifelse(RiskMonth=="M8",M6,
                                                                 ifelse(RiskMonth=="M9",M7,
                                                                        ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

#************************************************
## pos-ecom value
posecom_value <- sqlQuery(conn,paste("select * from (/*select customer_code, left(datename(month,balance_date),3) as balance_month,
                                     (isnull(debit_card_pos_monetary_value,0) +isnull(debit_card_ecom_monetary_value,0)) as pos_ecom_val
                                     from dl_customer_master
                                     union all */
                                     select customer_code,left(datename(month,balance_date),3) as balance_month,
                                     (isnull(debit_card_pos_monetary_value,0) +isnull(debit_card_ecom_monetary_value,0)) as pos_ecom_val
                                     from al_dl_customer_master
                                     where balance_date >= '2019-04-30'
                                     and balance_date <= '2020-02-29') ss
                                     pivot (sum(pos_ecom_val) for balance_month in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))


map <- posecom_value # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_posecomvalue = ifelse(RiskMonth == "M5",M1,
                                             ifelse(RiskMonth== "M6",M2,
                                                    ifelse(RiskMonth=="M7",M3,
                                                           ifelse(RiskMonth=="M8",M4,
                                                                  ifelse(RiskMonth=="M9",M5,
                                                                         ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_posecomvalue = ifelse(RiskMonth == "M5",M2,
                                             ifelse(RiskMonth== "M6",M3,
                                                    ifelse(RiskMonth=="M7",M4,
                                                           ifelse(RiskMonth=="M8",M5,
                                                                  ifelse(RiskMonth=="M9",M6,
                                                                         ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_posecomvalue= ifelse(RiskMonth == "M5",M3,
                                            ifelse(RiskMonth== "M6",M4,
                                                   ifelse(RiskMonth=="M7",M5,
                                                          ifelse(RiskMonth=="M8",M6,
                                                                 ifelse(RiskMonth=="M9",M7,
                                                                        ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

#***************************************************
# complaints
complaints <- sqlQuery(conn,paste("select * from 
                                  (select a.customer_code, count(*) as complaint_count,left (datename(month, c.creation_date),3) as [month]
                                  from dbo.SF_Tickets c
                                  left join al_dl_accounts a --- see if you want to use al_Accounts & freeze balance_date 
                                  on c.account_number = a.account_number
                                  and c.classification ='complaint'
                                  and c.creation_date >= '2019-04-01'  -- choose relevant starting date
                                  and c.creation_date <= '2020-02-29' -- choose relevant end date
                                  and a.balance_date = '2020-02-29'
                                  group by a.customer_code,left (datename(month, c.creation_date),3)) ss
                                  pivot(sum(complaint_count) for  [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

map <- complaints # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)

# if cx became at risk in M6, we are pulling complaints for M1-M3, and summing it up
# pulling till M3, 

f2 <- f1 %>% mutate(complaints3m = ifelse(RiskMonth == "M5",rowSums(f1[,c("M1","M2","M3")],na.rm=T),
                                          ifelse(RiskMonth== "M6",rowSums(f1[,c("M2","M3","M4")],na.rm=T),
                                                 ifelse(RiskMonth=="M7",rowSums(f1[,c("M3","M4","M5")],na.rm=T),
                                                        ifelse(RiskMonth=="M8",rowSums(f1[,c("M4","M5","M6")],na.rm=T),
                                                               ifelse(RiskMonth=="M9",rowSums(f1[,c("M5","M6","M7")],na.rm=T),
                                                                      ifelse(RiskMonth=="M10",rowSums(f1[,c("M6","M7","M8")],na.rm=T),
                                                                             rowSums(f1[,c("M7","M8","M9")],na.rm=T))))))),
                    complain_flag = ifelse(complaints3m>0 & !is.na(complaints3m),1,0))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

#*******************************************
# txns to beneficiary

benef <- sqlQuery(conn,paste("select * from 
                             (select customer_code, count(*) as txn_benef,[month] from (
                             select a.customer_code,left(datename(month,h.tran_date),3) as [month],
                             case when  h.tran_particular like '%imps%' and h.tran_particular not like '%charges%' then substring(h.tran_particular,23,len(h.tran_particular)) 
                             when h.tran_particular like '%neft%' then substring(h.tran_particular,19,len(h.tran_particular))
                             when h.tran_particular like '%rtgs%' then substring(h.tran_particular,23,len(h.tran_particular))
                             else NULL
                             end as beneficiary_name
                             from dbo.DL_BBB_HTD h
                             left join dl_accounts a
                             on h.account_no = a.account_number
                             where h.part_tran_type = 'D' 
                             and h.tran_date >= '2019-04-01'  --- adjust duration
                             and h.tran_date <= '2020-02-29' --- adjust duration
                             and ((case when  h.tran_particular like '%imps%' and h.tran_particular not like '%charges%' then substring(h.tran_particular,23,len(h.tran_particular)) 
                             when h.tran_particular like '%neft%' then substring(h.tran_particular,19,len(h.tran_particular))
                             when h.tran_particular like '%rtgs%' then substring(h.tran_particular,23,len(h.tran_particular))
                             else NULL 
                             end) is not null)) ss
                             group by customer_code,[month]) ss
                             pivot (sum(txn_benef) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt "))


map <- benef # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(benefTxn3m = ifelse(RiskMonth == "M5",rowSums(f1[,c("M1","M2","M3")],na.rm=T),
                                        ifelse(RiskMonth== "M6",rowSums(f1[,c("M2","M3","M4")],na.rm=T),
                                               ifelse(RiskMonth=="M7",rowSums(f1[,c("M3","M4","M5")],na.rm=T),
                                                      ifelse(RiskMonth=="M8",rowSums(f1[,c("M4","M5","M6")],na.rm=T),
                                                             ifelse(RiskMonth=="M9",rowSums(f1[,c("M5","M6","M7")],na.rm=T),
                                                                    ifelse(RiskMonth=="M10",rowSums(f1[,c("M6","M7","M8")],na.rm=T),
                                                                           rowSums(f1[,c("M7","M8","M9")],na.rm=T))))))),
                    benef_flag = ifelse(benefTxn3m>0 & !is.na(benefTxn3m),1,0))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

getwd()
#write.csv(compiled,"compiledtillbenefV3.csv",row.names = F)


## intermed====
intermed <- fread("compiledtillbenefV3.csv",colClasses = c(customer_code = "character"))
compiled <- intermed

logins_mb <- sqlQuery(conn,paste("select * from
                                 (select customer_code, mob_mtd_login_count,left((datename(month,balance_date)),3) as [month]
                                 from al_dl_customer_master 
                                 where balance_date >= '2019-04-30'
                                 and balance_date <= '2020-02-29'
                                 /*union all
                                 select customer_code, mob_mtd_login_count,left((datename(month,balance_date)),3) as [month]
                                 from dl_customer_master */
                                 )ss
                                 pivot(sum(mob_mtd_login_count) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt   "))

map <- logins_mb # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 
f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_mblogins = ifelse(RiskMonth == "M5",M1,
                                         ifelse(RiskMonth== "M6",M2,
                                                ifelse(RiskMonth=="M7",M3,
                                                       ifelse(RiskMonth=="M8",M4,
                                                              ifelse(RiskMonth=="M9",M5,
                                                                     ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_mblogins = ifelse(RiskMonth == "M5",M2,
                                         ifelse(RiskMonth== "M6",M3,
                                                ifelse(RiskMonth=="M7",M4,
                                                       ifelse(RiskMonth=="M8",M5,
                                                              ifelse(RiskMonth=="M9",M6,
                                                                     ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_mblogins= ifelse(RiskMonth == "M5",M3,
                                        ifelse(RiskMonth== "M6",M4,
                                               ifelse(RiskMonth=="M7",M5,
                                                      ifelse(RiskMonth=="M8",M6,
                                                             ifelse(RiskMonth=="M9",M7,
                                                                    ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))


logins_ib <- sqlQuery(conn,paste("select * from
                                 (select customer_code, ib_mtd_login_count,left((datename(month,balance_date)),3) as [month]
                                 from al_dl_customer_master 
                                 where balance_date >= '2019-04-30'
                                 and balance_date <= '2020-02-29'
                                 /*union all
                                 select customer_code, ib_mtd_login_count,left((datename(month,balance_date)),3) as [month]
                                 from dl_customer_master */
                                 )ss
                                 pivot(sum(ib_mtd_login_count) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt   "))

map <- logins_ib # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 
f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_iblogins = ifelse(RiskMonth == "M5",M1,
                                         ifelse(RiskMonth== "M6",M2,
                                                ifelse(RiskMonth=="M7",M3,
                                                       ifelse(RiskMonth=="M8",M4,
                                                              ifelse(RiskMonth=="M9",M5,
                                                                     ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_iblogins = ifelse(RiskMonth == "M5",M2,
                                         ifelse(RiskMonth== "M6",M3,
                                                ifelse(RiskMonth=="M7",M4,
                                                       ifelse(RiskMonth=="M8",M5,
                                                              ifelse(RiskMonth=="M9",M6,
                                                                     ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_iblogins= ifelse(RiskMonth == "M5",M3,
                                        ifelse(RiskMonth== "M6",M4,
                                               ifelse(RiskMonth=="M7",M5,
                                                      ifelse(RiskMonth=="M8",M6,
                                                             ifelse(RiskMonth=="M9",M7,
                                                                    ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

# select customer_code,1 as email_null from dl_customer_master
# where email_id is null

email <- sqlQuery(conn,paste("select customer_code, email_id from al_dl_customer_master
                             where balance_date ='2020-02-29' "))
##

map <- email # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

# inner join here
f1 <- inner_join(compiled,map,by="customer_code") ## any one who isn't live as on Feb end is not considered
f1$email_id <- tolower(f1$email_id)
f2 <- f1 %>% mutate(email_null=ifelse(email_id %in% c('NA','NULL',0,'0','rbl@gmail.com','abc@abc.com',
                                                      'abc@xyz.com','xyz@xyz.com','xyz@abc.com') | is.na(email_id),1,0))

# isValidEmail <- function(x) {
#   grepl("\\<[A-Z0-9._%+-]+@[A-Z0-9-]+\\.[A-Z]{2,}\\>", as.character(x), ignore.case=TRUE)
#   
# }
table(f2$email_null)
# f2[isValidEmail(f2$email_id) == FALSE, "email_null"] = 1
# table(f2$email_null)   # not done intentionally, picks up some incorrect cases

#f2$email_id <- NULL

compiled2 <- f2
nrow(compiled)- nrow(compiled2)

# days to register on mb

mbreg <- sqlQuery(conn,paste("
                             select customer_code, datediff(day,create_date,mob_registration_date) as mb_reg_days
                             from al_dl_customer_master
                             where customer_tagging = 'SA'
                             and balance_date = '2020-02-29'")) # if pulled later
mbreg$customer_code <- as.character(mbreg$customer_code)

compiled2 <- left_join(compiled2,mbreg,by="customer_code")
compiled2$mbregNA <- ifelse(is.na(compiled2$mb_reg_days),1,0) # if date is NA, it flags as 1
table(compiled2$mbregNA)

#  -- days to register on ib
nbreg <- sqlQuery(conn,paste("select customer_code, datediff(day,create_date,ib_registration_date) as ib_reg_days
                             from al_dl_customer_master
                             where customer_tagging = 'SA'
                             and balance_date = '2020-02-29'"))
nbreg$customer_code <- as.character(nbreg$customer_code)

compiled2 <- left_join(compiled2,nbreg,by="customer_code")
#chk <- inner_join(compiled2,nbreg,by="customer_code") # 1242245
compiled2$ibregNA <- ifelse(is.na(compiled2$ib_reg_days),1,0) # if date is NA, it flags as 1
table(compiled2$ibregNA)

# digital txn 
dig1 <- sqlQuery(conn,paste("select * from (
                            /*select customer_code, left(datename(month,balance_date),3) as balance_month,
                            (isnull(netbanking_usage,0) + isnull(mb_usage,0) ) as digital_txns
                            from dl_customer_master
                            union all */
                            select customer_code,left(datename(month,balance_date),3) as balance_month,
                            (isnull(netbanking_usage,0) + isnull(mb_usage,0)) as digital_txns
                            from al_dl_customer_master
                            where balance_date >= '2019-04-30'
                            and balance_date <= '2020-02-29') ss  --- change month accordingly *****
                            pivot (sum(digital_txns) for balance_month in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt  ---change month accordingly****"))
dig1$customer_code <- as.character(dig1$customer_code)

# upi_raw
upi_raw <- sqlQuery(conn,paste("select * from 
                               (select a.customer_code, count(*) as UPI_debits, left(datename(month,b.creation_ts),3) as txn_month
                               from dbo.BAAS_UPI_TXNS b
                               left join dl_accounts a 
                               on b.bank_ac_number = a.account_number
                               where b.creation_ts >= '2019-04-01' 
                               and b.creation_ts <= '2020-02-29'
                               and b.payer_payee_flag='payer' 
                               group by a.customer_code,left(datename(month,b.creation_ts),3)) ss
                               pivot (sum(UPI_debits) for txn_month in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

upi_raw$customer_code <- as.character(upi_raw$customer_code)

# keeping only cx that came in the rules we chose earlier
upi_raw2 <- upi_raw %>% filter (customer_code %in% dig1$customer_code)

# appending upi details to total cx txn details
total_txns_withUPI <- rbind(dig1,upi_raw2)
total_txns_withUPI2 <- total_txns_withUPI
total_txns_withUPI2[is.na(total_txns_withUPI2)] <- 0  # converting NAs to 0, for aggregation

total_txns_withUPI3 <- total_txns_withUPI2 %>% group_by(customer_code) %>% summarise_all(funs(sum))


# adding total digital txn details (including UPI)
map <- total_txns_withUPI3 # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 
f1 <- left_join(compiled2,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_dig = ifelse(RiskMonth == "M5",M1,
                                    ifelse(RiskMonth== "M6",M2,
                                           ifelse(RiskMonth=="M7",M3,
                                                  ifelse(RiskMonth=="M8",M4,
                                                         ifelse(RiskMonth=="M9",M5,
                                                                ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_dig = ifelse(RiskMonth == "M5",M2,
                                    ifelse(RiskMonth== "M6",M3,
                                           ifelse(RiskMonth=="M7",M4,
                                                  ifelse(RiskMonth=="M8",M5,
                                                         ifelse(RiskMonth=="M9",M6,
                                                                ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_dig= ifelse(RiskMonth == "M5",M3,
                                   ifelse(RiskMonth== "M6",M4,
                                          ifelse(RiskMonth=="M7",M5,
                                                 ifelse(RiskMonth=="M8",M6,
                                                        ifelse(RiskMonth=="M9",M7,
                                                               ifelse(RiskMonth=="M10",M8,M9)))))))

compiled2 <- f2
compiled2 <- compiled2 %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))


## Fd closed count
fd <- sqlQuery(conn,paste("select * from 
                          (select customer_code,closing_date, left(datename(month,closing_date),3) as [month]
                          from al_dl_accounts
                          where product in ('fd','rd')
                          and closing_date > '2019-03-31' -- since we start tracking from April 19 for df 
                          and balance_date = '2020-02-29') ss 
                          pivot (count (closing_date) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) pvt "))


map <- fd # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 
f1 <- left_join(compiled2,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(M1_closed_td = ifelse(RiskMonth == "M5",M1,
                                          ifelse(RiskMonth== "M6",M2,
                                                 ifelse(RiskMonth=="M7",M3,
                                                        ifelse(RiskMonth=="M8",M4,
                                                               ifelse(RiskMonth=="M9",M5,
                                                                      ifelse(RiskMonth=="M10",M6,M7)))))),
                    M2_closed_td = ifelse(RiskMonth == "M5",M2,
                                          ifelse(RiskMonth== "M6",M3,
                                                 ifelse(RiskMonth=="M7",M4,
                                                        ifelse(RiskMonth=="M8",M5,
                                                               ifelse(RiskMonth=="M9",M6,
                                                                      ifelse(RiskMonth=="M10",M7,M8)))))),
                    M3_closed_td= ifelse(RiskMonth == "M5",M3,
                                         ifelse(RiskMonth== "M6",M4,
                                                ifelse(RiskMonth=="M7",M5,
                                                       ifelse(RiskMonth=="M8",M6,
                                                              ifelse(RiskMonth=="M9",M7,
                                                                     ifelse(RiskMonth=="M10",M8,M9)))))))

compiled2 <- f2
compiled2 <- compiled2 %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

getwd()


## Ditance from branch
#compiled2 <- fread("df2_datatillclosedtdv2.csv",colClasses = c(customer_code="character"))

dist <- fread("F:/FlatFiles_Model/branchDistance/Branch distance mapping csv cx wise.csv",colClasses = c(`Customer code`="character"))
names(dist)
setnames(dist,old="Distance(km)",new="distance_from_branch")
setnames(dist,old="Customer code",new="customer_code")
compiled2 <- left_join(compiled2,dist,by="customer_code")

compiled2$distanceNA <- ifelse(is.na(compiled2$distance_from_branch),1,0) # if distance is NA, it flags as 1


# # credit card
# 
# credit_card <- sqlQuery(conn,paste("select * from (select customer_code, credit_card,
# left(datename(month,balance_date),3) as [month]
# from al_dl_customer_master
# where customer_tagging = 'SA'
# and (revised_constitution in ('Individual','') or revised_constitution is null)
# and datediff(month,create_date,'2020-02-29') >= 12
# and active>0 and live>0
# and zone_name not like '%rural%'
# and balance_date >= '2019-04-30'
# and balance_date <= '2020-02-29')ss
# pivot (sum(credit_card) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))
# 
# map <- credit_card # df/var to be mapped
# map$customer_code <- as.character(map$customer_code)
# names(map)
# 
# colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 
# 
# f1 <- left_join(compiled2,map,by="customer_code")
# names(f1)
# f2 <- f1 %>% mutate(credit_card = ifelse(RiskMonth == "M5",M3,
#                                          ifelse(RiskMonth== "M6",M4,
#                                                 ifelse(RiskMonth=="M7",M5,
#                                                        ifelse(RiskMonth=="M8",M6,
#                                                               ifelse(RiskMonth=="M9",M7,
#                                                                      ifelse(RiskMonth=="M10",M8,M9)))))))
# compiled2 <- f2
# compiled2 <- compiled2 %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

# Now map fields from cx master

cx_info <- sqlQuery(conn,paste("select customer_code,cif_branch_code, cif_branch_name,zone_name,cluster,
                               rbi_category_desc,create_date,business_segment, constitution_code,
                               revised_constitution,insignia_flag,signature_flag,aspire_flag,abacus_flag,
                               active, inactive, dormant, live, count_sa, count_ca, count_deposits
                               from al_dl_customer_master
                               where customer_tagging = 'SA'
                               and (revised_constitution in ('Individual','') or revised_constitution is null)
                               and datediff(month,create_date,'2020-02-29') >= 12
                               and active>0 and live>0
                               and zone_name not like '%rural%'
                               and balance_date = '2020-02-29'"))

cx_info$customer_code <- as.character(cx_info$customer_code)

compiled3 <- inner_join(compiled2,cx_info,by="customer_code") #days to register on mb/nb taken as on feb end


see_str_c <- compiled3 %>% group_by(RiskMonth,AtRisk_flag) %>% summarise(count=n())
see_str_c2 <- compiled3 %>% group_by(RiskMonth) %>% summarise(total_month=n())

see_str_c3 <- left_join(see_str_c,see_str_c2,by="RiskMonth")
see_str_c4 <- see_str_c3 %>% mutate(perc= (count/total_month)*100)

dist_cx <- compiled3[!duplicated(compiled3$customer_code),]
nrow(dist_cx)

# account details
acc <- sqlQuery(conn,paste(" select customer_code,branch_code,account_number, 
                           account_scheme_code,account_creation_date,freeze_desc,lien_flag,mop
                           from al_dl_accounts
                           where account_status in ('A')
                           and product = 'SA'
                           and (closing_date is null)
                           and balance_date = '2020-02-29'
                           "))

acc$customer_code <- as.character(acc$customer_code)
acc$account_number <- as.character(acc$account_number)

compiled4 <- inner_join(compiled3,acc,by="customer_code") ### inner join done
colSums(is.na(compiled4))
nrow(compiled4)-nrow(compiled3)
table(compiled4$count_sa)

# first transaction date
firsttxndate <- sqlQuery(conn,paste("select a.customer_code,h.account_no,convert(date,(min(h.tran_date))) as first_txn_Date
                                    from dbo.DL_BBB_HTD h
                                    inner join al_dl_Accounts a
                                    on h.account_no = a.account_number
                                    where a.product = 'SA'
                                    and a.account_status in ('A')
                                    and a.closing_date is null 
                                    and balance_date = '2020-02-29'
                                    group by a.customer_code, h.account_no"))

firsttxndate$customer_code <- as.character(firsttxndate$customer_code)
firsttxndate$account_no <- as.character(firsttxndate$account_no)
head(firsttxndate)
getwd()
#write.csv(firsttxndate,"df_firsttxndate.csv",row.names = F)

firsttxndate<- fread("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip\\old\\o1\\df_firsttxndate.csv",colClasses = c(customer_code="character",account_no="character"))
str(firsttxndate)

compiled5 <- left_join(compiled4,firsttxndate,by="customer_code")


# intermed2====
# first go to conn=== and setwd etc., then run the below
#compiled5 <- fread("df4_sql_All_dfV2.csv",colClasses = c(customer_code="character"))

crest <- sqlQuery(conn,paste("SELECT customer_code, 'Y' AS crest_flag 
                             FROM AL_DL_lake_debit_card_master 
                             WHERE  card_no like '55974648%'
                             AND balance_date = '2020-02-29'")) # at a pt in time, Feb end ******

chk_dupl <- crest[duplicated(crest$customer_code),]; nrow(chk_dupl)

crest$customer_code <- as.character(crest$customer_code); crest$crest_flag <- as.character(crest$crest_flag)
crest <- crest[!duplicated(crest$customer_code),]
str(crest)

compiled6 <- left_join(compiled5,crest,by="customer_code")
table(compiled6$crest_flag)
compiled6$crest_flag <- ifelse(is.na(compiled6$crest_flag),"N",compiled6$crest_flag)
table(compiled6$crest_flag)

# adding ph====
uniq_cx <- compiled6[!duplicated(compiled6$customer_code),]
uniq_cx <- as.data.frame(uniq_cx$customer_code) 
colnames(uniq_cx)[1] <- "customer_code"

setwd("F:\\FlatFiles_Model\\ph\\")
list.files()

# UPH data needed for M3s (Hence: June- Sep)
# "PH_JUNE_FILE_19.csv": for first month, we pull data manually. for rest, loop
ph_needed <- c("PH_JULY'19.csv", "PH_AUG19.csv",
               "PH_september_19.csv","PH_OCT'19.csv","PH_NOV'19.csv","PH_DECEMBER_19.csv") 

#ph_needed <- c("PH_JULY'19.csv","PH_AUG19.csv")
library(dplyr)
ph <- fread("PH_JUNE_FILE_19.csv",colClasses = c(customer_code="character"))
ph1 <- ph %>% select (customer_code,Life_Insurance,UPH,TPH)
colnames(ph1) <- paste0(colnames(ph1),"_M3")
colnames(ph1)[1] <- "customer_code"

phcompile <- left_join(uniq_cx,ph1,by="customer_code")

uniq_cx$customer_code <- as.character(uniq_cx$customer_code)
i=4

for (fnames in ph_needed){
  ph <- fread(fnames,colClasses = c(customer_code="character"))
  ph1 <- ph %>% select (customer_code,Life_Insurance,UPH,TPH)
  colnames(ph1) <- paste0(colnames(ph1),"_M",i)
  colnames(ph1)[1] <- "customer_code"
  
  phcompile <- left_join(phcompile,ph1,by="customer_code")
  i = i+1
}

chkdupl <- phcompile[duplicated(phcompile$customer_code),]

# Mapping M3 etc. for relevant at risk months
f1 <- left_join(compiled6,phcompile,by="customer_code"); nrow(f1)-nrow(compiled6)
names(f1)

f2 <- f1 %>% mutate(UPH = ifelse(RiskMonth == "M5",UPH_M3,
                                 ifelse(RiskMonth== "M6",UPH_M4,
                                        ifelse(RiskMonth=="M7",UPH_M5,
                                               ifelse(RiskMonth=="M8",UPH_M6,
                                                      ifelse(RiskMonth=="M9",UPH_M7,
                                                             ifelse(RiskMonth=="M10",UPH_M8,UPH_M9)))))),
                    TPH = ifelse(RiskMonth == "M5",TPH_M3,
                                 ifelse(RiskMonth== "M6",TPH_M4,
                                        ifelse(RiskMonth=="M7",TPH_M5,
                                               ifelse(RiskMonth=="M8",TPH_M6,
                                                      ifelse(RiskMonth=="M9",TPH_M7,
                                                             ifelse(RiskMonth=="M10",TPH_M8,TPH_M9)))))),
                    LI = ifelse(RiskMonth == "M5",Life_Insurance_M3,
                                ifelse(RiskMonth== "M6",Life_Insurance_M4,
                                       ifelse(RiskMonth=="M7",Life_Insurance_M5,
                                              ifelse(RiskMonth=="M8",Life_Insurance_M6,
                                                     ifelse(RiskMonth=="M9",Life_Insurance_M7,
                                                            ifelse(RiskMonth=="M10",Life_Insurance_M8,Life_Insurance_M9)))))))


f3 <- f2 %>% select(customer_code,RiskMonth,UPH,TPH,LI)
names(f2)
# removing intermeditate vars
f4 <- f2 %>% select(-c(Life_Insurance_M3,Life_Insurance_M4,Life_Insurance_M5,Life_Insurance_M6,
                       Life_Insurance_M7,Life_Insurance_M8,Life_Insurance_M9,
                       UPH_M3,UPH_M4,UPH_M5,UPH_M6,UPH_M7,UPH_M8,UPH_M9,
                       TPH_M3,TPH_M4,TPH_M5,TPH_M6,TPH_M7,TPH_M8,TPH_M9))


chkph <- f4 %>% filter (customer_code == "101000140")
chkph2 <- phcompile %>% filter (customer_code == "101000140")

compiled7 <- f4

getwd()
setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")

#write.csv(compiled7,"df6_sql_All_df_withph.csv",row.names=F)

str(compiled7)

t1 <- .10 ; t2 <- .5 # seeting thresholds, threshold1 : 10%, threshold 2: 50%

# Derived vars ====

# MAB 10%
compiled7 <- compiled7 %>% mutate(MABper21 = (M2_MAB-M1_MAB)/M1_MAB,
                                  MABper32 = (M3_MAB-M2_MAB)/M2_MAB,
                                  MABfall10_21 = ifelse(MABper21 <= -t1,1,0),
                                  MABfall10_32 = ifelse(MABper32 <= -t1,1,0),
                                  MABfall10Flag = MABfall10_21 + MABfall10_32,
                                  MABgrow10_32 = ifelse(MABper32 >= t1,1,0),   
                                  MABgrow10_21 = ifelse(MABper21 >= t1,1,0),
                                  MABgrow10Flag = MABgrow10_21 + MABgrow10_32)

chk <- compiled7 %>% select(customer_code,M1_MAB,M2_MAB,M3_MAB,MABper21,MABper32,MABfall10_21,MABfall10_32,MABgrow10_21,
                            MABgrow10_32,MABfall10Flag,MABgrow10Flag)
unique(chk$MABfall10Flag); unique(chk$MABgrow10Flag)

chk2 <- chk %>% filter(is.na(MABfall10Flag))

compiled7 <- compiled7 %>% mutate(MABper21 = (M2_MAB-M1_MAB)/M1_MAB,
                                  MABper32 = (M3_MAB-M2_MAB)/M2_MAB)

compiled7$MABcountNaN  = rowSums(compiled7[,c("MABper21","MABper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(MABfall10_21 = ifelse(MABper21 <= -t1,1,0),
                                  MABfall10_32 = ifelse(MABper32 <= -t1,1,0),
                                  MABfall10Flag = MABfall10_21 + MABfall10_32,
                                  MABgrow10_32 = ifelse(MABper32 >= t1,1,0),   
                                  MABgrow10_21 = ifelse(MABper21 >= t1,1,0),
                                  MABgrow10Flag = MABgrow10_21 + MABgrow10_32)

chk <- compiled7 %>% select(customer_code,M1_MAB,M2_MAB,M3_MAB,MABper21,MABper32,MABfall10_21,MABfall10_32,MABgrow10_21,
                            MABgrow10_32,MABfall10Flag,MABgrow10Flag)
unique(chk$MABfall10Flag); unique(chk$MABgrow10Flag)
str(chk)
# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(MABfall10_21,MABfall10_32,MABgrow10_21,MABgrow10_32))

# MAB 50%
compiled7 <- compiled7 %>% mutate(MABfall50_21 = ifelse(MABper21 <= -t2,1,0),
                                  MABfall50_32 = ifelse(MABper32 <= -t2,1,0),
                                  MABfall50Flag = MABfall50_21 + MABfall50_32,
                                  MABgrow50_32 = ifelse(MABper32 >= t2,1,0),   
                                  MABgrow50_21 = ifelse(MABper21 >= t2,1,0),
                                  MABgrow50Flag = MABgrow50_21 + MABgrow50_32)

chk <- compiled7 %>% select(M1_MAB,M2_MAB,M3_MAB,MABper21,MABper32,MABfall50_21,MABfall50_32,MABgrow50_21,
                            MABgrow50_32,MABfall50Flag,MABgrow50Flag)

compiled7 <- compiled7 %>% select (-c(MABfall50_21,MABfall50_32,MABgrow50_21,MABgrow50_32))

#*************************
# debit count 10% ******
backup_compiled7 <- compiled7
compiled7[is.na(compiled7)] <- 0 # otherwise, we are getting NAs

compiled7 <- compiled7 %>% mutate(debitcountper21 = (M2_debitcount-M1_debitcount)/M1_debitcount,
                                  debitcountper32 = (M3_debitcount-M2_debitcount)/M2_debitcount)

compiled7$debitcountNaN  = rowSums(compiled7[,c("debitcountper21","debitcountper32")] == "NaN")
#table(compiled7$debitcountNaN)
compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

# original code, w/o dealing with NaNs, to see why we are doing the NA treatment
# compiled7 <- compiled7 %>% mutate(debitcountper21 = (M2_debitcount-M1_debitcount)/M1_debitcount,debitcountper32 = (M3_debitcount-M2_debitcount)/M2_debitcount,
#                                   debitcountfall10_21 = ifelse(debitcountper21 <= -t1,1,0),debitcountfall10_32 = ifelse(debitcountper32 <= -t1,1,0),
#                                   debitcountfall10Flag = debitcountfall10_21 + debitcountfall10_32,debitcountgrow10_32 = ifelse(debitcountper32 >= t1,1,0),   
#                                   debitcountgrow10_21 = ifelse(debitcountper21 >= t1,1,0),debitcountgrow10Flag = debitcountgrow10_21 + debitcountgrow10_32)

compiled7 <- compiled7 %>% mutate(debitcountfall10_21 = ifelse(debitcountper21 <= -t1,1,0),
                                  debitcountfall10_32 = ifelse(debitcountper32 <= -t1,1,0),
                                  debitcountfall10Flag = debitcountfall10_21 + debitcountfall10_32,
                                  debitcountgrow10_32 = ifelse(debitcountper32 >= t1,1,0),   
                                  debitcountgrow10_21 = ifelse(debitcountper21 >= t1,1,0),
                                  debitcountgrow10Flag = debitcountgrow10_21 + debitcountgrow10_32)

chk <- compiled7 %>% select(M1_debitcount,M2_debitcount,M3_debitcount,debitcountNaN,debitcountper21,debitcountper32,debitcountfall10_21,debitcountfall10_32,debitcountgrow10_21,
                            debitcountgrow10_32,debitcountfall10Flag,debitcountgrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(debitcountfall10_21,debitcountfall10_32,debitcountgrow10_21,debitcountgrow10_32))

# debitcount 50%
compiled7 <- compiled7 %>% mutate(debitcountfall50_21 = ifelse(debitcountper21 <= -t2,1,0),
                                  debitcountfall50_32 = ifelse(debitcountper32 <= -t2,1,0),
                                  debitcountfall50Flag = debitcountfall50_21 + debitcountfall50_32,
                                  debitcountgrow50_32 = ifelse(debitcountper32 >= t2,1,0),   
                                  debitcountgrow50_21 = ifelse(debitcountper21 >= t2,1,0),
                                  debitcountgrow50Flag = debitcountgrow50_21 + debitcountgrow50_32)

chk <- compiled7 %>% select(M1_debitcount,M2_debitcount,M3_debitcount,debitcountper21,debitcountper32,debitcountfall50_21,debitcountfall50_32,debitcountgrow50_21,
                            debitcountgrow50_32,debitcountfall50Flag,debitcountgrow50Flag)

compiled7 <- compiled7 %>% select (-c(debitcountfall50_21,debitcountfall50_32,debitcountgrow50_21,debitcountgrow50_32))

#*************************
# Debit Value

# debit value 10% *****

compiled7 <- compiled7 %>% mutate(debitvalueper21 = (M2_debitvalue-M1_debitvalue)/M1_debitvalue,
                                  debitvalueper32 = (M3_debitvalue-M2_debitvalue)/M2_debitvalue)

compiled7$debitvalueNaN  = rowSums(compiled7[,c("debitvalueper21","debitvalueper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(debitvaluefall10_21 = ifelse(debitvalueper21 <= -t1,1,0),
                                  debitvaluefall10_32 = ifelse(debitvalueper32 <= -t1,1,0),
                                  debitvaluefall10Flag = debitvaluefall10_21 + debitvaluefall10_32,
                                  debitvaluegrow10_32 = ifelse(debitvalueper32 >= t1,1,0),   
                                  debitvaluegrow10_21 = ifelse(debitvalueper21 >= t1,1,0),
                                  debitvaluegrow10Flag = debitvaluegrow10_21 + debitvaluegrow10_32)

chk <- compiled7 %>% select(M1_debitvalue,M2_debitvalue,M3_debitvalue,debitvalueNaN,debitvalueper21,debitvalueper32,debitvaluefall10_21,debitvaluefall10_32,debitvaluegrow10_21,
                            debitvaluegrow10_32,debitvaluefall10Flag,debitvaluegrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(debitvaluefall10_21,debitvaluefall10_32,debitvaluegrow10_21,debitvaluegrow10_32))

# debitvalue 50%
compiled7 <- compiled7 %>% mutate(debitvaluefall50_21 = ifelse(debitvalueper21 <= -t2,1,0),
                                  debitvaluefall50_32 = ifelse(debitvalueper32 <= -t2,1,0),
                                  debitvaluefall50Flag = debitvaluefall50_21 + debitvaluefall50_32,
                                  debitvaluegrow50_32 = ifelse(debitvalueper32 >= t2,1,0),   
                                  debitvaluegrow50_21 = ifelse(debitvalueper21 >= t2,1,0),
                                  debitvaluegrow50Flag = debitvaluegrow50_21 + debitvaluegrow50_32)

chk <- compiled7 %>% select(M1_debitvalue,M2_debitvalue,M3_debitvalue,debitvalueper21,debitvalueper32,debitvaluefall50_21,debitvaluefall50_32,debitvaluegrow50_21,
                            debitvaluegrow50_32,debitvaluefall50Flag,debitvaluegrow50Flag)

compiled7 <- compiled7 %>% select (-c(debitvaluefall50_21,debitvaluefall50_32,debitvaluegrow50_21,debitvaluegrow50_32))

#*************************
# credit count 10% *****

compiled7 <- compiled7 %>% mutate(creditcountper21 = (M2_creditcount-M1_creditcount)/M1_creditcount,
                                  creditcountper32 = (M3_creditcount-M2_creditcount)/M2_creditcount)

compiled7$creditcountNaN  = rowSums(compiled7[,c("creditcountper21","creditcountper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(creditcountfall10_21 = ifelse(creditcountper21 <= -t1,1,0),
                                  creditcountfall10_32 = ifelse(creditcountper32 <= -t1,1,0),
                                  creditcountfall10Flag = creditcountfall10_21 + creditcountfall10_32,
                                  creditcountgrow10_32 = ifelse(creditcountper32 >= t1,1,0),   
                                  creditcountgrow10_21 = ifelse(creditcountper21 >= t1,1,0),
                                  creditcountgrow10Flag = creditcountgrow10_21 + creditcountgrow10_32)

chk <- compiled7 %>% select(M1_creditcount,M2_creditcount,M3_creditcount,creditcountNaN,creditcountper21,creditcountper32,creditcountfall10_21,creditcountfall10_32,creditcountgrow10_21,
                            creditcountgrow10_32,creditcountfall10Flag,creditcountgrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(creditcountfall10_21,creditcountfall10_32,creditcountgrow10_21,creditcountgrow10_32))

# creditcount 50%
compiled7 <- compiled7 %>% mutate(creditcountfall50_21 = ifelse(creditcountper21 <= -t2,1,0),
                                  creditcountfall50_32 = ifelse(creditcountper32 <= -t2,1,0),
                                  creditcountfall50Flag = creditcountfall50_21 + creditcountfall50_32,
                                  creditcountgrow50_32 = ifelse(creditcountper32 >= t2,1,0),   
                                  creditcountgrow50_21 = ifelse(creditcountper21 >= t2,1,0),
                                  creditcountgrow50Flag = creditcountgrow50_21 + creditcountgrow50_32)

chk <- compiled7 %>% select(M1_creditcount,M2_creditcount,M3_creditcount,creditcountper21,creditcountper32,creditcountfall50_21,creditcountfall50_32,creditcountgrow50_21,
                            creditcountgrow50_32,creditcountfall50Flag,creditcountgrow50Flag)

compiled7 <- compiled7 %>% select (-c(creditcountfall50_21,creditcountfall50_32,creditcountgrow50_21,creditcountgrow50_32))


#*************************
# credit value 10% *****

compiled7 <- compiled7 %>% mutate(creditvalueper21 = (M2_creditvalue-M1_creditvalue)/M1_creditvalue,
                                  creditvalueper32 = (M3_creditvalue-M2_creditvalue)/M2_creditvalue)

compiled7$creditvalueNaN  = rowSums(compiled7[,c("creditvalueper21","creditvalueper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(creditvaluefall10_21 = ifelse(creditvalueper21 <= -t1,1,0),
                                  creditvaluefall10_32 = ifelse(creditvalueper32 <= -t1,1,0),
                                  creditvaluefall10Flag = creditvaluefall10_21 + creditvaluefall10_32,
                                  creditvaluegrow10_32 = ifelse(creditvalueper32 >= t1,1,0),   
                                  creditvaluegrow10_21 = ifelse(creditvalueper21 >= t1,1,0),
                                  creditvaluegrow10Flag = creditvaluegrow10_21 + creditvaluegrow10_32)

chk <- compiled7 %>% select(M1_creditvalue,M2_creditvalue,M3_creditvalue,creditvalueNaN,creditvalueper21,creditvalueper32,creditvaluefall10_21,creditvaluefall10_32,creditvaluegrow10_21,
                            creditvaluegrow10_32,creditvaluefall10Flag,creditvaluegrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(creditvaluefall10_21,creditvaluefall10_32,creditvaluegrow10_21,creditvaluegrow10_32))

# creditvalue 50%
compiled7 <- compiled7 %>% mutate(creditvaluefall50_21 = ifelse(creditvalueper21 <= -t2,1,0),
                                  creditvaluefall50_32 = ifelse(creditvalueper32 <= -t2,1,0),
                                  creditvaluefall50Flag = creditvaluefall50_21 + creditvaluefall50_32,
                                  creditvaluegrow50_32 = ifelse(creditvalueper32 >= t2,1,0),   
                                  creditvaluegrow50_21 = ifelse(creditvalueper21 >= t2,1,0),
                                  creditvaluegrow50Flag = creditvaluegrow50_21 + creditvaluegrow50_32)

chk <- compiled7 %>% select(M1_creditvalue,M2_creditvalue,M3_creditvalue,creditvalueper21,creditvalueper32,creditvaluefall50_21,creditvaluefall50_32,creditvaluegrow50_21,
                            creditvaluegrow50_32,creditvaluefall50Flag,creditvaluegrow50Flag)

compiled7 <- compiled7 %>% select (-c(creditvaluefall50_21,creditvaluefall50_32,creditvaluegrow50_21,creditvaluegrow50_32))

#*************************
# pos ecom count
# posecom count 10% *****

compiled7 <- compiled7 %>% mutate(posecomcountper21 = (M2_posecomcount-M1_posecomcount)/M1_posecomcount,
                                  posecomcountper32 = (M3_posecomcount-M2_posecomcount)/M2_posecomcount)

compiled7$posecomcountNaN  = rowSums(compiled7[,c("posecomcountper21","posecomcountper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(posecomcountfall10_21 = ifelse(posecomcountper21 <= -t1,1,0),
                                  posecomcountfall10_32 = ifelse(posecomcountper32 <= -t1,1,0),
                                  posecomcountfall10Flag = posecomcountfall10_21 + posecomcountfall10_32,
                                  posecomcountgrow10_32 = ifelse(posecomcountper32 >= t1,1,0),   
                                  posecomcountgrow10_21 = ifelse(posecomcountper21 >= t1,1,0),
                                  posecomcountgrow10Flag = posecomcountgrow10_21 + posecomcountgrow10_32)

chk <- compiled7 %>% select(M1_posecomcount,M2_posecomcount,M3_posecomcount,posecomcountNaN,posecomcountper21,posecomcountper32,posecomcountfall10_21,posecomcountfall10_32,posecomcountgrow10_21,
                            posecomcountgrow10_32,posecomcountfall10Flag,posecomcountgrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(posecomcountfall10_21,posecomcountfall10_32,posecomcountgrow10_21,posecomcountgrow10_32))

# posecomcount 50%
compiled7 <- compiled7 %>% mutate(posecomcountfall50_21 = ifelse(posecomcountper21 <= -t2,1,0),
                                  posecomcountfall50_32 = ifelse(posecomcountper32 <= -t2,1,0),
                                  posecomcountfall50Flag = posecomcountfall50_21 + posecomcountfall50_32,
                                  posecomcountgrow50_32 = ifelse(posecomcountper32 >= t2,1,0),   
                                  posecomcountgrow50_21 = ifelse(posecomcountper21 >= t2,1,0),
                                  posecomcountgrow50Flag = posecomcountgrow50_21 + posecomcountgrow50_32)

chk <- compiled7 %>% select(M1_posecomcount,M2_posecomcount,M3_posecomcount,posecomcountper21,posecomcountper32,posecomcountfall50_21,posecomcountfall50_32,posecomcountgrow50_21,
                            posecomcountgrow50_32,posecomcountfall50Flag,posecomcountgrow50Flag)

compiled7 <- compiled7 %>% select (-c(posecomcountfall50_21,posecomcountfall50_32,posecomcountgrow50_21,posecomcountgrow50_32))

# pos ecom value
# posecom value 10% *****

compiled7 <- compiled7 %>% mutate(posecomvalueper21 = (M2_posecomvalue-M1_posecomvalue)/M1_posecomvalue,
                                  posecomvalueper32 = (M3_posecomvalue-M2_posecomvalue)/M2_posecomvalue)

compiled7$posecomvalueNaN  = rowSums(compiled7[,c("posecomvalueper21","posecomvalueper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(posecomvaluefall10_21 = ifelse(posecomvalueper21 <= -t1,1,0),
                                  posecomvaluefall10_32 = ifelse(posecomvalueper32 <= -t1,1,0),
                                  posecomvaluefall10Flag = posecomvaluefall10_21 + posecomvaluefall10_32,
                                  posecomvaluegrow10_32 = ifelse(posecomvalueper32 >= t1,1,0),   
                                  posecomvaluegrow10_21 = ifelse(posecomvalueper21 >= t1,1,0),
                                  posecomvaluegrow10Flag = posecomvaluegrow10_21 + posecomvaluegrow10_32)

chk <- compiled7 %>% select(M1_posecomvalue,M2_posecomvalue,M3_posecomvalue,posecomvalueNaN,posecomvalueper21,posecomvalueper32,posecomvaluefall10_21,posecomvaluefall10_32,posecomvaluegrow10_21,
                            posecomvaluegrow10_32,posecomvaluefall10Flag,posecomvaluegrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(posecomvaluefall10_21,posecomvaluefall10_32,posecomvaluegrow10_21,posecomvaluegrow10_32))

# posecomvalue 50%
compiled7 <- compiled7 %>% mutate(posecomvaluefall50_21 = ifelse(posecomvalueper21 <= -t2,1,0),
                                  posecomvaluefall50_32 = ifelse(posecomvalueper32 <= -t2,1,0),
                                  posecomvaluefall50Flag = posecomvaluefall50_21 + posecomvaluefall50_32,
                                  posecomvaluegrow50_32 = ifelse(posecomvalueper32 >= t2,1,0),   
                                  posecomvaluegrow50_21 = ifelse(posecomvalueper21 >= t2,1,0),
                                  posecomvaluegrow50Flag = posecomvaluegrow50_21 + posecomvaluegrow50_32)

chk <- compiled7 %>% select(M1_posecomvalue,M2_posecomvalue,M3_posecomvalue,posecomvalueper21,posecomvalueper32,posecomvaluefall50_21,posecomvaluefall50_32,posecomvaluegrow50_21,
                            posecomvaluegrow50_32,posecomvaluefall50Flag,posecomvaluegrow50Flag)

compiled7 <- compiled7 %>% select (-c(posecomvaluefall50_21,posecomvaluefall50_32,posecomvaluegrow50_21,posecomvaluegrow50_32))

#*************************
# mb logins
compiled7 <- compiled7 %>% mutate(mbloginsper21 = (M2_mblogins-M1_mblogins)/M1_mblogins,
                                  mbloginsper32 = (M3_mblogins-M2_mblogins)/M2_mblogins)

compiled7$mbloginsNaN  = rowSums(compiled7[,c("mbloginsper21","mbloginsper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(mbloginsfall10_21 = ifelse(mbloginsper21 <= -t1,1,0),
                                  mbloginsfall10_32 = ifelse(mbloginsper32 <= -t1,1,0),
                                  mbloginsfall10Flag = mbloginsfall10_21 + mbloginsfall10_32,
                                  mbloginsgrow10_32 = ifelse(mbloginsper32 >= t1,1,0),   
                                  mbloginsgrow10_21 = ifelse(mbloginsper21 >= t1,1,0),
                                  mbloginsgrow10Flag = mbloginsgrow10_21 + mbloginsgrow10_32)

chk <- compiled7 %>% select(M1_mblogins,M2_mblogins,M3_mblogins,mbloginsNaN,mbloginsper21,mbloginsper32,mbloginsfall10_21,mbloginsfall10_32,mbloginsgrow10_21,
                            mbloginsgrow10_32,mbloginsfall10Flag,mbloginsgrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(mbloginsfall10_21,mbloginsfall10_32,mbloginsgrow10_21,mbloginsgrow10_32))

# mblogins 50%
compiled7 <- compiled7 %>% mutate(mbloginsfall50_21 = ifelse(mbloginsper21 <= -t2,1,0),
                                  mbloginsfall50_32 = ifelse(mbloginsper32 <= -t2,1,0),
                                  mbloginsfall50Flag = mbloginsfall50_21 + mbloginsfall50_32,
                                  mbloginsgrow50_32 = ifelse(mbloginsper32 >= t2,1,0),   
                                  mbloginsgrow50_21 = ifelse(mbloginsper21 >= t2,1,0),
                                  mbloginsgrow50Flag = mbloginsgrow50_21 + mbloginsgrow50_32)

chk <- compiled7 %>% select(M1_mblogins,M2_mblogins,M3_mblogins,mbloginsper21,mbloginsper32,mbloginsfall50_21,mbloginsfall50_32,mbloginsgrow50_21,
                            mbloginsgrow50_32,mbloginsfall50Flag,mbloginsgrow50Flag)

compiled7 <- compiled7 %>% select (-c(mbloginsfall50_21,mbloginsfall50_32,mbloginsgrow50_21,mbloginsgrow50_32))

#*************************
#ib logins 10% *****

compiled7 <- compiled7 %>% mutate(ibloginsper21 = (M2_iblogins-M1_iblogins)/M1_iblogins,
                                  ibloginsper32 = (M3_iblogins-M2_iblogins)/M2_iblogins)

compiled7$ibloginsNaN  = rowSums(compiled7[,c("ibloginsper21","ibloginsper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(ibloginsfall10_21 = ifelse(ibloginsper21 <= -t1,1,0),
                                  ibloginsfall10_32 = ifelse(ibloginsper32 <= -t1,1,0),
                                  ibloginsfall10Flag = ibloginsfall10_21 + ibloginsfall10_32,
                                  ibloginsgrow10_32 = ifelse(ibloginsper32 >= t1,1,0),   
                                  ibloginsgrow10_21 = ifelse(ibloginsper21 >= t1,1,0),
                                  ibloginsgrow10Flag = ibloginsgrow10_21 + ibloginsgrow10_32)

chk <- compiled7 %>% select(M1_iblogins,M2_iblogins,M3_iblogins,ibloginsNaN,ibloginsper21,ibloginsper32,ibloginsfall10_21,ibloginsfall10_32,ibloginsgrow10_21,
                            ibloginsgrow10_32,ibloginsfall10Flag,ibloginsgrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(ibloginsfall10_21,ibloginsfall10_32,ibloginsgrow10_21,ibloginsgrow10_32))

# iblogins 50%
compiled7 <- compiled7 %>% mutate(ibloginsfall50_21 = ifelse(ibloginsper21 <= -t2,1,0),
                                  ibloginsfall50_32 = ifelse(ibloginsper32 <= -t2,1,0),
                                  ibloginsfall50Flag = ibloginsfall50_21 + ibloginsfall50_32,
                                  ibloginsgrow50_32 = ifelse(ibloginsper32 >= t2,1,0),   
                                  ibloginsgrow50_21 = ifelse(ibloginsper21 >= t2,1,0),
                                  ibloginsgrow50Flag = ibloginsgrow50_21 + ibloginsgrow50_32)

chk <- compiled7 %>% select(M1_iblogins,M2_iblogins,M3_iblogins,ibloginsper21,ibloginsper32,ibloginsfall50_21,ibloginsfall50_32,ibloginsgrow50_21,
                            ibloginsgrow50_32,ibloginsfall50Flag,ibloginsgrow50Flag)

compiled7 <- compiled7 %>% select (-c(ibloginsfall50_21,ibloginsfall50_32,ibloginsgrow50_21,ibloginsgrow50_32))

#*************************
# digital txns
compiled7 <- compiled7 %>% mutate(digper21 = (M2_dig-M1_dig)/M1_dig,
                                  digper32 = (M3_dig-M2_dig)/M2_dig)

compiled7$digNaN  = rowSums(compiled7[,c("digper21","digper32")] == "NaN")

compiled7[is.na(compiled7)] <- 0 # NaN converted to NA, sum of flags not coming correctly

compiled7 <- compiled7 %>% mutate(digfall10_21 = ifelse(digper21 <= -t1,1,0),
                                  digfall10_32 = ifelse(digper32 <= -t1,1,0),
                                  digfall10Flag = digfall10_21 + digfall10_32,
                                  diggrow10_32 = ifelse(digper32 >= t1,1,0),   
                                  diggrow10_21 = ifelse(digper21 >= t1,1,0),
                                  diggrow10Flag = diggrow10_21 + diggrow10_32)

chk <- compiled7 %>% select(M1_dig,M2_dig,M3_dig,digNaN,digper21,digper32,digfall10_21,digfall10_32,diggrow10_21,
                            diggrow10_32,digfall10Flag,diggrow10Flag)

# removing intermediate variables
compiled7 <- compiled7 %>% select (-c(digfall10_21,digfall10_32,diggrow10_21,diggrow10_32))

# dig 50%
compiled7 <- compiled7 %>% mutate(digfall50_21 = ifelse(digper21 <= -t2,1,0),
                                  digfall50_32 = ifelse(digper32 <= -t2,1,0),
                                  digfall50Flag = digfall50_21 + digfall50_32,
                                  diggrow50_32 = ifelse(digper32 >= t2,1,0),   
                                  diggrow50_21 = ifelse(digper21 >= t2,1,0),
                                  diggrow50Flag = diggrow50_21 + diggrow50_32)

chk <- compiled7 %>% select(M1_dig,M2_dig,M3_dig,digper21,digper32,digfall50_21,digfall50_32,diggrow50_21,
                            diggrow50_32,digfall50Flag,diggrow50Flag)

compiled7 <- compiled7 %>% select (-c(digfall50_21,digfall50_32,diggrow50_21,diggrow50_32))


#*************************
# TD closed flag
compiled7 <- compiled7 %>% mutate(TDclosed3m = ifelse(M1_closed_td >0 | M2_closed_td >0 | M3_closed_td>0,1,0))
table(compiled7$TDclosed3m)

chk <- compiled7 %>% select(M1_closed_td,M2_closed_td,M3_closed_td,TDclosed3m)

compiled7 <- compiled7 %>% select(-c(M1_closed_td,M2_closed_td,M3_closed_td))





#*************************
# Minimum bal====
library(readxl)
minbal <- read_excel("F:/Shubhi/At Risk 2.0/input/SA schemes - mab v2.xlsx")
minbal2 <- minbal %>% mutate(RBIcat = ifelse(Location == "Metro","RBI METRO",
                                             ifelse(Location == "Rural","RBI RURAL",
                                                    ifelse(Location=="Semi-Urban","RBI SEMI URBAN",
                                                           ifelse(Location == "Urban","RBI URBAN","")))))
table(minbal2$RBIcat)
minbal2$Location <- NULL; minbal2$X__1 <- NULL

minbal3null <- minbal2 %>% filter (is.na(RBIcat))
minbal3nonull <- minbal2 %>% filter (!is.na(RBIcat))

#minbal3null$`Scheme Code` <- 
minbal3nullv2 <-rbind(minbal3null,minbal3null,minbal3null,minbal3null)
minbal3nullv2$RBIcat <- NULL
#minbal3nullv2 <- minbal3nullv2 %>% arrange(`Scheme Code`)

rbi <- c("RBI METRO","RBI RURAL","RBI SEMI URBAN","RBI URBAN")
rbi2 <- rep(rbi,each=15); rbi2 # clubs each category in one place
rbi2 <- as.data.frame(rbi2)
colnames(rbi2)[1] <- "RBIcat"

minbal3nullv3 <- cbind(minbal3nullv2,rbi2)

minbal4 <- rbind(minbal3nonull,minbal3nullv3)
minbal4$key <-  paste0(minbal4$`Scheme Code`,minbal4$RBIcat)

chkduplkey <- minbal4[duplicated(minbal4$key),] 
table(chkduplkey$`Scheme Code`) # SBPSA is repeated twice, hence 8 entries

minbal5 <- minbal4[!duplicated(minbal4$key),] 
minbal5 <- minbal5[,c("key","AMB")]
minbal_use <- minbal5

table(compiled7$rbi_category_desc)
compiled7$key <- paste0(compiled7$account_scheme_code,compiled7$rbi_category_desc)
unique(minbal_use$key)

compiled8 <- dplyr::left_join(compiled7,minbal_use,by="key")

# Not maintaining min bal flag
compiled8 <- compiled8 %>% mutate (m1NOminbal = ifelse(M1_MAB < AMB,1,0),
                                   m2NOminbal = ifelse(M2_MAB < AMB,1,0),
                                   m3NOminbal = ifelse(M3_MAB < AMB,1,0),
                                   MinBalNoFlag = m1NOminbal + m2NOminbal+ m3NOminbal)

chk <- compiled8 %>% select (M1_MAB,M2_MAB,M3_MAB,AMB,m1NOminbal,m2NOminbal,m3NOminbal,MinBalNoFlag)

# less than 50% min bal req
compiled8 <- compiled8 %>% mutate (m1NOminbal50 = ifelse(M1_MAB < (0.5* AMB),1,0),
                                   m2NOminbal50 = ifelse(M2_MAB < (0.5* AMB),1,0),
                                   m3NOminbal50 = ifelse(M3_MAB < (0.5* AMB),1,0),
                                   MinBalNo50Flag = m1NOminbal50 + m2NOminbal50+ m3NOminbal50)

chk <- compiled8 %>% select (M1_MAB,M2_MAB,M3_MAB,AMB,m1NOminbal50,m2NOminbal50,m3NOminbal50,MinBalNo50Flag)

compiled8 <- compiled8 %>% select (-c(m1NOminbal,m2NOminbal,m3NOminbal,
                                      m1NOminbal50,m2NOminbal50,m3NOminbal50))
names(compiled8)
compiled8$key <- NULL

getwd()
setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")
#write.csv(compiled8,"df7_Allvars.csv",row.names = F)

# Adding credit card====
compiled9 <- fread("df7_Allvars.csv",colClasses = c(customer_code="character"))
# credit card

credit_card <- sqlQuery(conn,paste("select * from (select customer_code, credit_card,
                                   left(datename(month,balance_date),3) as [month]
                                   from al_dl_customer_master
                                   where customer_tagging = 'SA'
                                   and (revised_constitution in ('Individual','') or revised_constitution is null)
                                   and datediff(month,create_date,'2020-02-29') >= 12
                                   and active>0 and live>0
                                   and zone_name not like '%rural%'
                                   and balance_date >= '2019-04-30'
                                   and balance_date <= '2020-02-29')ss
                                   pivot (sum(credit_card) for [month] in (Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec,Jan,Feb)) as pvt"))

map <- credit_card # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9","M10","M11") #"M11" Once feb data comes in 

f1 <- left_join(compiled9,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(credit_card = ifelse(RiskMonth == "M5",M3,
                                         ifelse(RiskMonth== "M6",M4,
                                                ifelse(RiskMonth=="M7",M5,
                                                       ifelse(RiskMonth=="M8",M6,
                                                              ifelse(RiskMonth=="M9",M7,
                                                                     ifelse(RiskMonth=="M10",M8,M9)))))))
compiled9 <- f2
compiled9 <- compiled9 %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9,M10,M11))

names(compiled9)
table(compiled9$credit_card)
class(compiled9$customer_code)

setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")
#write.csv(compiled9,"df8_Allvars.csv",row.names = F)


### adding vars v2====
library(readxl)
library(Matrix)
library(car)
library(dplyr)
library(readr)
library(caret) #for confusion matrix
library(ROCR) 
library(data.table)
options(scipen = 999)

library(RODBC)
library(sqldf)  
# conn====
conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")

#raw_orig <- fread("AtRiskSAeventV1.csv",colClasses = c(customer_code ="character")) ; head(raw_orig)
raw <- fread("df8_Allvars.csv",colClasses = c(customer_code ="character"))

nrow(raw) #10.4 lakhs
table(raw$AtRisk_flag)

# > col_orig
# [1] "customer_code" "Jan19"         "Feb19"         "Mar19"         "Apr19"         "May19"         "Jun19"        
# [8] "Jul19"         "Aug19"         "Sep19"       
# > col_new
# [1] "customer_code" "M1"            "M2"            "M3"            "M4"            "M5"            "M6"           
# [8] "M7"            "M8"            "M9"               

# need to pull for extra 3 months, to get 6 months' history
# mab
mab<- sqlQuery(conn,paste("select * from 
                          (select customer_code, mab, concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month] 
                          from al_dl_customer_master
                          where balance_date >= '2019-01-31'
                          and balance_date <= '2019-09-30'
                          and update_date <> '2019-04-29 18:53:19.967')ss
                          pivot (sum(mab) for [month] in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt"))

map <- mab # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)
head(map,3)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9")
f1 <- left_join(raw,map,by="customer_code")
names(f1)

f2 <- f1 %>% mutate(P1_MAB = ifelse(RiskMonth == "M5",M1,
                                    ifelse(RiskMonth== "M6",M2,
                                           ifelse(RiskMonth=="M7",M3,
                                                  ifelse(RiskMonth=="M8",M4,
                                                         ifelse(RiskMonth=="M9",M5,
                                                                ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_MAB = ifelse(RiskMonth == "M5",M2,
                                    ifelse(RiskMonth== "M6",M3,
                                           ifelse(RiskMonth=="M7",M4,
                                                  ifelse(RiskMonth=="M8",M5,
                                                         ifelse(RiskMonth=="M9",M6,
                                                                ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_MAB= ifelse(RiskMonth == "M5",M3,
                                   ifelse(RiskMonth== "M6",M4,
                                          ifelse(RiskMonth=="M7",M5,
                                                 ifelse(RiskMonth=="M8",M6,
                                                        ifelse(RiskMonth=="M9",M7,
                                                               ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))

#  ********************************************
# debit count
debit_count <- sqlQuery(conn,paste("select * from
                                   (select a.customer_code, count(*) as debit_count, 
                                   concat(left(datename(month,tran_date),3),right(datename(year,tran_date),2)) as [month]
                                   from dbo.DL_BBB_HTD h
                                   left join al_dl_accounts a
                                   on h.account_no = a.account_number
                                   where h.part_tran_type = 'D'
                                   and h.tran_date >= '2019-01-01' --- enter starting date
                                   and h.tran_date <= '2019-09-30' -- enter end date
                                   and a.balance_date = '2019-09-30' -- change accordingly
                                   and a.closing_date is null
                                   and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                   and h.tran_particular not like  '%disbursement credit%' ---
                                   and h.tran_particular not like '%draw down credit%' --- ??
                                   and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                   and h.tran_particular not like 'REV %'
                                   and h.tran_particular not like '%reversal%'
                                   and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                   and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                   and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                   group by a.customer_code,concat(left(datename(month,tran_date),3),right(datename(year,tran_date),2))) ss
                                   pivot (sum(debit_count) for [month] in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt "))

map <- debit_count # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
head(map,3)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9") #"M11" Once feb data comes in 
head(map,3)

f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(P1_debitcount = ifelse(RiskMonth == "M5",M1,
                                           ifelse(RiskMonth== "M6",M2,
                                                  ifelse(RiskMonth=="M7",M3,
                                                         ifelse(RiskMonth=="M8",M4,
                                                                ifelse(RiskMonth=="M9",M5,
                                                                       ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_debitcount = ifelse(RiskMonth == "M5",M2,
                                           ifelse(RiskMonth== "M6",M3,
                                                  ifelse(RiskMonth=="M7",M4,
                                                         ifelse(RiskMonth=="M8",M5,
                                                                ifelse(RiskMonth=="M9",M6,
                                                                       ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_debitcount= ifelse(RiskMonth == "M5",M3,
                                          ifelse(RiskMonth== "M6",M4,
                                                 ifelse(RiskMonth=="M7",M5,
                                                        ifelse(RiskMonth=="M8",M6,
                                                               ifelse(RiskMonth=="M9",M7,
                                                                      ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))

#********************************************************88
# credit count
credit_count <- sqlQuery(conn,paste("select * from
                                    (select a.customer_code, count(*) as credit_count, 
                                    concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                                    from dbo.DL_BBB_HTD h
                                    left join al_dl_accounts a
                                    on h.account_no = a.account_number
                                    where h.part_tran_type = 'C'
                                    and h.tran_date >= '2019-01-01' --- enter starting date
                                    and h.tran_date <= '2019-09-30' -- enter end date
                                    and a.balance_date = '2019-09-30' -- change accordingly
                                    and a.closing_date is null
                                    and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                    and h.tran_particular not like  '%disbursement credit%' ---
                                    and h.tran_particular not like '%draw down credit%' --- ??
                                    and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                    and h.tran_particular not like 'REV %'
                                    and h.tran_particular not like '%reversal%'
                                    and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                    and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                    and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                    group by a.customer_code,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2))) ss
                                    pivot (sum(credit_count) for [month] in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt "))


map <- credit_count # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(P1_creditcount = ifelse(RiskMonth == "M5",M1,
                                            ifelse(RiskMonth== "M6",M2,
                                                   ifelse(RiskMonth=="M7",M3,
                                                          ifelse(RiskMonth=="M8",M4,
                                                                 ifelse(RiskMonth=="M9",M5,
                                                                        ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_creditcount = ifelse(RiskMonth == "M5",M2,
                                            ifelse(RiskMonth== "M6",M3,
                                                   ifelse(RiskMonth=="M7",M4,
                                                          ifelse(RiskMonth=="M8",M5,
                                                                 ifelse(RiskMonth=="M9",M6,
                                                                        ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_creditcount= ifelse(RiskMonth == "M5",M3,
                                           ifelse(RiskMonth== "M6",M4,
                                                  ifelse(RiskMonth=="M7",M5,
                                                         ifelse(RiskMonth=="M8",M6,
                                                                ifelse(RiskMonth=="M9",M7,
                                                                       ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))

#****************************************************************
# Debit value
debit_value <- sqlQuery(conn,paste("select * from
                                   (select a.customer_code, sum(h.tran_amt) as debit_amt,
                                   concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                                   from dbo.DL_BBB_HTD h
                                   left join al_dl_accounts a
                                   on h.account_no = a.account_number
                                   where h.part_tran_type = 'D'
                                   and h.tran_date >= '2019-01-01' --- enter starting date
                                   and h.tran_date <= '2019-09-30' -- enter end date
                                   and a.balance_date = '2019-09-30' -- change accordingly
                                   and a.closing_date is null
                                   and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                   and h.tran_particular not like  '%disbursement credit%' ---
                                   and h.tran_particular not like '%draw down credit%' --- ??
                                   and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                   and h.tran_particular not like 'REV %'
                                   and h.tran_particular not like '%reversal%'
                                   and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                   and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                   and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                   group by a.customer_code,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2))) ss
                                   pivot (sum(debit_amt) for [month] in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt "))

map <- debit_value # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(P1_debitvalue = ifelse(RiskMonth == "M5",M1,
                                           ifelse(RiskMonth== "M6",M2,
                                                  ifelse(RiskMonth=="M7",M3,
                                                         ifelse(RiskMonth=="M8",M4,
                                                                ifelse(RiskMonth=="M9",M5,
                                                                       ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_debitvalue = ifelse(RiskMonth == "M5",M2,
                                           ifelse(RiskMonth== "M6",M3,
                                                  ifelse(RiskMonth=="M7",M4,
                                                         ifelse(RiskMonth=="M8",M5,
                                                                ifelse(RiskMonth=="M9",M6,
                                                                       ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_debitvalue= ifelse(RiskMonth == "M5",M3,
                                          ifelse(RiskMonth== "M6",M4,
                                                 ifelse(RiskMonth=="M7",M5,
                                                        ifelse(RiskMonth=="M8",M6,
                                                               ifelse(RiskMonth=="M9",M7,
                                                                      ifelse(RiskMonth=="M10",M8,M9)))))))
compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))




#***************************************
# credit value
credit_value <- sqlQuery(conn,paste("select * from 
                                    (select a.customer_code, sum(h.tran_amt) as credit_amt,
                                    concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                                    from dbo.DL_BBB_HTD h
                                    left join al_dl_accounts a
                                    on h.account_no = a.account_number
                                    where h.part_tran_type = 'C'
                                    and h.tran_date >= '2019-01-01' --- enter starting date
                                    and h.tran_date <= '2019-09-30' -- enter end date
                                    and a.balance_date = '2019-09-30' -- change accordingly
                                    and a.closing_date is null
                                    and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                    and h.tran_particular not like  '%disbursement credit%' ---
                                    and h.tran_particular not like '%draw down credit%' --- ??
                                    and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                    and h.tran_particular not like 'REV %'
                                    and h.tran_particular not like '%reversal%'
                                    and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                    and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                    and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                    group by a.customer_code,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2))) ss
                                    pivot (sum(credit_amt) for [month] in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt"))

map <- credit_value
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9") #"M11" Once feb data comes in 


f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(P1_creditvalue = ifelse(RiskMonth == "M5",M1,
                                            ifelse(RiskMonth== "M6",M2,
                                                   ifelse(RiskMonth=="M7",M3,
                                                          ifelse(RiskMonth=="M8",M4,
                                                                 ifelse(RiskMonth=="M9",M5,
                                                                        ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_creditvalue = ifelse(RiskMonth == "M5",M2,
                                            ifelse(RiskMonth== "M6",M3,
                                                   ifelse(RiskMonth=="M7",M4,
                                                          ifelse(RiskMonth=="M8",M5,
                                                                 ifelse(RiskMonth=="M9",M6,
                                                                        ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_creditvalue= ifelse(RiskMonth == "M5",M3,
                                           ifelse(RiskMonth== "M6",M4,
                                                  ifelse(RiskMonth=="M7",M5,
                                                         ifelse(RiskMonth=="M8",M6,
                                                                ifelse(RiskMonth=="M9",M7,
                                                                       ifelse(RiskMonth=="M10",M8,M9)))))))
compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))


#************************************************
# mb logins
logins_mb <- sqlQuery(conn,paste("select * from
                                 (select customer_code, mob_mtd_login_count,
                                 concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                                 from al_dl_customer_master 
                                 where balance_date >= '2019-01-31'
                                 and balance_date <= '2019-09-30'
                                 and update_date <> '2019-04-29 18:53:19.967'
                                 /*union all
                                 select customer_code, mob_mtd_login_count,left((datename(month,balance_date)),3) as [month]
                                 from dl_customer_master */
                                 )ss
                                 pivot(sum(mob_mtd_login_count) for [month] in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt   "))

map <- logins_mb # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9") #"M11" Once feb data comes in 
f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(P1_mblogins = ifelse(RiskMonth == "M5",M1,
                                         ifelse(RiskMonth== "M6",M2,
                                                ifelse(RiskMonth=="M7",M3,
                                                       ifelse(RiskMonth=="M8",M4,
                                                              ifelse(RiskMonth=="M9",M5,
                                                                     ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_mblogins = ifelse(RiskMonth == "M5",M2,
                                         ifelse(RiskMonth== "M6",M3,
                                                ifelse(RiskMonth=="M7",M4,
                                                       ifelse(RiskMonth=="M8",M5,
                                                              ifelse(RiskMonth=="M9",M6,
                                                                     ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_mblogins= ifelse(RiskMonth == "M5",M3,
                                        ifelse(RiskMonth== "M6",M4,
                                               ifelse(RiskMonth=="M7",M5,
                                                      ifelse(RiskMonth=="M8",M6,
                                                             ifelse(RiskMonth=="M9",M7,
                                                                    ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))


logins_ib <- sqlQuery(conn,paste("select * from
                                 (select customer_code, ib_mtd_login_count,
                                 concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                                 from al_dl_customer_master 
                                 where balance_date >= '2019-01-31'
                                 and balance_date <= '2019-09-30'
                                 and update_date <> '2019-04-29 18:53:19.967' 
                                 /*union all
                                 select customer_code, ib_mtd_login_count,left((datename(month,balance_date)),3) as [month]
                                 from dl_customer_master */
                                 )ss
                                 pivot(sum(ib_mtd_login_count) for [month] in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt   "))

map <- logins_ib # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9") #"M11" Once feb data comes in 
f1 <- left_join(compiled,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(P1_iblogins = ifelse(RiskMonth == "M5",M1,
                                         ifelse(RiskMonth== "M6",M2,
                                                ifelse(RiskMonth=="M7",M3,
                                                       ifelse(RiskMonth=="M8",M4,
                                                              ifelse(RiskMonth=="M9",M5,
                                                                     ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_iblogins = ifelse(RiskMonth == "M5",M2,
                                         ifelse(RiskMonth== "M6",M3,
                                                ifelse(RiskMonth=="M7",M4,
                                                       ifelse(RiskMonth=="M8",M5,
                                                              ifelse(RiskMonth=="M9",M6,
                                                                     ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_iblogins= ifelse(RiskMonth == "M5",M3,
                                        ifelse(RiskMonth== "M6",M4,
                                               ifelse(RiskMonth=="M7",M5,
                                                      ifelse(RiskMonth=="M8",M6,
                                                             ifelse(RiskMonth=="M9",M7,
                                                                    ifelse(RiskMonth=="M10",M8,M9)))))))

compiled <- f2
compiled <- compiled %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))


compiled2 <- compiled

# digital txn 
dig1 <- sqlQuery(conn,paste("select * from (
                            /*select customer_code, 
                            left(datename(month,balance_date),3) as balance_month,
                            (isnull(netbanking_usage,0) + isnull(mb_usage,0) ) as digital_txns
                            from dl_customer_master
                            union all */
                            select customer_code,
                            concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as balance_month,
                            (isnull(netbanking_usage,0) + isnull(mb_usage,0)) as digital_txns
                            from al_dl_customer_master
                            where balance_date >= '2019-01-31'
                            and balance_date <= '2019-09-30'
                            and update_date <> '2019-04-29 18:53:19.967' ) ss  --- change month accordingly *****
                            pivot (sum(digital_txns) for balance_month in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt  ---change month accordingly****"))
dig1$customer_code <- as.character(dig1$customer_code)

# upi_raw
upi_raw <- sqlQuery(conn,paste("select * from 
                               (select a.customer_code, count(*) as UPI_debits, 
                               concat(left(datename(month,b.creation_ts),3),right(datename(year,b.creation_ts),2)) as txn_month
                               from dbo.BAAS_UPI_TXNS b
                               left join dl_accounts a 
                               on b.bank_ac_number = a.account_number
                               where b.creation_ts >= '2019-01-01' 
                               and b.creation_ts <= '2019-09-30'
                               and b.payer_payee_flag='payer' 
                               group by a.customer_code,concat(left(datename(month,b.creation_ts),3),right(datename(year,b.creation_ts),2))) ss
                               pivot (sum(UPI_debits) for txn_month in (Jan19,Feb19,Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19)) as pvt"))

upi_raw$customer_code <- as.character(upi_raw$customer_code)

# keeping only cx that came in the rules we chose earlier
upi_raw2 <- upi_raw %>% filter (customer_code %in% dig1$customer_code)

# appending upi details to total cx txn details
total_txns_withUPI <- rbind(dig1,upi_raw2)
total_txns_withUPI2 <- total_txns_withUPI
total_txns_withUPI2[is.na(total_txns_withUPI2)] <- 0  # converting NAs to 0, for aggregation

total_txns_withUPI3 <- total_txns_withUPI2 %>% group_by(customer_code) %>% summarise_all(funs(sum))


# adding total digital txn details (including UPI)
map <- total_txns_withUPI3 # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","M1","M2","M3","M4","M5","M6","M7","M8","M9") #"M11" Once feb data comes in 
f1 <- left_join(compiled2,map,by="customer_code")
names(f1)
f2 <- f1 %>% mutate(P1_dig = ifelse(RiskMonth == "M5",M1,
                                    ifelse(RiskMonth== "M6",M2,
                                           ifelse(RiskMonth=="M7",M3,
                                                  ifelse(RiskMonth=="M8",M4,
                                                         ifelse(RiskMonth=="M9",M5,
                                                                ifelse(RiskMonth=="M10",M6,M7)))))),
                    P2_dig = ifelse(RiskMonth == "M5",M2,
                                    ifelse(RiskMonth== "M6",M3,
                                           ifelse(RiskMonth=="M7",M4,
                                                  ifelse(RiskMonth=="M8",M5,
                                                         ifelse(RiskMonth=="M9",M6,
                                                                ifelse(RiskMonth=="M10",M7,M8)))))),
                    P3_dig= ifelse(RiskMonth == "M5",M3,
                                   ifelse(RiskMonth== "M6",M4,
                                          ifelse(RiskMonth=="M7",M5,
                                                 ifelse(RiskMonth=="M8",M6,
                                                        ifelse(RiskMonth=="M9",M7,
                                                               ifelse(RiskMonth=="M10",M8,M9)))))))

compiled2 <- f2
compiled2 <- compiled2 %>% select (-c(M1,M2,M3,M4,M5,M6,M7,M8,M9))

setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")

write.csv(compiled2,"df9_valuesfor6m.csv",row.names = F)

setdiff(colnames(compiled2),colnames(raw))


#=== loop ph======

library(fread)
library(data.table)
setwd("F:\\FlatFiles_Model\\ph\\")
list.files()

# ph
ph <- fread("PH_APRIL_19.csv",colClasses = c(customer_code="character"))
names(ph)
ph1 <- ph %>% select (customer_code,Life_Insurance,UPH,TPH)
colnames(ph1) <- paste0(colnames(ph1),"_M1")
colnames(ph1)[1] <- "customer_code"

# needed for M3s
ph_needed <- c("PH_JUNE_FILE_19.csv","PH_JULY'19.csv", "PH_AUG19.csv",
               "PH_september_19.csv","PH_OCT'19.csv","PH_NOV'19.csv","PH_DECEMBER_19.csv")

#ph_needed <- c("PH_JULY'19.csv","PH_AUG19.csv")
library(dplyr)
ph <- fread("PH_JUNE_FILE_19.csv",colClasses = c(customer_code="character"))
ph1 <- ph %>% select (customer_code,Life_Insurance,UPH,TPH)
colnames(ph1) <- paste0(colnames(ph1),"_M1")
colnames(ph1)[1] <- "customer_code"

phcompile <- left_join(uniq_cx,ph1,by="customer_code")

uniq_cx$customer_code <- as.character(uniq_cx$customer_code)
i=2

for (fnames in ph_needed){
  ph <- fread(fnames,colClasses = c(customer_code="character"))
  ph1 <- ph %>% select (customer_code,Life_Insurance,UPH,TPH)
  colnames(ph1) <- paste0(colnames(ph1),"_M",i)
  colnames(ph1)[1] <- "customer_code"
  
  phcompile <- left_join(phcompile,ph1,by="customer_code")
  i = i+1
}


###  SA prediction ====
# Load packages
library(readxl); library(writexl)
library(Matrix)
library(car)
library(dplyr)
library(readr)
library(caret) #for confusion matrix
library(ROCR) 
library(data.table)
options(scipen = 999)

# read df====
setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\wip")
f1 <- fread("df9_valuesfor6m.csv",colClasses = c(customer_code="character",account_no="character",account_number="character"))
names(f1)
str(f1,list.len= ncol(f1))

snippet <- f1[1:50,]
#write_xlsx(snippet,"snippetdf_with6m.xlsx")
names(f1)

# Filtering ====
# mass & Aspire only
table(f1$aspire_flag); table(f1$signature_flag) ;table(f1$insignia_flag); table(f1$abacus_flag)

f2 <- f1 %>% filter (#aspire_flag == "N" & # commented this out, including Aspire 
  signature_flag == "N" &
    insignia_flag == "N" &
    is.na(abacus_flag))
nrow(f2) # 645265 with only mass; 766265 with Aspire
# only one sa account
table(f2$count_sa); table(f2$count_ca); table(f2$aspire_flag) # 1.2 lakh Aspire

f2 <- f2 %>% filter (count_sa == 1)
nrow(f2) # 728036

# one SA & no ca account
f2 <- f2 %>% filter (count_ca == 0)
nrow(f2) # 707826

table(f2$active) # 1 , cx has one active account, which is a SA account
table(f2$live) # 1 
table(f2$count_deposits) # can have multiple TDs
table(f2$inactive); table(f2$dormant)


# Filter on BBB business segments******
f2 <- f2 %>% filter (business_segment %in% c(1205,1301,1302,1303,1304,1305,1306,1308,1309,1315,1316,1318,1319))
nrow(f2) # 701495
# just checks
table(f2$zone_name) # no rural zones
table(f2$revised_constitution)
table(f2$business_segment)

names(f2)
library(lubridate)
class(f2$create_date); class(f2$first_txn_Date)

chk <- f2[,c("create_date","first_txn_Date")]
f2$create_date <- ymd(f2$create_date) ; f2$first_txn_Date <- ymd(f2$first_txn_Date)

# creating variable daysFirstTxn
f2 <- f2 %>% mutate(daysFirstTxn = first_txn_Date- create_date)
chk2 <- f2[,c("create_date","first_txn_Date","daysFirstTxn")]
min(f2$first_txn_Date,na.rm=T)
count(chk2[chk2$daysFirstTxn<0,])
count(chk2[chk2$daysFirstTxn>365,])
count(chk2[chk2$daysFirstTxn==26694,])

names(f2)

max(f2$create_date)


# Checking NAs
colSums(is.na(f2))
chkNA <- f2 %>% filter (is.na(MinBalNoFlag) | is.na(MinBalNo50Flag))
table(chkNA$account_scheme_code)
table(chkNA$rbi_category_desc)
table(chkNA$account_scheme_code,chkNA$rbi_category_desc)

# Some scheme codes are not in the min bal file, SBSTF does not have a min bal requirement
# rest can be removed
chkNA2 <- chkNA %>% filter (account_scheme_code != 'SBSTF'); nrow(chkNA2) # can remove these 595 records

# vintage check
vintagechk <- f2 %>% group_by(RiskMonth) %>% summarize(create_dateMin = min(create_date),
                                                       create_dateMax = max(create_date))
class(f2$create_date)
# Aug-19	Sep-19	Oct-19	Nov-19	Dec-19	Jan-20	Feb-20  # Risk month
# M5	    M6	    M7	    M8	      M9	    M10	    M11

# cx should have spent a year at time of training month, ie, M3, so, 2 months prior to the risk month

f21 <- f2 %>% mutate(fixedDate = ifelse(RiskMonth == "M5","2019-06-30",
                                        ifelse(RiskMonth == "M6","2019-07-31",
                                               ifelse(RiskMonth=="M7","2019-08-31",
                                                      ifelse(RiskMonth=="M8","2019-09-30",
                                                             ifelse(RiskMonth=="M9","2019-10-31",
                                                                    ifelse(RiskMonth=="M10","2019-11-30","2019-12-31")))))))


f21$fixedDate <- ymd(f21$fixedDate)
class(f21$fixedDate)

f21 <- f21 %>% mutate(Vintage = fixedDate - create_date)
class(f21$Vintage)

chkvar <- f21[,c("RiskMonth","create_date","fixedDate","Vintage")]
chkvar2 <- chkvar %>% filter (Vintage>=365)
nrow(f21) # 701495
f22 <- f21 %>% filter (Vintage >= 365)
nrow(f22) # 651521
min(f21$Vintage)
min(f22$Vintage)

vintagechk2 <- f22 %>% group_by(RiskMonth) %>% summarize(create_dateMin = min(create_date),
                                                         create_dateMax = max(create_date))


# Imputing====
f3<- f22

# Missing value
# RBI category, imputing with Mode
table(f3$rbi_category_desc)
max(f3$rbi_category_desc,na.rm = T)
colSums(is.na(f3)) # 22 NAs
f3$rbi_category_desc <- ifelse(f3$rbi_category_desc == "0"| is.na(f3$rbi_category_desc),max(f3$rbi_category_desc,na.rm=T),f3$rbi_category_desc )
table(f3$rbi_category_desc)

# SBSTF min bal flag, make it 0; not reqd to maintain min bal 
table(f3$MinBalNo50Flag)
table(f3$MinBalNoFlag)
f3 <- f3 %>% mutate(MinBalNoFlag = ifelse(account_scheme_code == "SBSTF" & is.na(MinBalNoFlag),0,MinBalNoFlag),
                    MinBalNo50Flag = ifelse(account_scheme_code == "SBSTF" & is.na(MinBalNo50Flag),0,MinBalNo50Flag))
table(f3$MinBalNo50Flag)
table(f3$MinBalNoFlag)

chkNA <- f3 %>% filter (is.na(MinBalNoFlag) | is.na(MinBalNo50Flag))
table(chkNA$account_scheme_code); nrow(chkNA)

# filtering out those NA cases
f3 <- f3 %>% filter (!is.na(MinBalNoFlag))
nrow(f22)- nrow(f3) # removed those 630 cases

# Dealing with Inf====
# Converting denominator to 1, where we have infinity as % change

f31 <- f3 %>% mutate(MABper21 = ifelse(is.infinite(MABper21),((M2_MAB-M1_MAB)/(M1_MAB+1)),MABper21),
                     MABper32 = ifelse(is.infinite(MABper32),((M3_MAB-M2_MAB)/(M2_MAB+1)),MABper32))

f32 <- f31 %>% filter (M2_MAB==0)

rm(f32)
f3perchk <- f3 %>% select(c(contains("per"))) 
names(f3perchk)

f31 <- f3 %>% mutate(MABper21 = ifelse(is.infinite(MABper21),((M2_MAB-M1_MAB)/(M1_MAB+1)),MABper21),
                     MABper32 = ifelse(is.infinite(MABper32),((M3_MAB-M2_MAB)/(M2_MAB+1)),MABper32),
                     debitcountper21 = ifelse(is.infinite(debitcountper21),((M2_debitcount-M1_debitcount)/(M1_debitcount+1)),debitcountper21),
                     debitcountper32 = ifelse(is.infinite(debitcountper32),((M3_debitcount-M2_debitcount)/(M2_debitcount+1)),debitcountper32),
                     debitvalueper21 = ifelse(is.infinite(debitvalueper21),((M2_debitvalue-M1_debitvalue)/(M1_debitvalue+1)),debitvalueper21),
                     debitvalueper32 = ifelse(is.infinite(debitvalueper32),((M3_debitvalue-M2_debitvalue)/(M2_debitvalue+1)),debitvalueper32),
                     creditcountper21 = ifelse(is.infinite(creditcountper21),((M2_creditcount-M1_creditcount)/(M1_creditcount+1)),creditcountper21),
                     creditcountper32 = ifelse(is.infinite(creditcountper32),((M3_creditcount-M2_creditcount)/(M2_creditcount+1)),creditcountper32),
                     creditvalueper21 = ifelse(is.infinite(creditvalueper21),((M2_creditvalue-M1_creditvalue)/(M1_creditvalue+1)),creditvalueper21),
                     creditvalueper32 = ifelse(is.infinite(creditvalueper32),((M3_creditvalue-M2_creditvalue)/(M2_creditvalue+1)),creditvalueper32),
                     posecomcountper21 = ifelse(is.infinite(posecomcountper21),((M2_posecomcount-M1_posecomcount)/(M1_posecomcount+1)),posecomcountper21),
                     posecomcountper32 = ifelse(is.infinite(posecomcountper32),((M3_posecomcount-M2_posecomcount)/(M2_posecomcount+1)),posecomcountper32),
                     posecomvalueper21 = ifelse(is.infinite(posecomvalueper21),((M2_posecomvalue-M1_posecomvalue)/(M1_posecomvalue+1)),posecomvalueper21),
                     posecomvalueper32 = ifelse(is.infinite(posecomvalueper32),((M3_posecomvalue-M2_posecomvalue)/(M2_posecomvalue+1)),posecomvalueper32),
                     mbloginsper21 = ifelse(is.infinite(mbloginsper21),((M2_mblogins-M1_mblogins)/(M1_mblogins+1)),mbloginsper21),
                     mbloginsper32 = ifelse(is.infinite(mbloginsper32),((M3_mblogins-M2_mblogins)/(M2_mblogins+1)),mbloginsper32),
                     ibloginsper21 = ifelse(is.infinite(ibloginsper21),((M2_iblogins-M1_iblogins)/(M1_iblogins+1)),ibloginsper21),
                     ibloginsper32 = ifelse(is.infinite(ibloginsper32),((M3_iblogins-M2_iblogins)/(M2_iblogins+1)),ibloginsper32),
                     digper21 = ifelse(is.infinite(digper21),((M2_dig-M1_dig)/(M1_dig+1)),digper21),
                     digper32 = ifelse(is.infinite(digper32),((M3_dig-M2_dig)/(M2_dig+1)),digper32))

f3<- f31

# NAs in credit card column
table(f3$credit_card)
f3$credit_card <- ifelse(is.na(f3$credit_card),0,f3$credit_card) # or do we want to make it -1?

f32 <- f3 %>% mutate(MABperM1P3 = ifelse((P3_MAB==0),((M1_MAB-P3_MAB)/(P3_MAB+1)),(M1_MAB-P3_MAB)/P3_MAB),
                     MABperP32 = ifelse((P2_MAB==0),((P3_MAB-P2_MAB)/(P2_MAB+1)),((P3_MAB-P2_MAB)/P2_MAB)),
                     MABperP21 = ifelse((P1_MAB==0),((P2_MAB-P1_MAB)/(P1_MAB+1)),((P2_MAB-P1_MAB)/P1_MAB)),
                     debitcountperM1P3 = ifelse((P3_debitcount==0),((M1_debitcount-P3_debitcount)/(P3_debitcount+1)),(M1_debitcount-P3_debitcount)/P3_debitcount),
                     debitcountperP32 = ifelse((P2_debitcount==0),((P3_debitcount-P2_debitcount)/(P2_debitcount+1)),((P3_debitcount-P2_debitcount)/P2_debitcount)),
                     debitcountperP21 = ifelse((P1_debitcount==0),((P2_debitcount-P1_debitcount)/(P1_debitcount+1)),((P2_debitcount-P1_debitcount)/P1_debitcount)),
                     creditcountperM1P3 = ifelse((P3_creditcount==0),((M1_creditcount-P3_creditcount)/(P3_creditcount+1)),(M1_creditcount-P3_creditcount)/P3_creditcount),
                     creditcountperP32 = ifelse((P2_creditcount==0),((P3_creditcount-P2_creditcount)/(P2_creditcount+1)),((P3_creditcount-P2_creditcount)/P2_creditcount)),
                     creditcountperP21 = ifelse((P1_creditcount==0),((P2_creditcount-P1_creditcount)/(P1_creditcount+1)),((P2_creditcount-P1_creditcount)/P1_creditcount)),
                     creditvalueperM1P3 = ifelse((P3_creditvalue==0),((M1_creditvalue-P3_creditvalue)/(P3_creditvalue+1)),(M1_creditvalue-P3_creditvalue)/P3_creditvalue),
                     creditvalueperP32 = ifelse((P2_creditvalue==0),((P3_creditvalue-P2_creditvalue)/(P2_creditvalue+1)),((P3_creditvalue-P2_creditvalue)/P2_creditvalue)),
                     creditvalueperP21 = ifelse((P1_creditvalue==0),((P2_creditvalue-P1_creditvalue)/(P1_creditvalue+1)),((P2_creditvalue-P1_creditvalue)/P1_creditvalue)),
                     debitvalueperM1P3 = ifelse((P3_debitvalue==0),((M1_debitvalue-P3_debitvalue)/(P3_debitvalue+1)),(M1_debitvalue-P3_debitvalue)/P3_debitvalue),
                     debitvalueperP32 = ifelse((P2_debitvalue==0),((P3_debitvalue-P2_debitvalue)/(P2_debitvalue+1)),((P3_debitvalue-P2_debitvalue)/P2_debitvalue)),
                     debitvalueperP21 = ifelse((P1_debitvalue==0),((P2_debitvalue-P1_debitvalue)/(P1_debitvalue+1)),((P2_debitvalue-P1_debitvalue)/P1_debitvalue)),
                     digperM1P3 = ifelse((P3_dig==0),((M1_dig-P3_dig)/(P3_dig+1)),(M1_dig-P3_dig)/P3_dig),
                     digperP32 = ifelse((P2_dig==0),((P3_dig-P2_dig)/(P2_dig+1)),((P3_dig-P2_dig)/P2_dig)),
                     digperP21 = ifelse((P1_dig==0),((P2_dig-P1_dig)/(P1_dig+1)),((P2_dig-P1_dig)/P1_dig)),
                     mbloginsperM1P3 = ifelse((P3_mblogins==0),((M1_mblogins-P3_mblogins)/(P3_mblogins+1)),(M1_mblogins-P3_mblogins)/P3_mblogins),
                     mbloginsperP32 = ifelse((P2_mblogins==0),((P3_mblogins-P2_mblogins)/(P2_mblogins+1)),((P3_mblogins-P2_mblogins)/P2_mblogins)),
                     mbloginsperP21 = ifelse((P1_mblogins==0),((P2_mblogins-P1_mblogins)/(P1_mblogins+1)),((P2_mblogins-P1_mblogins)/P1_mblogins)),
                     ibloginsperM1P3 = ifelse((P3_iblogins==0),((M1_iblogins-P3_iblogins)/(P3_iblogins+1)),(M1_iblogins-P3_iblogins)/P3_iblogins),
                     ibloginsperP32 = ifelse((P2_iblogins==0),((P3_iblogins-P2_iblogins)/(P2_iblogins+1)),((P3_iblogins-P2_iblogins)/P2_iblogins)),
                     ibloginsperP21 = ifelse((P1_iblogins==0),((P2_iblogins-P1_iblogins)/(P1_iblogins+1)),((P2_iblogins-P1_iblogins)/P1_iblogins)))


t1 <- .10 ; t2 <- .5  ; t3 <- .25# seeting thresholds, threshold1 : 10%, threshold 2: 50%

#f33 <- f32 %>% mutate(MABfall10Flagchk = rowSums(f32[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] <= -t1,na.rm = F))

f33 <- f32 %>% mutate(MABfall10Flag = rowSums(f32[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] <= -t1,na.rm = F),
                      MABfall50Flag = rowSums(f32[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] <= -t2,na.rm = F),
                      MABfall25Flag = rowSums(f32[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] <= -t3,na.rm = F),
                      MABgrow10Flag = rowSums(f32[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] >= t1,na.rm = F),
                      MABgrow50Flag = rowSums(f32[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] >= t2,na.rm = F),
                      MABgrow25Flag = rowSums(f32[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] >= t3,na.rm = F),
                      debitcountfall10Flag = rowSums(f32[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] <= -t1,na.rm = F),
                      debitcountfall50Flag = rowSums(f32[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] <= -t2,na.rm = F),
                      debitcountfall25Flag = rowSums(f32[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] <= -t3,na.rm = F),
                      debitcountgrow10Flag = rowSums(f32[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] >= t1,na.rm = F),
                      debitcountgrow50Flag = rowSums(f32[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] >= t2,na.rm = F),
                      debitcountgrow25Flag = rowSums(f32[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] >= t3,na.rm = F),
                      creditcountfall10Flag = rowSums(f32[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] <= -t1,na.rm = F),
                      creditcountfall50Flag = rowSums(f32[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] <= -t2,na.rm = F),
                      creditcountfall25Flag = rowSums(f32[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] <= -t3,na.rm = F),
                      creditcountgrow10Flag = rowSums(f32[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] >= t1,na.rm = F),
                      creditcountgrow50Flag = rowSums(f32[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] >= t2,na.rm = F),
                      creditcountgrow25Flag = rowSums(f32[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] >= t3,na.rm = F),
                      debitvaluefall10Flag = rowSums(f32[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] <= -t1,na.rm = F),
                      debitvaluefall50Flag = rowSums(f32[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] <= -t2,na.rm = F),
                      debitvaluefall25Flag = rowSums(f32[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] <= -t3,na.rm = F),
                      debitvaluegrow10Flag = rowSums(f32[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] >= t1,na.rm = F),
                      debitvaluegrow50Flag = rowSums(f32[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] >= t2,na.rm = F),
                      debitvaluegrow25Flag = rowSums(f32[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] >= t3,na.rm = F),
                      creditvaluefall10Flag = rowSums(f32[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] <= -t1,na.rm = F),
                      creditvaluefall50Flag = rowSums(f32[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] <= -t2,na.rm = F),
                      creditvaluefall25Flag = rowSums(f32[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] <= -t3,na.rm = F),
                      creditvaluegrow10Flag = rowSums(f32[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] >= t1,na.rm = F),
                      creditvaluegrow50Flag = rowSums(f32[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] >= t2,na.rm = F),
                      creditvaluegrow25Flag = rowSums(f32[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] >= t3,na.rm = F),
                      mbloginsfall10Flag = rowSums(f32[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] <= -t1,na.rm = F),
                      mbloginsfall50Flag = rowSums(f32[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] <= -t2,na.rm = F),
                      mbloginsfall25Flag = rowSums(f32[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] <= -t3,na.rm = F),
                      mbloginsgrow10Flag = rowSums(f32[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] >= t1,na.rm = F),
                      mbloginsgrow50Flag = rowSums(f32[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] >= t2,na.rm = F),
                      mbloginsgrow25Flag = rowSums(f32[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] >= t3,na.rm = F),
                      ibloginsfall10Flag = rowSums(f32[,c("ibloginsper21","ibloginsper32","ibloginsperM1P3","ibloginsperP32","ibloginsperP21")] <= -t1,na.rm = F),
                      ibloginsfall50Flag = rowSums(f32[,c("ibloginsper21","ibloginsper32","ibloginsperM1P3","ibloginsperP32","ibloginsperP21")] <= -t2,na.rm = F),
                      ibloginsfall25Flag = rowSums(f32[,c("ibloginsper21","ibloginsper32","ibloginsperM1P3","ibloginsperP32","ibloginsperP21")] <= -t3,na.rm = F),
                      ibloginsgrow10Flag = rowSums(f32[,c("ibloginsper21","ibloginsper32","ibloginsperM1P3","ibloginsperP32","ibloginsperP21")] >= t1,na.rm = F),
                      ibloginsgrow50Flag = rowSums(f32[,c("ibloginsper21","ibloginsper32","ibloginsperM1P3","ibloginsperP32","ibloginsperP21")] >= t2,na.rm = F),
                      ibloginsgrow25Flag = rowSums(f32[,c("ibloginsper21","ibloginsper32","ibloginsperM1P3","ibloginsperP32","ibloginsperP21")] >= t3,na.rm = F),
                      digfall10Flag = rowSums(f32[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] <= -t1,na.rm = F),
                      digfall50Flag = rowSums(f32[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] <= -t2,na.rm = F),
                      digfall25Flag = rowSums(f32[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] <= -t3,na.rm = F),
                      diggrow10Flag = rowSums(f32[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] >= t1,na.rm = F),
                      diggrow50Flag = rowSums(f32[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] >= t2,na.rm = F),
                      diggrow25Flag = rowSums(f32[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] >= t3,na.rm = F),
                      MinBalNoFlag = rowSums(f32[,c("P1_MAB","P2_MAB","P3_MAB","M1_MAB","M2_MAB","M3_MAB")] < AMB,na.rm = F),
                      MinBalNo50Flag = rowSums(f32[,c("P1_MAB","P2_MAB","P3_MAB","M1_MAB","M2_MAB","M3_MAB")] < (0.5 * AMB),na.rm = F))


valchk <- f33[,c("MABfall10Flag","MABgrow10Flag","MABgrow25Flag","MABper21","MABper32","MABperM1P3","MABperP32","MABperP21","P1_MAB","P2_MAB","P3_MAB","M1_MAB","M2_MAB","M3_MAB")]

valchk2 <- f33[,c("MinBalNoFlag","MinBalNo50Flag","AMB","P1_MAB","P2_MAB","P3_MAB","M1_MAB","M2_MAB","M3_MAB")]

# Multicollinearity=====
str(f3,list=ncol(f3))

f4 <- f33 %>% select(-c(first_txn_Date,daysFirstTxn,email_id,
                        cif_branch_code,cif_branch_name,zone_name,cluster,
                        create_date,business_segment,constitution_code,
                        revised_constitution,insignia_flag,signature_flag,abacus_flag,
                        active,inactive,dormant,live,count_ca,count_sa,count_deposits,
                        branch_code,account_number,account_scheme_code,account_creation_date,account_no,
                        freeze_desc,lien_flag,mop,AMB,crest_flag,fixedDate,Vintage)) # removing char vars
# aspire_flag: retaining this

f4[is.na(f4)] <- 0
f4 <- f4 %>% mutate(avgMAB3m= (M1_MAB+M2_MAB+M3_MAB)/3,
                    avgdebitcount3m= (M1_debitcount+M2_debitcount+M2_debitcount)/3,
                    avgcreditcount3m= (M1_creditcount+M2_creditcount+M2_creditcount)/3,
                    avgdebitvalue3m= (M1_debitvalue+M2_debitvalue+M2_debitvalue)/3,
                    avgcreditvalue3m= (M1_creditvalue+M2_creditvalue+M2_creditvalue)/3,
                    avgdig3m = (M1_dig+M2_dig+M3_dig)/3,
                    avgmblogins3m= (M1_mblogins+M2_mblogins+M2_mblogins)/3,
                    avgiblogins3m= (M1_iblogins+M2_iblogins+M2_iblogins)/3,
                    
                    avgMAB6m= (P1_MAB+P2_MAB+P3_MAB+M1_MAB+M2_MAB+M3_MAB)/6,
                    avgdebitcount6m= (P1_debitcount+P2_debitcount+P2_debitcount+M1_debitcount+M2_debitcount+M2_debitcount)/6,
                    avgcreditcount6m= (P1_creditcount+P2_creditcount+P2_creditcount+M1_creditcount+M2_creditcount+M2_creditcount)/6,
                    avgdebitvalue6m= (P1_debitvalue+P2_debitvalue+P2_debitvalue+M1_debitvalue+M2_debitvalue+M2_debitvalue)/6,
                    avgcreditvalue6m= (P1_creditvalue+P2_creditvalue+P2_creditvalue+M1_creditvalue+M2_creditvalue+M2_creditvalue)/6,
                    avgdig6m = (P1_dig+P2_dig+P3_dig+M1_dig+M2_dig+M3_dig)/6,
                    avgmblogins6m= (P1_mblogins+P2_mblogins+P2_mblogins+M1_mblogins+M2_mblogins+M2_mblogins)/6,
                    avgiblogins6m= (P1_iblogins+P2_iblogins+P2_iblogins+M1_iblogins+M2_iblogins+M2_iblogins)/6)


f4<- f4 %>% mutate(avgMABPrev3m= (P1_MAB+P2_MAB+P3_MAB)/3,
                   avgdebitcountPrev3m= (P1_debitcount+P2_debitcount+P2_debitcount)/3,
                   avgcreditcountPrev3m= (P1_creditcount+P2_creditcount+P2_creditcount)/3,
                   avgdebitvaluePrev3m= (P1_debitvalue+P2_debitvalue+P2_debitvalue)/3,
                   avgcreditvaluePrev3m= (P1_creditvalue+P2_creditvalue+P2_creditvalue)/3,
                   avgdigPrev3m = (P1_dig+P2_dig+P3_dig)/3,
                   avgmbloginsPrev3m= (P1_mblogins+P2_mblogins+P2_mblogins)/3,
                   avgibloginsPrev3m= (P1_iblogins+P2_iblogins+P2_iblogins)/3)

f4 <- f4 %>% mutate (change3mMAB = ifelse((avgMABPrev3m==0),((avgMAB3m-avgMABPrev3m)/(avgMABPrev3m+1)),(avgMAB3m-avgMABPrev3m)/avgMABPrev3m),
                     change3mdebitcount = ifelse((avgdebitcountPrev3m==0),((avgdebitcount3m-avgdebitcountPrev3m)/(avgdebitcountPrev3m+1)),(avgdebitcount3m-avgdebitcountPrev3m)/avgdebitcountPrev3m),
                     change3mdebitvalue = ifelse((avgdebitvaluePrev3m==0),((avgdebitvalue3m-avgdebitvaluePrev3m)/(avgdebitvaluePrev3m+1)),(avgdebitvalue3m-avgdebitvaluePrev3m)/avgdebitvaluePrev3m),
                     change3mcreditvalue = ifelse((avgcreditvaluePrev3m==0),((avgcreditvalue3m-avgcreditvaluePrev3m)/(avgcreditvaluePrev3m+1)),(avgcreditvalue3m-avgcreditvaluePrev3m)/avgcreditvaluePrev3m),
                     change3mcreditcount = ifelse((avgcreditcountPrev3m==0),((avgcreditcount3m-avgcreditcountPrev3m)/(avgcreditcountPrev3m+1)),(avgcreditcount3m-avgcreditcountPrev3m)/avgcreditcountPrev3m),
                     change3mdig = ifelse((avgdigPrev3m==0),((avgdig3m-avgdigPrev3m)/(avgdigPrev3m+1)),(avgdig3m-avgdigPrev3m)/avgdigPrev3m),
                     change3mmblogins = ifelse((avgmbloginsPrev3m==0),((avgmblogins3m-avgmbloginsPrev3m)/(avgmbloginsPrev3m+1)),(avgmblogins3m-avgmbloginsPrev3m)/avgmbloginsPrev3m),
                     change3miblogins = ifelse((avgibloginsPrev3m==0),((avgiblogins3m-avgibloginsPrev3m)/(avgibloginsPrev3m+1)),(avgiblogins3m-avgibloginsPrev3m)/avgibloginsPrev3m))


#snippet3 <- f4[1:50,]
#write_xlsx(snippet3,"E:/shubhi ahuja/d/Shubhi/8 At Risk/Model2.0/v3/checks/snippet_df4_moreavg.xlsx")

f4_noncat <- f4 %>% select(-c(customer_code,TxnFlagPrev3m,contains("NaN"),benefTxn3m,distanceNA,
                              rbi_category_desc,RiskMonth,mbregNA,email_null, aspire_flag))


f4_noncat2_corr <- cor(f4_noncat)

corr_check <- function(Dataset, threshold){
  matriz_cor <- cor(Dataset)
  matriz_cor
  
  for (i in 1:nrow(matriz_cor)){
    correlations <-  which((abs(matriz_cor[i,i:ncol(matriz_cor)]) > threshold) & (matriz_cor[i,i:ncol(matriz_cor)] != 1))
    
    if(length(correlations)> 0){
      lapply(correlations,FUN =  function(x) (cat(paste(colnames(Dataset)[i], "with",colnames(Dataset)[x]), "\n")))
      
    }
  }
}

corr_check(f4_noncat2_corr, 0.95)

# t3====

f5 <- f4 %>% select(-c(TxnFlagPrev3m,contains("NaN"),benefTxn3m,distanceNA,complaints3m))

##
# Outliers====
explore <-function(x) {boxplot(x); quantile(x,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.75,0.8,0.9,0.95,0.99,1),na.rm = T)}
quanExplore <-function(x) {quantile(x,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.75,0.8,0.9,0.95,0.99,.995,1),na.rm = T)}

## daysFirstTxn

## ibregdays
quantile(f5$ib_reg_days,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1),na.rm = T)

count(f5[f5$ib_reg_days==0,])/nrow(f5) # 62% 0 values (0 + NAs)
count(f5[f5$ib_reg_days<0,])/nrow(f5) # 0.3% -ve values
count(f5[f5$ib_reg_days==0 & f5$ibregNA == 1,])/nrow(f5) # 60% have NA as ib_reg_date
range(f5$ib_reg_days)

# Box plot 
#boxplot(f5$ib_reg_days) # would have many NAs

# if date is negative, or if cx reg on same date, making it 1
f5 <- f5 %>% mutate(ib_reg_days= ifelse((ib_reg_days ==0 & ibregNA == 0) | (ib_reg_days<0),1,ib_reg_days )) 
range(f5$ib_reg_days)
quantile(f5$ib_reg_days,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1),na.rm = T)

val99 <- quantile(f5$ib_reg_days,0.97); val99 <- as.numeric(val99) #97th

f5$ib_reg_days <- ifelse(f5$ib_reg_days>val99,val99,f5$ib_reg_days) 
quantile(f5$ib_reg_days,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1),na.rm = T)

#f5$ib_reg_days <- -(f5$ib_reg_days) # converting it to negative
#boxplot(f5$ib_reg_days)

## mbregdays
quantile(f5$mb_reg_days,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1),na.rm = T)

count(f5[f5$mb_reg_days==0,])/nrow(f5) # 41% 0 values (0 + NAs)
count(f5[f5$mb_reg_days==0 & f5$mbregNA== 1,])/nrow(f5) # 40% is just NAs
count(f5[f5$mb_reg_days<0,])/nrow(f5) # 0.4% negative values

# if date is negative, or if cx reg on same date, making it 1
# if they actually did register, making day =1 , to differentiate it from cases with 0 value (did not register)
f5 <- f5 %>% mutate(mb_reg_days= ifelse((mb_reg_days ==0 & mbregNA == 0) | (mb_reg_days<0),1,mb_reg_days )) 
# Box plot 
#boxplot(f5$mb_reg_days)
val99 <- quantile(f5$mb_reg_days,0.97); val99 <- as.numeric(val99) #97
f5$mb_reg_days <- ifelse(f5$mb_reg_days>val99,val99,f5$mb_reg_days) 

#f5$mb_reg_days <- - (f5$mb_reg_days) # converting it to negative

# M3_MAB
var<- f5$M3_MAB
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_MAB <- ifelse(f5$M3_MAB>val99,val99,f5$M3_MAB) 

# M3_debitcount
var<- f5$M3_debitcount
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_debitcount <- ifelse(f5$M3_debitcount>val99,val99,f5$M3_debitcount) 
var<- f5$M3_debitcount
quanExplore(var)

# M3_creditcount
var<- f5$M3_creditcount
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_creditcount <- ifelse(f5$M3_creditcount>val99,val99,f5$M3_creditcount) 
var<- f5$M3_creditcount
quanExplore(var)

# M3_debitvalue
var<- f5$M3_debitvalue
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_debitvalue <- ifelse(f5$M3_debitvalue>val99,val99,f5$M3_debitvalue) 
var<- f5$M3_debitvalue
quanExplore(var)

# M1_creditvalue
var<- f5$M1_creditvalue
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M1_creditvalue <- ifelse(f5$M1_creditvalue>val99,val99,f5$M1_creditvalue) 
var<- f5$M1_creditvalue
quanExplore(var)

# M3_creditvalue
var<- f5$M3_creditvalue
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_creditvalue <- ifelse(f5$M3_creditvalue>val99,val99,f5$M3_creditvalue) 
var<- f5$M3_creditvalue
quanExplore(var)

# M3_posecomcount
var<- f5$M3_posecomcount
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_posecomcount <- ifelse(f5$M3_posecomcount>val99,val99,f5$M3_posecomcount) 
var<- f5$M3_posecomcount
quanExplore(var)

# M3_posecomvalue
var<- f5$M3_posecomvalue
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_posecomvalue <- ifelse(f5$M3_posecomvalue>val99,val99,f5$M3_posecomvalue) 
var<- f5$M3_posecomvalue
quanExplore(var)

# M3_mblogins
var<- f5$M3_mblogins
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_mblogins <- ifelse(f5$M3_mblogins>val99,val99,f5$M3_mblogins) 
var<- f5$M3_mblogins
quanExplore(var)


# M3_dig
var<- f5$M3_dig
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_dig <- ifelse(f5$M3_dig>val99,val99,f5$M3_dig) 
var<- f5$M3_dig
quanExplore(var)

# TPH
var<- f5$TPH
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$TPH <- ifelse(f5$TPH>val99,val99,f5$TPH) 
var<- f5$TPH
quanExplore(var)

# UPH
var<- f5$UPH
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$UPH <- ifelse(f5$UPH>val99,val99,f5$UPH) 
var<- f5$UPH
quanExplore(var)

# LI
var<- f5$LI
#explore(var)

# MABper21
var<- f5$MABper21
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$MABper21 <- ifelse(f5$MABper21>val99,val99,f5$MABper21) 
var<- f5$MABper21
quanExplore(var)

# MABper32
var<- f5$MABper32
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$MABper32 <- ifelse(f5$MABper32>val99,val99,f5$MABper32) 
var<- f5$MABper32
quanExplore(var)

# debitcountper21
var<- f5$debitcountper21
#explore(var)
quantile(var,0.995)  # 99.5 for this
val99 <- quantile(var,0.995); val99 <- as.numeric(val99)

f5$debitcountper21 <- ifelse(f5$debitcountper21>val99,val99,f5$debitcountper21) 
var<- f5$debitcountper21
quanExplore(var)

# MABper32
var<- f5$debitcountper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99)

f5$debitcountper32 <- ifelse(f5$debitcountper32>val99,val99,f5$debitcountper32) 
var<- f5$debitcountper32
quanExplore(var)

# debitvalueper21
var<- f5$debitvalueper21
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$debitvalueper21 <- ifelse(f5$debitvalueper21>val99,val99,f5$debitvalueper21) 
var<- f5$debitvalueper21
quanExplore(var)

# debitvalueper32
var<- f5$debitvalueper32
#explore(var)
val99 <- quantile(var,0.95); val99 <- as.numeric(val99) # with 95% here

f5$debitvalueper32 <- ifelse(f5$debitvalueper32>val99,val99,f5$debitvalueper32) 
var<- f5$debitvalueper32
quanExplore(var)

# creditcountper21
var<- f5$creditcountper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$creditcountper21 <- ifelse(f5$creditcountper21>val99,val99,f5$creditcountper21) 
var<- f5$creditcountper21
quanExplore(var)

# creditcountper32
var<- f5$creditcountper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$creditcountper32 <- ifelse(f5$creditcountper32>val99,val99,f5$creditcountper32) 
var<- f5$creditcountper32
quanExplore(var)

# creditvalueper21
var<- f5$creditvalueper21
#explore(var)
val99 <- quantile(var,0.95); val99 <- as.numeric(val99) # with 95% here

f5$creditvalueper21 <- ifelse(f5$creditvalueper21>val99,val99,f5$creditvalueper21) 
var<- f5$creditvalueper21
quanExplore(var)

# creditvalueper32
var<- f5$creditvalueper32
#explore(var)
val99 <- quantile(var,0.95); val99 <- as.numeric(val99) # with 95% here

f5$creditvalueper32 <- ifelse(f5$creditvalueper32>val99,val99,f5$creditvalueper32) 
var<- f5$creditvalueper32
quanExplore(var)

# posecomcountper21
var<- f5$posecomcountper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 95% here

f5$posecomcountper21 <- ifelse(f5$posecomcountper21>val99,val99,f5$posecomcountper21) 
var<- f5$posecomcountper21
quanExplore(var)

# posecomcountper32
var<- f5$posecomcountper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 95% here

f5$posecomcountper32 <- ifelse(f5$posecomcountper32>val99,val99,f5$posecomcountper32) 
var<- f5$posecomcountper32
quanExplore(var)

# posecomvalueper21
var<- f5$posecomvalueper21
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$posecomvalueper21 <- ifelse(f5$posecomvalueper21>val99,val99,f5$posecomvalueper21) 
var<- f5$posecomvalueper21
quanExplore(var)

# posecomvalueper32
var<- f5$posecomvalueper32
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$posecomvalueper32 <- ifelse(f5$posecomvalueper32>val99,val99,f5$posecomvalueper32) 
var<- f5$posecomvalueper32
quanExplore(var)

# mbloginsper21
var<- f5$mbloginsper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$mbloginsper21 <- ifelse(f5$mbloginsper21>val99,val99,f5$mbloginsper21) 
var<- f5$mbloginsper21
quanExplore(var)

# mbloginsper32
var<- f5$mbloginsper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$mbloginsper32 <- ifelse(f5$mbloginsper32>val99,val99,f5$mbloginsper32) 
var<- f5$mbloginsper32
quanExplore(var)

# ibloginsper21
var<- f5$ibloginsper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$ibloginsper21 <- ifelse(f5$ibloginsper21>val99,val99,f5$ibloginsper21) 
var<- f5$ibloginsper21
quanExplore(var)

# ibloginsper32
var<- f5$ibloginsper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$ibloginsper32 <- ifelse(f5$ibloginsper32>val99,val99,f5$ibloginsper32) 
var<- f5$ibloginsper32
quanExplore(var)

# digper21
var<- f5$digper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$digper21 <- ifelse(f5$digper21>val99,val99,f5$digper21) 
var<- f5$digper21
quanExplore(var)

# digper32
var<- f5$digper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$digper32 <- ifelse(f5$digper32>val99,val99,f5$digper32) 
var<- f5$digper32
quanExplore(var)

# avgMAB6m
var<- f5$avgMAB6m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgMAB6m <- ifelse(f5$avgMAB6m>val99,val99,f5$avgMAB6m) 
var<- f5$avgMAB6m
quanExplore(var)

# avgMAB3m
var<- f5$avgMAB3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgMAB3m <- ifelse(f5$avgMAB3m>val99,val99,f5$avgMAB3m) 
var<- f5$avgMAB3m
quanExplore(var)

# avgdebitcount6m
var<- f5$avgdebitcount6m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitcount6m <- ifelse(f5$avgdebitcount6m>val99,val99,f5$avgdebitcount6m) 
var<- f5$avgdebitcount6m
quanExplore(var)

# avgdebitvalue6m
var<- f5$avgdebitvalue6m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitvalue6m <- ifelse(f5$avgdebitvalue6m>val99,val99,f5$avgdebitvalue6m) 
var<- f5$avgdebitvalue6m
quanExplore(var)

# avgcreditcount6m
var<- f5$avgcreditcount6m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditcount6m <- ifelse(f5$avgcreditcount6m>val99,val99,f5$avgcreditcount6m) 
var<- f5$avgcreditcount6m
quanExplore(var)

# avgcreditvalue6m
var<- f5$avgcreditvalue6m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditvalue6m <- ifelse(f5$avgcreditvalue6m>val99,val99,f5$avgcreditvalue6m) 
var<- f5$avgcreditvalue6m
quanExplore(var)


# avgdebitvalue3m
var<- f5$avgdebitvalue3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitvalue3m <- ifelse(f5$avgdebitvalue3m>val99,val99,f5$avgdebitvalue3m) 
var<- f5$avgdebitvalue3m
quanExplore(var)

# avgdebitvalue3m
var<- f5$avgcreditvalue3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditvalue3m <- ifelse(f5$avgcreditvalue3m>val99,val99,f5$avgcreditvalue3m) 
var<- f5$avgcreditvalue3m
quanExplore(var)


# avgdebitcount3m
var<- f5$avgdebitcount3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitcount3m <- ifelse(f5$avgdebitcount3m>val99,val99,f5$avgdebitcount3m) 
var<- f5$avgdebitcount3m
quanExplore(var)

# avgdebitcount3m
var<- f5$avgcreditcount3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditcount3m <- ifelse(f5$avgcreditcount3m>val99,val99,f5$avgcreditcount3m) 
var<- f5$avgcreditcount3m
quanExplore(var)

# avgMABPrev3m
var<- f5$avgMABPrev3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgMABPrev3m <- ifelse(f5$avgMABPrev3m>val99,val99,f5$avgMABPrev3m) 
var<- f5$avgMABPrev3m
quanExplore(var)

#imputefn <- function (x) {ifelse(x>val99,val99,x)}

chkfun <- f5

# avgdebitcountPrev3m
var<- f5$avgdebitcountPrev3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitcountPrev3m <- ifelse(f5$avgdebitcountPrev3m>val99,val99,f5$avgdebitcountPrev3m) 
var<- f5$avgdebitcountPrev3m
quanExplore(var)

# avgcreditcountPrev3m
var<- f5$avgcreditcountPrev3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditcountPrev3m <- ifelse(f5$avgcreditcountPrev3m>val99,val99,f5$avgcreditcountPrev3m) 
var<- f5$avgcreditcountPrev3m
quanExplore(var)

# avgcreditvaluePrev3m
var<- f5$avgcreditvaluePrev3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditvaluePrev3m <- ifelse(f5$avgcreditvaluePrev3m>val99,val99,f5$avgcreditvaluePrev3m) 
var<- f5$avgcreditvaluePrev3m
quanExplore(var)

# avgdebitvaluePrev3m
var<- f5$avgdebitvaluePrev3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitvaluePrev3m <- ifelse(f5$avgdebitvaluePrev3m>val99,val99,f5$avgdebitvaluePrev3m) 
var<- f5$avgdebitvaluePrev3m
quanExplore(var) 

# change3mMAB
var<- f5$change3mMAB
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$change3mMAB <- ifelse(f5$change3mMAB>val99,val99,f5$change3mMAB) 
var<- f5$change3mMAB
quanExplore(var) 

# change3mcreditvalue
var<- f5$change3mcreditvalue
quanExplore(var)
val99 <- quantile(var,0.98); val99 <- as.numeric(val99) # with 98% here

f5$change3mcreditvalue <- ifelse(f5$change3mcreditvalue>val99,val99,f5$change3mcreditvalue) 
var<- f5$change3mcreditvalue
quanExplore(var) 

# change3mdebitvalue
var<- f5$change3mdebitvalue
quanExplore(var)
val99 <- quantile(var,0.98); val99 <- as.numeric(val99) # with 98% here

f5$change3mdebitvalue <- ifelse(f5$change3mdebitvalue>val99,val99,f5$change3mdebitvalue) 
var<- f5$change3mdebitvalue
quanExplore(var) 

names(f5)

# f6 <- f5 %>% select(-c(mbregNA,ibregNA,contains("per21"),contains("perP32"),contains("perP21"),
#                        contains("perM1P3"),contains("P1_"),contains("P2_"),contains("P3_"),
#                        contains("M1_"),contains("M2_"),contains("iblogins"),credit_card,email_null)) # also removed debit/credit & other txn flags

# removing variables== some of the ones which did not feature in top 35 vars, with low gain etc
# t5====
names(f5)
f6 <- f5 %>% select(-c(mbregNA,ibregNA,contains("per21"),contains("perP32"),contains("perP21"),
                       contains("perM1P3"),contains("P1_"),contains("P2_"),contains("P3_"),
                       contains("M1_"),contains("M2_"),contains("iblogins"),credit_card,email_null,
                       ib_reg_days,ibregNA,contains("posecom"),UPH,TPH,LI,benef_flag,distance_from_branch,
                       TDclosed3m,complain_flag)) # also removed debit/credit & other txn flags
names(f6)
table(f6$aspire_flag)
f6$aspire_flag <- ifelse(f6$aspire_flag == "Y",1,0)
table(f6$aspire_flag)

library(dummies)
atrisk1 <- dummy.data.frame(f6,names = c("rbi_category_desc"),sep="_")
str(atrisk1)
atrisk1$`rbi_category_desc_RBI RURAL` <- NULL
#dfsample <- atrisk1[1:50,]
#write_xlsx(dfsample,"dfwithDummy.xlsx")

atrisk2 <- atrisk1 %>% select(-c(customer_code,RiskMonth))

names(atrisk2)
str(atrisk2,len=ncol(atrisk2))

# using only top 50 features=====

atrisk3 <- atrisk2 %>% select("AtRisk_flag",	"debitvalueper32",	"M3_debitcount",
                              "M3_MAB",	"M3_creditvalue",	"creditvalueper32",
                              "M3_dig",	"avgdebitcount6m",	"MABper32",
                              "M3_debitvalue",	"avgdebitcount3m",	"avgdebitcountPrev3m",
                              "M3_creditcount",	"mb_reg_days",	"change3mMAB",
                              "avgcreditcount6m",	"avgMAB3m",	"debitcountgrow10Flag",
                              "avgdebitvalue6m",	"debitvaluegrow10Flag",	"avgdebitvaluePrev3m",
                              "debitcountfall10Flag",	"avgMABPrev3m",	"avgdebitvalue3m",
                              "debitcountper32",	"avgcreditvalue3m",	"avgMAB6m",
                              "digper32",	"avgcreditvalue6m",	"change3mdebitvalue",
                              "avgcreditcount3m",	"change3mcreditvalue",	"change3mdebitcount",
                              "avgcreditvaluePrev3m",	"change3mmblogins",	"M3_mblogins",
                              "change3mcreditcount",	"change3mdig",	"mbloginsper32",
                              "creditcountper32",	"avgcreditcountPrev3m",	"MABgrow10Flag",
                              "avgdig6m",	"avgmblogins6m",	"avgmblogins3m",
                              "avgdigPrev3m",	"debitcountfall50Flag",	"avgmbloginsPrev3m",
                              "MinBalNoFlag",	"avgdig3m",	"rbi_category_desc_RBI METRO")


# Partition Data
set.seed(1234)
inTrain <- createDataPartition(atrisk3$AtRisk_flag,p=0.80,list = FALSE)
Training <- atrisk3[inTrain,]
Testing <- atrisk3[-inTrain,]

getwd()
setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\v3\\data\\")
#write.csv(Training,"SAERVtraining_top50features.csv",row.names = F)

library(xgboost)

set.seed(123)

testdataxg <- as.matrix(Testing[,-c(1)])
traindataxg <- as.matrix(Training[,-c(1)])

testxglabel <- Testing$AtRisk_flag
trainxglabel <- Training$AtRisk_flag

dtrain <- xgb.DMatrix(data = traindataxg,label = trainxglabel)
dtest <- xgb.DMatrix(data = testdataxg, label = testxglabel)


table(atrisk2$AtRisk_flag)
560620/59383 # 9.4
59383/(59383 + 560620) #9.57% event rate

#t1====
params <- list(booster = "gbtree", objective =  "binary:logistic", eta=0.3, gamma=0, max_depth=8,
               min_child_weight=1, subsample=1, colsample_bytree=1,scale_pos_weight= 9,set.seed=123)

# xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 100, nfold = 5, showsd = T, stratified = T,
#                  print_every_n = 50, early_stopping_rounds = 40, maximize = F)
# xgbcv # 100

xgb1 <- xgb.train(params = params ,data = dtrain, nrounds = 100, watchlist = list(val=dtest,train=dtrain), 
                  print_every_n = 10, early_stopping_rounds = 40, maximize = F, eval_metric = "error")

# Prediction
xgbpred <- predict(xgb1,dtest)
#xgbpred
min(xgbpred); median(xgbpred); max(xgbpred); mean(xgbpred)
xgbpred <- ifelse (xgbpred > 0.5,1,0) ## binary::logistic return output probalities rather than labels

# confusionmatrix(predicted, actual) # takes factors
xgbpredfactor <- as.factor(xgbpred) # prediction label for test
testxglabelfactor <- as.factor(testxglabel) # actual label for test

#confusionMatrix(xgbpredfactor,testxglabelfactor)
confusionMatrix(xgbpredfactor,testxglabelfactor,positive = "1",dnn = c("Prediction","Actual"))
#names(atrisk2)

library(ROCR)
library(rpart.plot)
library(pROC)
#library(CoordinateCleaner)

#Decide the cutoff and threshold**********************************************************
x <- predict(xgb1,dtest, type = "response")
y <- prediction(x, Testing$AtRisk_flag)
#par(mar=c(3,2,1,2))
#plot(performance(y, "tpr", "fpr"), colorize = TRUE)

auc <- performance(y, "auc")
auc

z <- roc(response = Testing$AtRisk_flag, predictor = x)
a <- coords(z, "best", "threshold")
a #*********************************************************

# 0.3889994
# t1 Prediction with diff cutoff====
xgbpred <- predict(xgb1,dtest)
#xgbpred
#min(xgbpred); median(xgbpred); max(xgbpred); mean(xgbpred)
xgbpred <- ifelse (xgbpred > 0.3889994,1,0) ## binary::logistic return output probalities rather than labels

# confusionmatrix(predicted, actual) # takes factors
xgbpredfactor <- as.factor(xgbpred) # prediction label for test
testxglabelfactor <- as.factor(testxglabel) # actual label for test

#confusionMatrix(xgbpredfactor,testxglabelfactor)
confusionMatrix(xgbpredfactor,testxglabelfactor,positive = "1",dnn = c("Prediction","Actual"))


### Data pull automated====
library(readxl)
library(Matrix)
library(car)
library(dplyr)
library(readr)
library(caret) #for confusion matrix
library(ROCR) 
library(data.table)
options(scipen = 999)

library(RODBC)
library(sqldf)

# conn====
conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

mab <- sqlQuery(conn,paste("select customer_code, P1,P2,P3,M1,M2,M3 from
                           (select customer_code, mab, balance_date ,
                           lead(mab,5) over (partition by customer_code order by balance_date desc) as P1,
                           lead(mab,4) over (partition by customer_code order by balance_date desc) as P2,
                           lead(mab,3) over (partition by customer_code order by balance_date desc) as P3,
                           lead(mab,2) over (partition by customer_code order by balance_date desc) as M1,
                           lead(mab,1) over (partition by customer_code order by balance_date desc) as M2,
                           lead(mab,0) over (partition by customer_code order by balance_date desc) as M3
                           from
                           (select customer_code, mab, balance_date from al_dl_customer_master
                           where balance_date >= cast(dateadd(month,-5,(dateadd(day,-(day(getdate())),getdate()))) as date)
                           and balance_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)
                           union all 
                           select customer_code, mab,balance_date from dl_customer_master)ss)tt
                           where balance_date = (select max(balance_date) from dl_customer_master)"))

map <- mab # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map) <- paste0(colnames(map),"_MAB")
colnames(map)[1] <- "customer_code"; names(map)

compile <- map

#  ********************************************
# debit count

debit_count <- sqlQuery(conn,paste("select customer_code,P1,P2,P3,M1,M2,M3 from
                                   (select *,
                                   lead(debit_count,5) over (partition by customer_code order by balance_monthyr desc) as P1,
                                   lead(debit_count,4) over (partition by customer_code order by balance_monthyr desc) as P2,
                                   lead(debit_count,3) over (partition by customer_code order by balance_monthyr desc) as P3,
                                   lead(debit_count,2) over (partition by customer_code order by balance_monthyr desc) as M1,
                                   lead(debit_count,1) over (partition by customer_code order by balance_monthyr desc) as M2,
                                   lead(debit_count,0) over (partition by customer_code order by balance_monthyr desc) as M3
                                   from (
                                   (select customer_code, account_number,
                                   concat(datepart(year,a.balance_date),'-',datepart(month,a.balance_date)) as balance_monthyr
                                   from al_dl_accounts a
                                   where a.closing_date is null
                                   and a.product = 'SA'
                                   and a.balance_date >= cast(dateadd(month,-5,(dateadd(day,(-day(getdate())),getdate()))) as date )
                                   and a.balance_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)) as a
                                   left join 
                                   (select h.account_no, count(h.tran_id) as debit_count, format(tran_date,'yyyy-M') as txn_month
                                   from dbo.DL_BBB_HTD h 
                                   where h.part_tran_type = 'D'
                                   and h.tran_date >= cast(dateadd(month,-6,(dateadd(day,(1-day(getdate())),getdate()))) as date )
                                   and h.tran_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)
                                   and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                   and h.tran_particular not like  '%disbursement credit%' ---
                                   and h.tran_particular not like '%draw down credit%' --- ??
                                   and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                   and h.tran_particular not like 'REV %'
                                   and h.tran_particular not like '%reversal%'
                                   and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                   and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                   and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                   group by h.account_no,format(h.tran_date,'yyyy-M'))as h
                                   on a.account_number = h.account_no
                                   and a.balance_monthyr = h.txn_month))ss
                                   where balance_monthyr = (select max(concat(datepart(year,balance_date),'-',datepart(month,balance_date))) from dl_customer_master)"))

map <- debit_count # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

colnames(map) <- paste0(colnames(map),"_debitcount")
colnames(map)[1] <- "customer_code"; names(map)

compile <- left_join(compile,map,by="customer_code")

#********************************************************88
# credit count

credit_count <- sqlQuery(conn,paste("select customer_code,P1,P2,P3,M1,M2,M3 from
                                    (select *,
                                    lead(credit_count,5) over (partition by customer_code order by balance_monthyr desc) as P1,
                                    lead(credit_count,4) over (partition by customer_code order by balance_monthyr desc) as P2,
                                    lead(credit_count,3) over (partition by customer_code order by balance_monthyr desc) as P3,
                                    lead(credit_count,2) over (partition by customer_code order by balance_monthyr desc) as M1,
                                    lead(credit_count,1) over (partition by customer_code order by balance_monthyr desc) as M2,
                                    lead(credit_count,0) over (partition by customer_code order by balance_monthyr desc) as M3
                                    from (
                                    (select customer_code, account_number,
                                    concat(datepart(year,a.balance_date),'-',datepart(month,a.balance_date)) as balance_monthyr
                                    from al_dl_accounts a
                                    where a.closing_date is null
                                    and a.product = 'SA'
                                    and a.balance_date >= cast(dateadd(month,-5,(dateadd(day,(-day(getdate())),getdate()))) as date )
                                    and a.balance_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)) as a
                                    left join 
                                    (select h.account_no, count(h.tran_id) as credit_count, format(tran_date,'yyyy-M') as txn_month
                                    from dbo.DL_BBB_HTD h 
                                    where h.part_tran_type = 'C'
                                    and h.tran_date >= cast(dateadd(month,-6,(dateadd(day,(1-day(getdate())),getdate()))) as date )
                                    and h.tran_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)
                                    and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                    and h.tran_particular not like  '%disbursement credit%' ---
                                    and h.tran_particular not like '%draw down credit%' --- ??
                                    and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                    and h.tran_particular not like 'REV %'
                                    and h.tran_particular not like '%reversal%'
                                    and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                    and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                    and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                    group by h.account_no,format(h.tran_date,'yyyy-M'))as h
                                    on a.account_number = h.account_no
                                    and a.balance_monthyr = h.txn_month))ss
                                    where balance_monthyr = (select max(concat(datepart(year,balance_date),'-',datepart(month,balance_date))) from dl_customer_master)"))

map <- credit_count # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)
head(map,3)

colnames(map) <- paste0(colnames(map),"_creditcount")
colnames(map)[1] <- "customer_code"; names(map)

compile <- left_join(compile,map,by="customer_code")

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

#****************************************************************
# Debit value
debit_value <- sqlQuery(conn,paste("select customer_code,P1,P2,P3,M1,M2,M3 from
                                   (select *,
                                   lead(debit_amt,5) over (partition by customer_code order by balance_monthyr desc) as P1,
                                   lead(debit_amt,4) over (partition by customer_code order by balance_monthyr desc) as P2,
                                   lead(debit_amt,3) over (partition by customer_code order by balance_monthyr desc) as P3,
                                   lead(debit_amt,2) over (partition by customer_code order by balance_monthyr desc) as M1,
                                   lead(debit_amt,1) over (partition by customer_code order by balance_monthyr desc) as M2,
                                   lead(debit_amt,0) over (partition by customer_code order by balance_monthyr desc) as M3
                                   from (
                                   (select customer_code, account_number,
                                   concat(datepart(year,a.balance_date),'-',datepart(month,a.balance_date)) as balance_monthyr
                                   from al_dl_accounts a
                                   where a.closing_date is null
                                   and a.product = 'SA'
                                   and a.balance_date >= cast(dateadd(month,-5,(dateadd(day,(-day(getdate())),getdate()))) as date )
                                   and a.balance_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)) as a
                                   left join 
                                   (select h.account_no, sum(h.tran_amt) as debit_amt, format(tran_date,'yyyy-M') as txn_month
                                   from dbo.DL_BBB_HTD h 
                                   where h.part_tran_type = 'D'
                                   and h.tran_date >= cast(dateadd(month,-6,(dateadd(day,(1-day(getdate())),getdate()))) as date )
                                   and h.tran_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)
                                   and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                   and h.tran_particular not like  '%disbursement credit%' ---
                                   and h.tran_particular not like '%draw down credit%' --- ??
                                   and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                   and h.tran_particular not like 'REV %'
                                   and h.tran_particular not like '%reversal%'
                                   and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                   and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                   and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                   group by h.account_no,format(h.tran_date,'yyyy-M'))as h
                                   on a.account_number = h.account_no
                                   and a.balance_monthyr = h.txn_month))ss
                                   where balance_monthyr = (select max(concat(datepart(year,balance_date),'-',datepart(month,balance_date))) from dl_customer_master)"))

map <- debit_value # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)
head(map,3)

colnames(map) <- paste0(colnames(map),"_debitvalue")
colnames(map)[1] <- "customer_code"; names(map)

compile <- left_join(compile,map,by="customer_code")

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

#****************************************************************
# credit value
credit_value <- sqlQuery(conn,paste("select customer_code,P1,P2,P3,M1,M2,M3 from
                                    (select *,
                                    lead(credit_amt,5) over (partition by customer_code order by balance_monthyr desc) as P1,
                                    lead(credit_amt,4) over (partition by customer_code order by balance_monthyr desc) as P2,
                                    lead(credit_amt,3) over (partition by customer_code order by balance_monthyr desc) as P3,
                                    lead(credit_amt,2) over (partition by customer_code order by balance_monthyr desc) as M1,
                                    lead(credit_amt,1) over (partition by customer_code order by balance_monthyr desc) as M2,
                                    lead(credit_amt,0) over (partition by customer_code order by balance_monthyr desc) as M3
                                    from (
                                    (select customer_code, account_number,
                                    concat(datepart(year,a.balance_date),'-',datepart(month,a.balance_date)) as balance_monthyr
                                    from al_dl_accounts a
                                    where a.closing_date is null
                                    and a.product = 'SA'
                                    and a.balance_date >= cast(dateadd(month,-5,(dateadd(day,(-day(getdate())),getdate()))) as date )
                                    and a.balance_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)) as a
                                    left join 
                                    (select h.account_no, sum(h.tran_amt) as credit_amt, format(tran_date,'yyyy-M') as txn_month
                                    from dbo.DL_BBB_HTD h 
                                    where h.part_tran_type = 'C'
                                    and h.tran_date >= cast(dateadd(month,-6,(dateadd(day,(1-day(getdate())),getdate()))) as date )
                                    and h.tran_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)
                                    and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                                    and h.tran_particular not like  '%disbursement credit%' ---
                                    and h.tran_particular not like '%draw down credit%' --- ??
                                    and h.tran_particular not like '%REV' --- reversal  : keep for SA
                                    and h.tran_particular not like 'REV %'
                                    and h.tran_particular not like '%reversal%'
                                    and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                                    and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                                    and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                                    group by h.account_no,format(h.tran_date,'yyyy-M'))as h
                                    on a.account_number = h.account_no
                                    and a.balance_monthyr = h.txn_month))ss
                                    where balance_monthyr = (select max(concat(datepart(year,balance_date),'-',datepart(month,balance_date))) from dl_customer_master)"))

map <- credit_value
map$customer_code <- as.character(map$customer_code)
names(map)
head(map,3)

colnames(map) <- paste0(colnames(map),"_creditvalue")
colnames(map)[1] <- "customer_code"; names(map)

compile <- left_join(compile,map,by="customer_code")

#setwd("F:\\Shubhi\\At Risk 2.0\\Automating Data Pulling\\checks")
#write.csv(compile,"df1_SAERV.csv",row.names = F)

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

# Logins mb
logins_mb <- sqlQuery(conn,paste("select customer_code, P1,P2,P3,M1,M2,M3 from
                                 (select customer_code, mob_mtd_login_count, balance_date ,
                                 lead(mob_mtd_login_count,5) over (partition by customer_code order by balance_date desc) as P1,
                                 lead(mob_mtd_login_count,4) over (partition by customer_code order by balance_date desc) as P2,
                                 lead(mob_mtd_login_count,3) over (partition by customer_code order by balance_date desc) as P3,
                                 lead(mob_mtd_login_count,2) over (partition by customer_code order by balance_date desc) as M1,
                                 lead(mob_mtd_login_count,1) over (partition by customer_code order by balance_date desc) as M2,
                                 lead(mob_mtd_login_count,0) over (partition by customer_code order by balance_date desc) as M3
                                 from
                                 (select customer_code, mob_mtd_login_count,balance_date 
                                 from al_dl_customer_master 
                                 where balance_date >= cast(dateadd(month,-5,(dateadd(day,-(day(getdate())),getdate()))) as date)   
                                 union all
                                 select customer_code, mob_mtd_login_count,balance_date 
                                 from dl_customer_master)ss)tt
                                 where balance_date = (select max(balance_date) from dl_customer_master)"))

map <- logins_mb # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)
head(map,3)

colnames(map) <- paste0(colnames(map),"_mblogins")
colnames(map)[1] <- "customer_code"; names(map)

compile <- left_join(compile,map,by="customer_code")

# days to register on mb ***********

mbreg <- sqlQuery(conn,paste("select customer_code, datediff(day,create_date,mob_registration_date) as mb_reg_days
                             from dl_customer_master
                             where customer_tagging = 'SA'")) # if pulled later
mbreg$customer_code <- as.character(mbreg$customer_code)
head(mbreg,3)

compile <- left_join(compile,mbreg,by="customer_code")
compile$mbregNA <- ifelse(is.na(compile$mb_reg_days),1,0) # if date is NA, it flags as 1
table(compile$mbregNA)

# digital txn ***************
dig1 <- sqlQuery(conn,paste("select customer_code, P1,P2,P3,M1,M2,M3 from
                            (select *,
                            lead(digital_txns,5) over (partition by customer_code order by balance_date desc) as P1,
                            lead(digital_txns,4) over (partition by customer_code order by balance_date desc) as P2,
                            lead(digital_txns,3) over (partition by customer_code order by balance_date desc) as P3,
                            lead(digital_txns,2) over (partition by customer_code order by balance_date desc) as M1,
                            lead(digital_txns,1) over (partition by customer_code order by balance_date desc) as M2,
                            lead(digital_txns,0) over (partition by customer_code order by balance_date desc) as M3
                            from (
                            select customer_code, balance_date,
                            (isnull(netbanking_usage,0) + isnull(mb_usage,0) ) as digital_txns
                            from dl_customer_master
                            union all 
                            select customer_code,balance_date,
                            (isnull(netbanking_usage,0) + isnull(mb_usage,0)) as digital_txns
                            from al_dl_customer_master
                            where balance_date >= cast(dateadd(month,-5,(dateadd(day,-(day(getdate())),getdate()))) as date))ss)tt
                            where balance_date = (select max(balance_date) from dl_customer_master)"))

dig1$customer_code <- as.character(dig1$customer_code)
head(dig1)

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

# upi_raw
upi_raw <- sqlQuery(conn,paste("select customer_code, P1,P2,P3,M1,M2,M3 from
                               (select *,
                               lead(UPI_debits,5) over (partition by customer_code order by balance_monthyr desc) as P1,
                               lead(UPI_debits,4) over (partition by customer_code order by balance_monthyr desc) as P2,
                               lead(UPI_debits,3) over (partition by customer_code order by balance_monthyr desc) as P3,
                               lead(UPI_debits,2) over (partition by customer_code order by balance_monthyr desc) as M1,
                               lead(UPI_debits,1) over (partition by customer_code order by balance_monthyr desc) as M2,
                               lead(UPI_debits,0) over (partition by customer_code order by balance_monthyr desc) as M3
                               from (select a.customer_code, a.balance_monthyr,b.UPI_debits from 
                               (select a.customer_code,a.account_number,
                               concat(datepart(year,a.balance_date),'-',datepart(month,a.balance_date)) as balance_monthyr
                               from al_dl_accounts a 
                               where a.balance_date >= cast(dateadd(month,-5,(dateadd(day,(-day(getdate())),getdate()))) as date )
                               and a.balance_date <= cast(dateadd(day,-day(getdate()),getdate()) as date)
                               and a.closing_date is null) a
                               left join 
                               (select bank_ac_number, count(txn_detail_id) as UPI_debits, format(creation_ts,'yyyy-M') as txn_month
                               from dbo.BAAS_UPI_TXNS b
                               where creation_ts >= cast(dateadd(month,-6,(dateadd(day,(1-day(getdate())),getdate()))) as date )
                               and creation_ts <= cast(dateadd(day,-day(getdate()),getdate()) as date)
                               and payer_payee_flag='payer' 
                               group by bank_ac_number,format(creation_ts,'yyyy-M')) b 
                               on a.account_number = b.bank_ac_number
                               and a.balance_monthyr = b.txn_month)ss)tt
                               where balance_monthyr = (select max(concat(datepart(year,balance_date),'-',datepart(month,balance_date))) from dl_customer_master)"))

upi_raw$customer_code <- as.character(upi_raw$customer_code)

# keeping only cx that came in the rules we chose earlier
upi_raw2 <- upi_raw %>% filter (customer_code %in% dig1$customer_code)
head(upi_raw)

# appending upi details to total cx txn details
total_txns_withUPI <- rbind(dig1,upi_raw2)
total_txns_withUPI2 <- total_txns_withUPI
total_txns_withUPI2[is.na(total_txns_withUPI2)] <- 0  # converting NAs to 0, for aggregation

total_txns_withUPI3 <- total_txns_withUPI2 %>% group_by(customer_code) %>% summarise_all(funs(sum))

# adding total digital txn details (including UPI)
map <- total_txns_withUPI3 # df/var to be mapped
map$customer_code <- as.character(map$customer_code)
names(map)

colnames(map)<-c("customer_code","P1","P2","P3","M1","M2","M3") #"M11" Once feb data comes in 
names(map)

colnames(map) <- paste0(colnames(map),"_dig")
colnames(map)[1] <- "customer_code"; names(map)

compile <- left_join(compile,map,by="customer_code")

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

# Now map fields from cx master

cx_info <- sqlQuery(conn,paste("select customer_code,cif_branch_code, cif_branch_name,zone_name,cluster,
                               rbi_category_desc,create_date,business_segment, constitution_code,
                               revised_constitution,insignia_flag,signature_flag,aspire_flag,abacus_flag,
                               active, inactive, dormant, live, count_sa, count_ca, count_deposits
                               from dl_customer_master
                               where customer_tagging = 'SA'
                               and (revised_constitution in ('Individual','') or revised_constitution is null)
                               and datediff(month,create_date,balance_date) >= 12
                               and active>0 and live>0
                               and zone_name not like '%rural%'"))

cx_info$customer_code <- as.character(cx_info$customer_code)

compile2 <- inner_join(compile,cx_info,by="customer_code") #days to register on mb/nb taken as on feb end

# account details
acc <- sqlQuery(conn,paste("select customer_code,branch_code,account_number, 
                           account_scheme_code,account_creation_date,freeze_desc,lien_flag,mop
                           from al_dl_accounts
                           where account_status in ('A')
                           and product = 'SA'
                           and (closing_date is null)
                           and balance_date = cast(dateadd(day,-day(getdate()),getdate()) as date)"))

acc$customer_code <- as.character(acc$customer_code)
acc$account_number <- as.character(acc$account_number)

acc_count <- acc %>% group_by(customer_code) %>% summarize(count = n())
acc_count2 <- acc_count %>% filter (count>1)

acc_use <- acc %>% filter (!customer_code %in% acc_count2$customer_code)

compile3 <- inner_join(compile2,acc_use,by="customer_code") ### inner join done
colSums(is.na(compile3))
nrow(compile3)-nrow(compile2)

getwd()
#write.csv(compile3,"df2_SAERV.csv",row.names = F)

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

# live account details
acc_live <- sqlQuery(conn,paste("select customer_code,branch_code,account_number, product
                                from al_dl_accounts
                                where product in ('SA','CA','SAL','NR')
                                and (closing_date is null)
                                and balance_date = cast(dateadd(day,-day(getdate()),getdate()) as date)"))

acc_live$customer_code<- as.character(acc_live$customer_code)
acc_live$account_number<- as.character(acc_live$account_number)

acc_countlive <- acc_live %>% group_by(customer_code) %>% summarize(count = n())
acc_countlive2 <- acc_countlive %>% filter (count>1)

#acc_live_use <- acc_live %>% filter (!customer_code %in% acc_countlive2$customer_code)

compile4 <- compile3 %>% filter(!customer_code %in% acc_countlive2$customer_code)
colSums(is.na(compile3))



# Filtering ====
f1<- compile4
chkdupl <- f1[duplicated(f1$customer_code),]
f1_dist <- distinct(f1)
chkdupl <- f1_dist[duplicated(f1_dist$customer_code),]

#f1 <- fread("SAERVpreddf3.csv",colClasses = c(customer_code="character"))
# mass & Aspire only
table(f1$aspire_flag); table(f1$signature_flag) ;table(f1$insignia_flag); table(f1$abacus_flag)

f2 <- f1 %>% filter (#aspire_flag == "N" & # commented this out, including Aspire 
  signature_flag == "N" &
    insignia_flag == "N" &
    is.na(abacus_flag))
nrow(f2) # 1.5 lakh with only mass; 23k with Aspire
table(f2$aspire_flag)
# only one sa account
table(f2$count_sa); table(f2$count_ca); table(f2$aspire_flag)

f2 <- f2 %>% filter (count_sa == 1)
nrow(f2) # 1.71 lakh

# one SA & no ca account
f2 <- f2 %>% filter (count_ca == 0)
nrow(f2) # 1.67 lakh

table(f2$active) # 1 , cx has one active account, which is a SA account
table(f2$live) # 1 
table(f2$count_deposits) # can have multiple TDs
table(f2$inactive); table(f2$dormant)

# One live account
f2 <- f2 %>% filter (live == 1)

chkdupl<- f2[duplicated(f2$customer_code),]; nrow(chkdupl)

# Filter on BBB business segments******
f2 <- f2 %>% filter (business_segment %in% c(1205,1301,1302,1303,1304,1305,1306,1308,1309,1315,1316,1318,1319))
nrow(f2) # 1.66
# just checks
table(f2$zone_name) # no rural zones
table(f2$revised_constitution)
table(f2$business_segment)

# Minimum bal====2
library(readxl)
minbal <- read_excel("F:/Shubhi/At Risk 2.0/input/SA schemes - mab v2.xlsx")
minbal2 <- minbal %>% mutate(RBIcat = ifelse(Location == "Metro","RBI METRO",
                                             ifelse(Location == "Rural","RBI RURAL",
                                                    ifelse(Location=="Semi-Urban","RBI SEMI URBAN",
                                                           ifelse(Location == "Urban","RBI URBAN","")))))
table(minbal2$RBIcat)
minbal2$Location <- NULL; minbal2$X__1 <- NULL

minbal3null <- minbal2 %>% filter (is.na(RBIcat))
minbal3nonull <- minbal2 %>% filter (!is.na(RBIcat))

#minbal3null$`Scheme Code` <- 
minbal3nullv2 <-rbind(minbal3null,minbal3null,minbal3null,minbal3null)
minbal3nullv2$RBIcat <- NULL
#minbal3nullv2 <- minbal3nullv2 %>% arrange(`Scheme Code`)

rbi <- c("RBI METRO","RBI RURAL","RBI SEMI URBAN","RBI URBAN")
rbi2 <- rep(rbi,each=15); rbi2 # clubs each category in one place
rbi2 <- as.data.frame(rbi2)
colnames(rbi2)[1] <- "RBIcat"

minbal3nullv3 <- cbind(minbal3nullv2,rbi2)

minbal4 <- rbind(minbal3nonull,minbal3nullv3)
minbal4$key <-  paste0(minbal4$`Scheme Code`,minbal4$RBIcat)

chkduplkey <- minbal4[duplicated(minbal4$key),] 
table(chkduplkey$`Scheme Code`) # SBPSA is repeated twice, hence 8 entries

minbal5 <- minbal4[!duplicated(minbal4$key),] 
minbal5 <- minbal5[,c("key","AMB")]
minbal_use <- minbal5

table(f2$rbi_category_desc)
f2$key <- paste0(f2$account_scheme_code,f2$rbi_category_desc)
unique(minbal_use$key); unique(f2$key)

f3 <- dplyr::left_join(f2,minbal_use,by="key")
colSums(is.na(f3))
f3$AMB <- ifelse(f3$account_scheme_code == "SBSTF",0,f3$AMB)
table(f3$account_scheme_code=="SBSTF")

f4 <- f3 %>% filter (!is.na(AMB))
colSums(is.na(f4))
f4[is.na(f4)] <- 0

f41 <- f4 %>% mutate(MABper32 = ifelse((M2_MAB==0),((M3_MAB-M2_MAB)/(M2_MAB+1)),(M3_MAB-M2_MAB)/M2_MAB),
                     MABper21 = ifelse((M1_MAB==0),((M2_MAB-M1_MAB)/(M1_MAB+1)),((M2_MAB-M1_MAB)/M1_MAB)),
                     debitcountper32 = ifelse((M2_debitcount==0),((M3_debitcount-M2_debitcount)/(M2_debitcount+1)),(M3_debitcount-M2_debitcount)/M2_debitcount),
                     debitcountper21 = ifelse((M1_debitcount==0),((M2_debitcount-M1_debitcount)/(M1_debitcount+1)),((M2_debitcount-M1_debitcount)/M1_debitcount)),
                     creditcountper32 = ifelse((M2_creditcount==0),((M3_creditcount-M2_creditcount)/(M2_creditcount+1)),(M3_creditcount-M2_creditcount)/M2_creditcount),
                     creditcountper21 = ifelse((M1_creditcount==0),((M2_creditcount-M1_creditcount)/(M1_creditcount+1)),((M2_creditcount-M1_creditcount)/M1_creditcount)),
                     creditvalueper32 = ifelse((M2_creditvalue==0),((M3_creditvalue-M2_creditvalue)/(M2_creditvalue+1)),(M3_creditvalue-M2_creditvalue)/M2_creditvalue),
                     creditvalueper21 = ifelse((M1_creditvalue==0),((M2_creditvalue-M1_creditvalue)/(M1_creditvalue+1)),((M2_creditvalue-M1_creditvalue)/M1_creditvalue)),
                     debitvalueper32 = ifelse((M2_debitvalue==0),((M3_debitvalue-M2_debitvalue)/(M2_debitvalue+1)),(M3_debitvalue-M2_debitvalue)/M2_debitvalue),
                     debitvalueper21 = ifelse((M1_debitvalue==0),((M2_debitvalue-M1_debitvalue)/(M1_debitvalue+1)),((M2_debitvalue-M1_debitvalue)/M1_debitvalue)),
                     digper32 = ifelse((M2_dig==0),((M3_dig-M2_dig)/(M2_dig+1)),(M3_dig-M2_dig)/M2_dig),
                     digper21 = ifelse((M1_dig==0),((M2_dig-M1_dig)/(M1_dig+1)),((M2_dig-M1_dig)/M1_dig)),
                     mbloginsper32 = ifelse((M2_mblogins==0),((M3_mblogins-M2_mblogins)/(M2_mblogins+1)),(M3_mblogins-M2_mblogins)/M2_mblogins),
                     mbloginsper21 = ifelse((M1_mblogins==0),((M2_mblogins-M1_mblogins)/(M1_mblogins+1)),((M2_mblogins-M1_mblogins)/M1_mblogins)))


f42 <- f41 %>% mutate(MABperM1P3 = ifelse((P3_MAB==0),((M1_MAB-P3_MAB)/(P3_MAB+1)),(M1_MAB-P3_MAB)/P3_MAB),
                      MABperP32 = ifelse((P2_MAB==0),((P3_MAB-P2_MAB)/(P2_MAB+1)),((P3_MAB-P2_MAB)/P2_MAB)),
                      MABperP21 = ifelse((P1_MAB==0),((P2_MAB-P1_MAB)/(P1_MAB+1)),((P2_MAB-P1_MAB)/P1_MAB)),
                      debitcountperM1P3 = ifelse((P3_debitcount==0),((M1_debitcount-P3_debitcount)/(P3_debitcount+1)),(M1_debitcount-P3_debitcount)/P3_debitcount),
                      debitcountperP32 = ifelse((P2_debitcount==0),((P3_debitcount-P2_debitcount)/(P2_debitcount+1)),((P3_debitcount-P2_debitcount)/P2_debitcount)),
                      debitcountperP21 = ifelse((P1_debitcount==0),((P2_debitcount-P1_debitcount)/(P1_debitcount+1)),((P2_debitcount-P1_debitcount)/P1_debitcount)),
                      creditcountperM1P3 = ifelse((P3_creditcount==0),((M1_creditcount-P3_creditcount)/(P3_creditcount+1)),(M1_creditcount-P3_creditcount)/P3_creditcount),
                      creditcountperP32 = ifelse((P2_creditcount==0),((P3_creditcount-P2_creditcount)/(P2_creditcount+1)),((P3_creditcount-P2_creditcount)/P2_creditcount)),
                      creditcountperP21 = ifelse((P1_creditcount==0),((P2_creditcount-P1_creditcount)/(P1_creditcount+1)),((P2_creditcount-P1_creditcount)/P1_creditcount)),
                      creditvalueperM1P3 = ifelse((P3_creditvalue==0),((M1_creditvalue-P3_creditvalue)/(P3_creditvalue+1)),(M1_creditvalue-P3_creditvalue)/P3_creditvalue),
                      creditvalueperP32 = ifelse((P2_creditvalue==0),((P3_creditvalue-P2_creditvalue)/(P2_creditvalue+1)),((P3_creditvalue-P2_creditvalue)/P2_creditvalue)),
                      creditvalueperP21 = ifelse((P1_creditvalue==0),((P2_creditvalue-P1_creditvalue)/(P1_creditvalue+1)),((P2_creditvalue-P1_creditvalue)/P1_creditvalue)),
                      debitvalueperM1P3 = ifelse((P3_debitvalue==0),((M1_debitvalue-P3_debitvalue)/(P3_debitvalue+1)),(M1_debitvalue-P3_debitvalue)/P3_debitvalue),
                      debitvalueperP32 = ifelse((P2_debitvalue==0),((P3_debitvalue-P2_debitvalue)/(P2_debitvalue+1)),((P3_debitvalue-P2_debitvalue)/P2_debitvalue)),
                      debitvalueperP21 = ifelse((P1_debitvalue==0),((P2_debitvalue-P1_debitvalue)/(P1_debitvalue+1)),((P2_debitvalue-P1_debitvalue)/P1_debitvalue)),
                      digperM1P3 = ifelse((P3_dig==0),((M1_dig-P3_dig)/(P3_dig+1)),(M1_dig-P3_dig)/P3_dig),
                      digperP32 = ifelse((P2_dig==0),((P3_dig-P2_dig)/(P2_dig+1)),((P3_dig-P2_dig)/P2_dig)),
                      digperP21 = ifelse((P1_dig==0),((P2_dig-P1_dig)/(P1_dig+1)),((P2_dig-P1_dig)/P1_dig)),
                      mbloginsperM1P3 = ifelse((P3_mblogins==0),((M1_mblogins-P3_mblogins)/(P3_mblogins+1)),(M1_mblogins-P3_mblogins)/P3_mblogins),
                      mbloginsperP32 = ifelse((P2_mblogins==0),((P3_mblogins-P2_mblogins)/(P2_mblogins+1)),((P3_mblogins-P2_mblogins)/P2_mblogins)),
                      mbloginsperP21 = ifelse((P1_mblogins==0),((P2_mblogins-P1_mblogins)/(P1_mblogins+1)),((P2_mblogins-P1_mblogins)/P1_mblogins)))

t1 <- .10 ; t2 <- .5  ; t3 <- .25# seeting thresholds, threshold1 : 10%, threshold 2: 50%

f43 <- f42 %>% mutate(MABfall10Flag = rowSums(f42[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] <= -t1,na.rm = F),
                      MABfall50Flag = rowSums(f42[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] <= -t2,na.rm = F),
                      MABfall25Flag = rowSums(f42[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] <= -t3,na.rm = F),
                      MABgrow10Flag = rowSums(f42[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] >= t1,na.rm = F),
                      MABgrow50Flag = rowSums(f42[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] >= t2,na.rm = F),
                      MABgrow25Flag = rowSums(f42[,c("MABper21","MABper32","MABperM1P3","MABperP32","MABperP21")] >= t3,na.rm = F),
                      debitcountfall10Flag = rowSums(f42[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] <= -t1,na.rm = F),
                      debitcountfall50Flag = rowSums(f42[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] <= -t2,na.rm = F),
                      debitcountfall25Flag = rowSums(f42[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] <= -t3,na.rm = F),
                      debitcountgrow10Flag = rowSums(f42[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] >= t1,na.rm = F),
                      debitcountgrow50Flag = rowSums(f42[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] >= t2,na.rm = F),
                      debitcountgrow25Flag = rowSums(f42[,c("debitcountper21","debitcountper32","debitcountperM1P3","debitcountperP32","debitcountperP21")] >= t3,na.rm = F),
                      creditcountfall10Flag = rowSums(f42[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] <= -t1,na.rm = F),
                      creditcountfall50Flag = rowSums(f42[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] <= -t2,na.rm = F),
                      creditcountfall25Flag = rowSums(f42[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] <= -t3,na.rm = F),
                      creditcountgrow10Flag = rowSums(f42[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] >= t1,na.rm = F),
                      creditcountgrow50Flag = rowSums(f42[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] >= t2,na.rm = F),
                      creditcountgrow25Flag = rowSums(f42[,c("creditcountper21","creditcountper32","creditcountperM1P3","creditcountperP32","creditcountperP21")] >= t3,na.rm = F),
                      debitvaluefall10Flag = rowSums(f42[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] <= -t1,na.rm = F),
                      debitvaluefall50Flag = rowSums(f42[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] <= -t2,na.rm = F),
                      debitvaluefall25Flag = rowSums(f42[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] <= -t3,na.rm = F),
                      debitvaluegrow10Flag = rowSums(f42[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] >= t1,na.rm = F),
                      debitvaluegrow50Flag = rowSums(f42[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] >= t2,na.rm = F),
                      debitvaluegrow25Flag = rowSums(f42[,c("debitvalueper21","debitvalueper32","debitvalueperM1P3","debitvalueperP32","debitvalueperP21")] >= t3,na.rm = F),
                      creditvaluefall10Flag = rowSums(f42[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] <= -t1,na.rm = F),
                      creditvaluefall50Flag = rowSums(f42[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] <= -t2,na.rm = F),
                      creditvaluefall25Flag = rowSums(f42[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] <= -t3,na.rm = F),
                      creditvaluegrow10Flag = rowSums(f42[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] >= t1,na.rm = F),
                      creditvaluegrow50Flag = rowSums(f42[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] >= t2,na.rm = F),
                      creditvaluegrow25Flag = rowSums(f42[,c("creditvalueper21","creditvalueper32","creditvalueperM1P3","creditvalueperP32","creditvalueperP21")] >= t3,na.rm = F),
                      mbloginsfall10Flag = rowSums(f42[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] <= -t1,na.rm = F),
                      mbloginsfall50Flag = rowSums(f42[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] <= -t2,na.rm = F),
                      mbloginsfall25Flag = rowSums(f42[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] <= -t3,na.rm = F),
                      mbloginsgrow10Flag = rowSums(f42[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] >= t1,na.rm = F),
                      mbloginsgrow50Flag = rowSums(f42[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] >= t2,na.rm = F),
                      mbloginsgrow25Flag = rowSums(f42[,c("mbloginsper21","mbloginsper32","mbloginsperM1P3","mbloginsperP32","mbloginsperP21")] >= t3,na.rm = F),
                      digfall10Flag = rowSums(f42[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] <= -t1,na.rm = F),
                      digfall50Flag = rowSums(f42[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] <= -t2,na.rm = F),
                      digfall25Flag = rowSums(f42[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] <= -t3,na.rm = F),
                      diggrow10Flag = rowSums(f42[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] >= t1,na.rm = F),
                      diggrow50Flag = rowSums(f42[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] >= t2,na.rm = F),
                      diggrow25Flag = rowSums(f42[,c("digper21","digper32","digperM1P3","digperP32","digperP21")] >= t3,na.rm = F),
                      MinBalNoFlag = rowSums(f42[,c("P1_MAB","P2_MAB","P3_MAB","M1_MAB","M2_MAB","M3_MAB")] < AMB,na.rm = F),
                      MinBalNo50Flag = rowSums(f42[,c("P1_MAB","P2_MAB","P3_MAB","M1_MAB","M2_MAB","M3_MAB")] < (0.5 * AMB),na.rm = F))

table(f43$mbloginsfall10Flag)
table(f43$creditcountfall10Flag)
table(f43$debitvaluegrow25Flag)
table(f43$creditvaluegrow50Flag)

f44 <- f43 %>% mutate(avgMAB3m= (M1_MAB+M2_MAB+M3_MAB)/3,
                      avgdebitcount3m= (M1_debitcount+M2_debitcount+M2_debitcount)/3,
                      avgcreditcount3m= (M1_creditcount+M2_creditcount+M2_creditcount)/3,
                      avgdebitvalue3m= (M1_debitvalue+M2_debitvalue+M2_debitvalue)/3,
                      avgcreditvalue3m= (M1_creditvalue+M2_creditvalue+M2_creditvalue)/3,
                      avgdig3m = (M1_dig+M2_dig+M3_dig)/3,
                      avgmblogins3m= (M1_mblogins+M2_mblogins+M2_mblogins)/3,
                      
                      avgMAB6m= (P1_MAB+P2_MAB+P3_MAB+M1_MAB+M2_MAB+M3_MAB)/6,
                      avgdebitcount6m= (P1_debitcount+P2_debitcount+P2_debitcount+M1_debitcount+M2_debitcount+M2_debitcount)/6,
                      avgcreditcount6m= (P1_creditcount+P2_creditcount+P2_creditcount+M1_creditcount+M2_creditcount+M2_creditcount)/6,
                      avgdebitvalue6m= (P1_debitvalue+P2_debitvalue+P2_debitvalue+M1_debitvalue+M2_debitvalue+M2_debitvalue)/6,
                      avgcreditvalue6m= (P1_creditvalue+P2_creditvalue+P2_creditvalue+M1_creditvalue+M2_creditvalue+M2_creditvalue)/6,
                      avgdig6m = (P1_dig+P2_dig+P3_dig+M1_dig+M2_dig+M3_dig)/6,
                      avgmblogins6m= (P1_mblogins+P2_mblogins+P2_mblogins+M1_mblogins+M2_mblogins+M2_mblogins)/6)

f45<- f44 %>% mutate(avgMABPrev3m= (P1_MAB+P2_MAB+P3_MAB)/3,
                     avgdebitcountPrev3m= (P1_debitcount+P2_debitcount+P2_debitcount)/3,
                     avgcreditcountPrev3m= (P1_creditcount+P2_creditcount+P2_creditcount)/3,
                     avgdebitvaluePrev3m= (P1_debitvalue+P2_debitvalue+P2_debitvalue)/3,
                     avgcreditvaluePrev3m= (P1_creditvalue+P2_creditvalue+P2_creditvalue)/3,
                     avgdigPrev3m = (P1_dig+P2_dig+P3_dig)/3,
                     avgmbloginsPrev3m= (P1_mblogins+P2_mblogins+P2_mblogins)/3)

f5 <- f45 %>% mutate (change3mMAB = ifelse((avgMABPrev3m==0),((avgMAB3m-avgMABPrev3m)/(avgMABPrev3m+1)),(avgMAB3m-avgMABPrev3m)/avgMABPrev3m),
                      change3mdebitcount = ifelse((avgdebitcountPrev3m==0),((avgdebitcount3m-avgdebitcountPrev3m)/(avgdebitcountPrev3m+1)),(avgdebitcount3m-avgdebitcountPrev3m)/avgdebitcountPrev3m),
                      change3mdebitvalue = ifelse((avgdebitvaluePrev3m==0),((avgdebitvalue3m-avgdebitvaluePrev3m)/(avgdebitvaluePrev3m+1)),(avgdebitvalue3m-avgdebitvaluePrev3m)/avgdebitvaluePrev3m),
                      change3mcreditvalue = ifelse((avgcreditvaluePrev3m==0),((avgcreditvalue3m-avgcreditvaluePrev3m)/(avgcreditvaluePrev3m+1)),(avgcreditvalue3m-avgcreditvaluePrev3m)/avgcreditvaluePrev3m),
                      change3mcreditcount = ifelse((avgcreditcountPrev3m==0),((avgcreditcount3m-avgcreditcountPrev3m)/(avgcreditcountPrev3m+1)),(avgcreditcount3m-avgcreditcountPrev3m)/avgcreditcountPrev3m),
                      change3mdig = ifelse((avgdigPrev3m==0),((avgdig3m-avgdigPrev3m)/(avgdigPrev3m+1)),(avgdig3m-avgdigPrev3m)/avgdigPrev3m),
                      change3mmblogins = ifelse((avgmbloginsPrev3m==0),((avgmblogins3m-avgmbloginsPrev3m)/(avgmbloginsPrev3m+1)),(avgmblogins3m-avgmbloginsPrev3m)/avgmbloginsPrev3m))


colSums(is.na(f5))
## mbregdays
quantile(f5$mb_reg_days,c(0.01,0.02,0.03,0.1,0.2,0.3,0.4,0.50,0.6,0.7,0.8,0.9,0.95,0.99,1),na.rm = T)

count(f5[f5$mb_reg_days==0,])/nrow(f5) # 41% 0 values (0 + NAs)
count(f5[f5$mb_reg_days==0 & f5$mbregNA== 1,])/nrow(f5) # 40% is just NAs
count(f5[f5$mb_reg_days<0,])/nrow(f5) # 0.4% negative values

# if date is negative, or if cx reg on same date, making it 1
# if they actually did register, making day =1 , to differentiate it from cases with 0 value (did not register)
f5 <- f5 %>% mutate(mb_reg_days= ifelse((mb_reg_days ==0 & mbregNA == 0) | (mb_reg_days<0),1,mb_reg_days )) 
# Box plot 
#boxplot(f5$mb_reg_days)
val99 <- quantile(f5$mb_reg_days,0.97); val99 <- as.numeric(val99) #97
f5$mb_reg_days <- ifelse(f5$mb_reg_days>val99,val99,f5$mb_reg_days) 

#f5$mb_reg_days <- - (f5$mb_reg_days) # converting it to negative

# M3_MAB
var<- f5$M3_MAB
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_MAB <- ifelse(f5$M3_MAB>val99,val99,f5$M3_MAB) 

# M3_debitcount
var<- f5$M3_debitcount
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_debitcount <- ifelse(f5$M3_debitcount>val99,val99,f5$M3_debitcount) 
var<- f5$M3_debitcount
quanExplore(var)

# M3_creditcount
var<- f5$M3_creditcount
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_creditcount <- ifelse(f5$M3_creditcount>val99,val99,f5$M3_creditcount) 
var<- f5$M3_creditcount
quanExplore(var)

# M3_debitvalue
var<- f5$M3_debitvalue
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_debitvalue <- ifelse(f5$M3_debitvalue>val99,val99,f5$M3_debitvalue) 
var<- f5$M3_debitvalue
quanExplore(var)

# M1_creditvalue
var<- f5$M1_creditvalue
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M1_creditvalue <- ifelse(f5$M1_creditvalue>val99,val99,f5$M1_creditvalue) 
var<- f5$M1_creditvalue
quanExplore(var)

# M3_creditvalue
var<- f5$M3_creditvalue
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_creditvalue <- ifelse(f5$M3_creditvalue>val99,val99,f5$M3_creditvalue) 
var<- f5$M3_creditvalue
quanExplore(var)

# M3_mblogins
var<- f5$M3_mblogins
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_mblogins <- ifelse(f5$M3_mblogins>val99,val99,f5$M3_mblogins) 
var<- f5$M3_mblogins
quanExplore(var)

# M3_dig
var<- f5$M3_dig
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$M3_dig <- ifelse(f5$M3_dig>val99,val99,f5$M3_dig) 
var<- f5$M3_dig
quanExplore(var)

# MABper21
var<- f5$MABper21
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$MABper21 <- ifelse(f5$MABper21>val99,val99,f5$MABper21) 
var<- f5$MABper21
quanExplore(var)

# MABper32
var<- f5$MABper32
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$MABper32 <- ifelse(f5$MABper32>val99,val99,f5$MABper32) 
var<- f5$MABper32
quanExplore(var)

# debitcountper21
var<- f5$debitcountper21
#explore(var)
quantile(var,0.995)  # 99.5 for this
val99 <- quantile(var,0.995); val99 <- as.numeric(val99)

f5$debitcountper21 <- ifelse(f5$debitcountper21>val99,val99,f5$debitcountper21) 
var<- f5$debitcountper21
quanExplore(var)

# MABper32
var<- f5$debitcountper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99)

f5$debitcountper32 <- ifelse(f5$debitcountper32>val99,val99,f5$debitcountper32) 
var<- f5$debitcountper32
quanExplore(var)

# debitvalueper21
var<- f5$debitvalueper21
#explore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99)

f5$debitvalueper21 <- ifelse(f5$debitvalueper21>val99,val99,f5$debitvalueper21) 
var<- f5$debitvalueper21
quanExplore(var)

# debitvalueper32
var<- f5$debitvalueper32
#explore(var)
val99 <- quantile(var,0.95); val99 <- as.numeric(val99) # with 95% here

f5$debitvalueper32 <- ifelse(f5$debitvalueper32>val99,val99,f5$debitvalueper32) 
var<- f5$debitvalueper32
quanExplore(var)

# creditcountper21
var<- f5$creditcountper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$creditcountper21 <- ifelse(f5$creditcountper21>val99,val99,f5$creditcountper21) 
var<- f5$creditcountper21
quanExplore(var)

# creditcountper32
var<- f5$creditcountper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$creditcountper32 <- ifelse(f5$creditcountper32>val99,val99,f5$creditcountper32) 
var<- f5$creditcountper32
quanExplore(var)

# creditvalueper21
var<- f5$creditvalueper21
#explore(var)
val99 <- quantile(var,0.95); val99 <- as.numeric(val99) # with 95% here

f5$creditvalueper21 <- ifelse(f5$creditvalueper21>val99,val99,f5$creditvalueper21) 
var<- f5$creditvalueper21
quanExplore(var)

# creditvalueper32
var<- f5$creditvalueper32
#explore(var)
val99 <- quantile(var,0.95); val99 <- as.numeric(val99) # with 95% here

f5$creditvalueper32 <- ifelse(f5$creditvalueper32>val99,val99,f5$creditvalueper32) 
var<- f5$creditvalueper32
quanExplore(var)

# mbloginsper21
var<- f5$mbloginsper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$mbloginsper21 <- ifelse(f5$mbloginsper21>val99,val99,f5$mbloginsper21) 
var<- f5$mbloginsper21
quanExplore(var)

# mbloginsper32
var<- f5$mbloginsper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$mbloginsper32 <- ifelse(f5$mbloginsper32>val99,val99,f5$mbloginsper32) 
var<- f5$mbloginsper32
quanExplore(var)

# digper21
var<- f5$digper21
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$digper21 <- ifelse(f5$digper21>val99,val99,f5$digper21) 
var<- f5$digper21
quanExplore(var)

# digper32
var<- f5$digper32
#explore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99.5% here

f5$digper32 <- ifelse(f5$digper32>val99,val99,f5$digper32) 
var<- f5$digper32
quanExplore(var)

# avgMAB6m
var<- f5$avgMAB6m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgMAB6m <- ifelse(f5$avgMAB6m>val99,val99,f5$avgMAB6m) 
var<- f5$avgMAB6m
quanExplore(var)

# avgMAB3m
var<- f5$avgMAB3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgMAB3m <- ifelse(f5$avgMAB3m>val99,val99,f5$avgMAB3m) 
var<- f5$avgMAB3m
quanExplore(var)

# avgdebitcount6m
var<- f5$avgdebitcount6m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitcount6m <- ifelse(f5$avgdebitcount6m>val99,val99,f5$avgdebitcount6m) 
var<- f5$avgdebitcount6m
quanExplore(var)

# avgdebitvalue6m
var<- f5$avgdebitvalue6m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitvalue6m <- ifelse(f5$avgdebitvalue6m>val99,val99,f5$avgdebitvalue6m) 
var<- f5$avgdebitvalue6m
quanExplore(var)

# avgcreditcount6m
var<- f5$avgcreditcount6m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditcount6m <- ifelse(f5$avgcreditcount6m>val99,val99,f5$avgcreditcount6m) 
var<- f5$avgcreditcount6m
quanExplore(var)

# avgcreditvalue6m
var<- f5$avgcreditvalue6m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditvalue6m <- ifelse(f5$avgcreditvalue6m>val99,val99,f5$avgcreditvalue6m) 
var<- f5$avgcreditvalue6m
quanExplore(var)


# avgdebitvalue3m
var<- f5$avgdebitvalue3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitvalue3m <- ifelse(f5$avgdebitvalue3m>val99,val99,f5$avgdebitvalue3m) 
var<- f5$avgdebitvalue3m
quanExplore(var)

# avgdebitvalue3m
var<- f5$avgcreditvalue3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditvalue3m <- ifelse(f5$avgcreditvalue3m>val99,val99,f5$avgcreditvalue3m) 
var<- f5$avgcreditvalue3m
quanExplore(var)


# avgdebitcount3m
var<- f5$avgdebitcount3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitcount3m <- ifelse(f5$avgdebitcount3m>val99,val99,f5$avgdebitcount3m) 
var<- f5$avgdebitcount3m
quanExplore(var)

# avgdebitcount3m
var<- f5$avgcreditcount3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditcount3m <- ifelse(f5$avgcreditcount3m>val99,val99,f5$avgcreditcount3m) 
var<- f5$avgcreditcount3m
quanExplore(var)

# avgMABPrev3m
var<- f5$avgMABPrev3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgMABPrev3m <- ifelse(f5$avgMABPrev3m>val99,val99,f5$avgMABPrev3m) 
var<- f5$avgMABPrev3m
quanExplore(var)

#imputefn <- function (x) {ifelse(x>val99,val99,x)}

chkfun <- f5

# avgdebitcountPrev3m
var<- f5$avgdebitcountPrev3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitcountPrev3m <- ifelse(f5$avgdebitcountPrev3m>val99,val99,f5$avgdebitcountPrev3m) 
var<- f5$avgdebitcountPrev3m
quanExplore(var)

# avgcreditcountPrev3m
var<- f5$avgcreditcountPrev3m
quanExplore(var)
val99 <- quantile(var,0.995); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditcountPrev3m <- ifelse(f5$avgcreditcountPrev3m>val99,val99,f5$avgcreditcountPrev3m) 
var<- f5$avgcreditcountPrev3m
quanExplore(var)

# avgcreditvaluePrev3m
var<- f5$avgcreditvaluePrev3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgcreditvaluePrev3m <- ifelse(f5$avgcreditvaluePrev3m>val99,val99,f5$avgcreditvaluePrev3m) 
var<- f5$avgcreditvaluePrev3m
quanExplore(var)

# avgdebitvaluePrev3m
var<- f5$avgdebitvaluePrev3m
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$avgdebitvaluePrev3m <- ifelse(f5$avgdebitvaluePrev3m>val99,val99,f5$avgdebitvaluePrev3m) 
var<- f5$avgdebitvaluePrev3m
quanExplore(var) 

# change3mMAB
var<- f5$change3mMAB
quanExplore(var)
val99 <- quantile(var,0.99); val99 <- as.numeric(val99) # with 99% here

f5$change3mMAB <- ifelse(f5$change3mMAB>val99,val99,f5$change3mMAB) 
var<- f5$change3mMAB
quanExplore(var) 

# change3mcreditvalue
var<- f5$change3mcreditvalue
quanExplore(var)
val99 <- quantile(var,0.98); val99 <- as.numeric(val99) # with 98% here

f5$change3mcreditvalue <- ifelse(f5$change3mcreditvalue>val99,val99,f5$change3mcreditvalue) 
var<- f5$change3mcreditvalue
quanExplore(var) 

# change3mdebitvalue
var<- f5$change3mdebitvalue
quanExplore(var)
val99 <- quantile(var,0.98); val99 <- as.numeric(val99) # with 98% here

f5$change3mdebitvalue <- ifelse(f5$change3mdebitvalue>val99,val99,f5$change3mdebitvalue) 
var<- f5$change3mdebitvalue
quanExplore(var) 

names(f5)

f6 <- f5 %>% select(-c(cif_branch_code,cif_branch_name,zone_name,cluster,
                       create_date,business_segment,constitution_code,
                       revised_constitution,insignia_flag,signature_flag,abacus_flag,
                       active,inactive,dormant,live,count_ca,count_sa,count_deposits,
                       branch_code,account_number,account_scheme_code,account_creation_date,
                       freeze_desc,lien_flag,mop,AMB))


f6 <- f6 %>% select(-c(mbregNA,contains("per21"),contains("perP32"),contains("perP21"),
                       contains("perM1P3"),contains("P1_"),contains("P2_"),contains("P3_"),
                       contains("M1_"),contains("M2_"),contains("iblogins"),contains("posecom"))) # also removed debit/credit & other txn flags

names(f6)
table(f6$aspire_flag)
f6$aspire_flag <- ifelse(f6$aspire_flag == "Y",1,0)
table(f6$aspire_flag)

library(dummies)
atrisk1 <- dummy.data.frame(f6,names = c("rbi_category_desc"),sep="_")
str(atrisk1)
atrisk1$`rbi_category_desc_RBI RURAL` <- NULL
#dfsample <- atrisk1[1:50,]
#write_xlsx(dfsample,"dfwithDummy.xlsx")

getwd()
#write.csv(atrisk1,"predictionSetSAERV.csv",row.names = F)
#atrisk2 <- atrisk1 %>% select(-c(customer_code,RiskMonth))

#names(atrisk2)
#str(atrisk2,len=ncol(atrisk2))


# Making Predictions=====
#setwd("F:\\Shubhi\\At Risk\\5_Aug20")
#atrisk1 <- fread("predictionSetSAERV.csv",colClasses = c(customer_code="character"))

atrisk2 <- atrisk1 %>% select(-c(customer_code))

atrisk3 <- atrisk2 %>% select("debitvalueper32",	"M3_debitcount",
                              "M3_MAB",	"M3_creditvalue",	"creditvalueper32",
                              "M3_dig",	"avgdebitcount6m",	"MABper32",
                              "M3_debitvalue",	"avgdebitcount3m",	"avgdebitcountPrev3m",
                              "M3_creditcount",	"mb_reg_days",	"change3mMAB",
                              "avgcreditcount6m",	"avgMAB3m",	"debitcountgrow10Flag",
                              "avgdebitvalue6m",	"debitvaluegrow10Flag",	"avgdebitvaluePrev3m",
                              "debitcountfall10Flag",	"avgMABPrev3m",	"avgdebitvalue3m",
                              "debitcountper32",	"avgcreditvalue3m",	"avgMAB6m",
                              "digper32",	"avgcreditvalue6m",	"change3mdebitvalue",
                              "avgcreditcount3m",	"change3mcreditvalue",	"change3mdebitcount",
                              "avgcreditvaluePrev3m",	"change3mmblogins",	"M3_mblogins",
                              "change3mcreditcount",	"change3mdig",	"mbloginsper32",
                              "creditcountper32",	"avgcreditcountPrev3m",	"MABgrow10Flag",
                              "avgdig6m",	"avgmblogins6m",	"avgmblogins3m",
                              "avgdigPrev3m",	"debitcountfall50Flag",	"avgmbloginsPrev3m",
                              "MinBalNoFlag",	"avgdig3m",	"rbi_category_desc_RBI METRO")

Testing <- atrisk3

setwd("F:\\Shubhi\\At Risk 2.0\\v2\\SA\\v3\\data\\")
Training <- fread("SAERVtraining_top50features.csv")

# Making Predictions=====

setdiff(names(Testing),names(Training))
Testing$key <- NULL
Testing$AtRisk_flag <- NA
setdiff(names(Training),names(Testing))
names(Testing)
library(xgboost)

seecol <- colnames(Training)
Testing2 <- Testing %>% select_at(.vars = seecol)
names(Testing2)

names(Testing)
names(Training)
identical(Testing2,Training)
setdiff(str(Testing2),str(Training))

Testing2$AtRisk_flag <- as.integer(Testing2$AtRisk_flag)
Testing <- Testing2
testdataxg <- as.matrix(Testing[,-c(1)])
traindataxg <- as.matrix(Training[,-c(1)])

testxglabel <- Testing$AtRisk_flag
trainxglabel <- Training$AtRisk_flag

dtrain <- xgb.DMatrix(data = traindataxg,label = trainxglabel)
#dtrain <- xgb.DMatrix(data = traindataxg)
dtest <- xgb.DMatrix(data = testdataxg)
#dtest <- xgb.DMatrix(data = testdataxg,label= testxglabel)
str(Testing)

#t1====
params <- list(booster = "gbtree", objective =  "binary:logistic", eta=0.3, gamma=0, max_depth=8,
               min_child_weight=1, subsample=1, colsample_bytree=1,scale_pos_weight= 9,set.seed=123)
# xgb1 <- xgb.train(params = params ,data = dtrain, nrounds = 100, watchlist = list(val=dtest,train=dtrain), 
#                   print_every_n = 10, early_stopping_rounds = 40, maximize = F, eval_metric = "error")
xgb1 <- xgb.train(params = params ,data = dtrain, nrounds = 100,watchlist = list(train=dtrain),
                  print_every_n = 10, early_stopping_rounds = 40, maximize = F, eval_metric = "error")

# Prediction
# t1 Prediction with diff cutoff====
xgbpred <- predict(xgb1,dtest)
#xgbpred
min(xgbpred); median(xgbpred); max(xgbpred); mean(xgbpred)
xgbpred2 <- ifelse (xgbpred > 0.3889994,1,0) ## binary::logistic return output probalities rather than labels

#Testing3 <- Testing
#names(Testing3)

Testing3 <- cbind(atrisk1,xgbpred,xgbpred2)
table(Testing3$xgbpred2)
24912/(24912+141356)

str(Testing3)
getwd()
setwd("F:\\Shubhi\\At Risk 2.0\\Automating Data Pulling\\checks")
#write.csv(Testing3,"chkoutputSAERV_v2.csv",row.names = F)

final_pred <- Testing3 %>% select(customer_code,xgbpred,xgbpred2)
str(final_pred)
#setwd("F:\\Shubhi\\At Risk\\5_Aug20")
#write.csv(final_pred,"SAERV_predictions1_v2.csv",row.names = F)
library(lubridate)
output_month <- today()
output_month2 <- format(output_month,"%b_%y")

#setwd("F:\\Shubhi\\At Risk 2.0\\Automating Data Pulling\\output")

setwd('//FSCLUS02/HADOOP$/Campaign_Master_File/Results/Rishi/Shubhi/SA_ERV')

setnames(final_pred,old="xgbpred",new="SAERV_propensity")
setnames(final_pred,old="xgbpred2",new="SAERV_Atrisk_Flag")

write.csv(final_pred, paste0("SAERV_predictions",output_month2,".csv"), row.names=F)
### for scheduling, comment out all places where we a get an error(code that is not relevant, which I forgot to comment)


### conversion====
library(readxl)
library(data.table)
library(dplyr)
options(scipen = 999)

setwd("F:\\Shubhi\\At Risk\\5_Aug20\\outputs")
list.files()

# Datasets given : Test
santb <- read_excel("SA_NTB_13_v1.xlsx",sheet="test")
saerv <- read_excel("SA_ERV_13_v2.xlsx",sheet="test")
cantb <- read_excel("CA_NTB_13_v1.xlsx",sheet="test")
caerv <- read_excel("CA_ERV_13_v1.xlsx",sheet="test")

setdiff(colnames(saerv),colnames(santb))
setdiff(colnames(santb),colnames(saerv))
setdiff(colnames(saerv),colnames(caerv))
setdiff(colnames(saerv),colnames(cantb))

santb$Targeted_Random <- NA;cantb$Targeted_Random <- NA;caerv$Targeted_Random <- NA

santb$Set_type <- "SANTB";saerv$Set_type <- "SAERV";cantb$Set_type <- "CANTB";caerv$Set_type <- "CAERV"
a<- intersect(colnames(santb),colnames(saerv));b <- intersect(colnames(cantb),colnames(caerv));c<- intersect(a,b)
d<- c # columns in test
a;b;d 
santb <- subset(santb,select= c) ;saerv <- subset(saerv,select= c);cantb <- subset(cantb,select= c) ;caerv <- subset(caerv,select= c) 
compile1 <- do.call(rbind,list(santb,saerv,cantb,caerv))
compile1$Set_group <- "Test"

# Datasets given : Control
list.files()
santb <- read_excel("SA_NTB_13_v1.xlsx",sheet="control")
saerv <- read_excel("SA_ERV_13_v2.xlsx",sheet="control")
cantb <- read_excel("CA_NTB_13_v1.xlsx",sheet="control")
caerv <- read_excel("CA_ERV_13_v1.xlsx",sheet="control")
santb$Set_type <- "SANTB"
saerv$Set_type <- "SAERV"
cantb$Set_type <- "CANTB"
caerv$Set_type <- "CAERV"

a<- intersect(colnames(santb),colnames(saerv))
#a
b <- intersect(colnames(cantb),colnames(caerv))
#b
c<- intersect(a,b)
c <- intersect(c,d)  # test and control columns
c

santb <- subset(santb,select= c) ;saerv <- subset(saerv,select= c) 
cantb <- subset(cantb,select= c) ;caerv <- subset(caerv,select= c)

compile2 <- do.call(rbind,list(santb,saerv,cantb,caerv))
compile2$Set_group <- "Control"
compile2$Targeted_Random <- NA

rm(a); rm(b); rm(c) ; rm(d)

a <- intersect(colnames(compile1),colnames(compile2))  # Finding common col. b/w test and control groups
compile1 <- subset(compile1,select = a)
compile2 <- subset(compile2,select = a)

compile3 <- rbind(compile1,compile2)  # compiling test and control both
compile3$Set_number <- "13th"  # update the relevant number ******
backup <- compile3 # making a copy 

# Set: 9	End of July	; 15th Aug' - 15th Oct'2020
# Before Month : July
# M+1	 : Nov 20 ;   M+3 - Jan21

# set_type : santb, saerv etc. ; set_group : test/Control ; set_number : ninth etc.
compile3 <- compile3 %>% select(customer_code,account_number,customer_tagging,Set_type,Set_group,Targeted_Random,
                                Set_number,UPH_ph,TPH_ph)
table(compile3$Targeted_Random)
setnames(compile3,old="UPH_ph",new="UPH_before")

# Disposition====
setwd("F:\\Shubhi\\At Risk conversions\\13th set\\disp")
list.files()
santb <- read_excel('SANTB.xlsx')#,sheet="test")
saerv <- read_excel('SAERV.xlsx')#,sheet="test")
cantb <- read_excel('CANTB.xlsx',sheet="test")
caerv <- read_excel('CAERV.xlsx',sheet="test")  

# comparing counts with given test set
table(compile1$Set_type) # given... test set
nrow(caerv);nrow(cantb);nrow(saerv);nrow(santb) ; # disposition, would be slightly less than given test set

names(santb)
names(saerv)
names(cantb)
names(caerv)

cantb <- cantb %>% select(customer_code,Disposition)
caerv<- caerv %>% select(customer_code,Disposition)

#setnames(caerv,old="status",new="Status")

# caerv$MAB <- NULL; cantb$MAB <- NULL

# c("Account_Number","Card_Numbers", "Cust_ID","Gender_P_Cust_Name","Branch_Name","Product_Type_Desc","State","Mobile_No"          "Email_Id"           "TZ"                
#    ,"Dispositions","Status" )
setnames(santb,old="CIF",new="customer_code");setnames(saerv,old="CIF",new="customer_code")
ren <- setdiff(colnames(santb),colnames(saerv))
ren
ren <- setdiff(colnames(cantb),colnames(caerv))
ren

colnames(santb)

a<- intersect(colnames(santb),colnames(saerv))
b <- intersect(colnames(cantb),colnames(caerv))
#c<- intersect(a,b)

santb <- subset(santb,select= a) 
saerv <- subset(saerv,select= a) 
cantb <- subset(cantb,select= b) 
caerv <- subset(caerv,select= b) 

#call_centre <- do.call(rbind,list(santb,saerv,cantb,caerv))
call_centre_ca <- do.call(rbind,list(cantb,caerv))
call_centre_sa <- do.call(rbind,list(santb,saerv))
names(call_centre_ca)

disp_map <- read_excel("Disp mapping.xlsx",sheet="use")
nrow(call_centre_ca)
call_centre_ca<- left_join(call_centre_ca,disp_map,by=c("Disposition"="Dispositions"))

names(call_centre_sa)

call_centre_sa <- call_centre_sa %>% select(customer_code,Disposition,Status)

table(call_centre_ca$Disposition) 
table(call_centre_ca$Status)
colSums(is.na(call_centre_ca))

cc_na <- call_centre_ca %>% filter(is.na(Status))
table(cc_na$Disposition)

call_centre <- rbind(call_centre_ca,call_centre_sa)
# chk_disp <- call_centre %>% filter (Status == "Non Contactable")
# unique(chk_disp$Disposition)
# [1] "A- Ringing / Not reachable/ switched off /Out of Coverage/Network announcement"
# [2] "B- Temporarily disconnected"
#chk_disp <- call_centre %>% filter (Status == "Successful Connect")
#unique(chk_disp$Disposition)
# [1] "Funding/M2/ Credit Activation interested" "MB/NB Registration  Interested"          
# [3] "Product pitched but Not INT"              "Callback_Followup"                       
# [5] "Lead Generated"                           "Dc Activation interested"                
# [7] "Engagement_Succesful"                     "FD/RD - Lead converted" 
#chk_disp <- call_centre %>% filter (Status == "Unsuccessful Connect")
#unique(chk_disp$Disposition)
# [1] "CallBack"                                    "C- Third Party Contact"                     
# [3] "P- Customer refused to Speak Not Interested" "D- Language Barrier"                        
# [5] "Wrong Number SF to be raised"                "Service/Wkit issues - SF to be raised"   
# [7] "Irate customer DND" 
table(cc_na$Disposition)

call_centre$Status <- ifelse(call_centre$Disposition %in% c("Call back","Lang barrier",
                                                            "Refuse to speak","Third party contact"),
                             "Unsuccessful Connect",call_centre$Status)

cc_na <- call_centre %>% filter(is.na(Status));table(cc_na$Disposition)

call_centre2 <- call_centre[,c("customer_code","Status")]# ,"Disposition" Account_Number
str(call_centre2)
colSums(is.na(call_centre2))
table(call_centre2$Status)
call_centre2$Status <- ifelse(call_centre2$Status == "Unsuccessful Connect","Unsuccessful Connects",call_centre2$Status)
call_centre2$Status <- ifelse(call_centre2$Status == "Unsuccesful Connects","Unsuccessful Connects",call_centre2$Status)

table(call_centre2$Status)

#compile4 <- left_join(compile3,call_centre2,by=c("account_number"="Account_Number"))
compile4 <- left_join(compile3,call_centre2,by="customer_code")
nrow(compile4)-nrow(compile3)

colSums(is.na(compile4))
# na count for disp/ status should be slightly greater than control count
# ( control + few cx in test set that weren't considered)
compile4[is.na(compile4)] <- 0
table(compile4$Status) # 0 for control/ eliminated test set cx
table(compile4$Set_group) # to get a sense of control count

names(compile4)
str(compile4,list.len=ncol(compile4))

# Pulling from SQL====2
library(RODBC)
library(sqldf)  
conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

# before txns
before_cx <- sqlQuery(conn,paste ("select customer_code,
                                  case when((( inactive = live or ((inactive+dormant)= live)) and inactive>0)) then 1 else 0 end as inactive_flag,
                                  case when(dormant = live and dormant>0 ) then 1 else 0 end as dormant_flag,
                                  mab as mab_bal,netbanking_reg,mb_reg,
                                  isnull(netbanking_usage,0) as netbanking_usage,
                                  isnull(mb_usage,0) as mb_usage,
                                  isnull (total_branch_txns,0) as total_branch_txns,
                                  (isnull (debit_card_pos_usage_count,0) + isnull (debit_card_ecom_usage_count,0)) as DC_pos_ecom,
                                  (isnull(netbanking_usage,0) + isnull(mb_usage,0)) as Digital_txns,
                                  (isnull (total_branch_txns,0) + isnull(netbanking_usage,0) + isnull(mb_usage,0) + isnull(debit_card_pos_usage_count,0) + isnull(debit_card_ecom_usage_count,0) + isnull(atm_withdraw,0)) as Total_txns
                                  from dbo.Al_DL_Customer_Master
                                  where balance_date = '2020-08-31'"))

before_cx2 <- before_cx
str(before_cx2)
before_cx2$customer_code <- as.character(before_cx2$customer_code)
table(before_cx2$inactive_flag)
table(before_cx2$dormant_flag)
colnames(before_cx2) <- paste0(colnames(before_cx2),"_before")
colnames(before_cx2)[1] <- "customer_code"        

before_cx2 <- before_cx2[!duplicated(before_cx2$customer_code),]


compile5 <- left_join(compile4,before_cx2,by="customer_code")


# After months' data
#M1

after_cx <- sqlQuery(conn,paste ("select customer_code,
                                 case when((( inactive = live or ((inactive+dormant)= live)) and inactive>0)) then 1 else 0 end as inactive_flag,
                                 case when(dormant = live and dormant>0 ) then 1 else 0 end as dormant_flag,
                                 mab,netbanking_reg,mb_reg,
                                 isnull(netbanking_usage,0) as netbanking_usage,
                                 isnull(mb_usage,0) as mb_usage,
                                 isnull (total_branch_txns,0) as total_branch_txns,
                                 (isnull (debit_card_pos_usage_count,0) + isnull (debit_card_ecom_usage_count,0)) as DC_pos_ecom,
                                 (isnull(netbanking_usage,0) + isnull(mb_usage,0)) as Digital_txns,
                                 (isnull (total_branch_txns,0) + isnull(netbanking_usage,0) + isnull(mb_usage,0) + isnull(debit_card_pos_usage_count,0) + isnull(debit_card_ecom_usage_count,0) + isnull(atm_withdraw,0)) as Total_txns
                                 from dbo.Al_DL_Customer_Master
                                 where balance_date = '2020-10-31'"))# '2020-11-30'

colnames(after_cx) <- paste0(colnames(after_cx),"_cx_M1")
colnames(after_cx) [1] <- "customer_code"
after_cx$customer_code <- as.character(after_cx$customer_code)

after_cx <- after_cx[!duplicated(after_cx$customer_code),]

compile5 <- left_join(compile5,after_cx,by="customer_code")

# M3: Jan21
after_cx <- sqlQuery(conn,paste ("select customer_code,
                                 case when((( inactive = live or ((inactive+dormant)= live)) and inactive>0)) then 1 else 0 end as inactive_flag,
                                 case when(dormant = live and dormant>0 ) then 1 else 0 end as dormant_flag,
                                 mab,netbanking_reg,mb_reg,
                                 isnull(netbanking_usage,0) as netbanking_usage,
                                 isnull(mb_usage,0) as mb_usage,
                                 isnull (total_branch_txns,0) as total_branch_txns,
                                 (isnull (debit_card_pos_usage_count,0) + isnull (debit_card_ecom_usage_count,0)) as DC_pos_ecom,
                                 (isnull(netbanking_usage,0) + isnull(mb_usage,0)) as Digital_txns,
                                 (isnull (total_branch_txns,0) + isnull(netbanking_usage,0) + isnull(mb_usage,0) + isnull(debit_card_pos_usage_count,0) + isnull(debit_card_ecom_usage_count,0) + isnull(atm_withdraw,0)) as Total_txns
                                 from dbo.Al_DL_Customer_Master
                                 where balance_date = '2021-01-31'"))

colnames(after_cx) <- paste0(colnames(after_cx),"_cx_M3")
colnames(after_cx) [1] <- "customer_code"
after_cx$customer_code <- as.character(after_cx$customer_code)
compile5 <- left_join(compile5,after_cx,by="customer_code")
# 
# M5 : Aug ; from the latest month, also extract ib_reg_date, mb_reg_date
# after_cx <- sqlQuery(conn,paste ("select customer_code,
# case when((( inactive = live or ((inactive+dormant)= live)) and inactive>0)) then 1 else 0 end as inactive_flag,
# case when(dormant = live and dormant>0 ) then 1 else 0 end as dormant_flag,
# mab,netbanking_reg,mb_reg,
# isnull(netbanking_usage,0) as netbanking_usage,
# isnull(mb_usage,0) as mb_usage,
# isnull (total_branch_txns,0) as total_branch_txns,
# (isnull (debit_card_pos_usage_count,0) + isnull (debit_card_ecom_usage_count,0)) as DC_pos_ecom,
# (isnull(netbanking_usage,0) + isnull(mb_usage,0)) as Digital_txns,
# (isnull (total_branch_txns,0) + isnull(netbanking_usage,0) + isnull(mb_usage,0) + isnull(debit_card_pos_usage_count,0) + isnull(debit_card_ecom_usage_count,0) + isnull(atm_withdraw,0)) as Total_txns
# ---,ib_registration_date, mob_registration_date
# from dbo.DL_Customer_Master  --- DL might have to make it AL_DL, in some other case *****
# ---where balance_date = '2020-05-31'"))  # latest month
# nrow(after_cx)

#library(lubridate)
# after_cx$ib_registration_date <- ymd(after_cx$ib_registration_date)
# after_cx$mob_registration_date <- ymd(after_cx$mob_registration_date)
# after_cx$ib_reg_flag <- ifelse(after_cx$ib_registration_date >= '2020-01-15' & after_cx$ib_registration_date <= '2020-03-10',1,0)
# after_cx$mb_reg_flag <- ifelse(after_cx$mob_registration_date >= '2020-01-15' & after_cx$mob_registration_date <= '2020-03-10',1,0)
# chk_aftercx <- after_cx[,c("ib_registration_date","mob_registration_date","ib_reg_flag","mb_reg_flag")]
#colnames(after_cx) <- paste0(colnames(after_cx),"_cx_M5")
#colnames(after_cx) [1] <- "customer_code"
#after_cx$customer_code <- as.character(after_cx$customer_code)
#compile5 <- left_join(compile5,after_cx,by="customer_code")

# ph : Only M1 &M3 available, coz analysis happening in Sep beginning
# Ph files for products
# M+1	  M+3	  M+5
# apr  june	  aug

# PH files: after======
setwd("F:\\FlatFiles_Model\\ph")
list.files()

ph <- fread("PH_Customer_file_2020_11_30.csv",colClasses=c(customer_code="character"))
names(ph)
# Locker 	RD	FD	ISA	Invest First	ASBA	MF	uph
ph1 <- ph[,c("customer_code","locker","rd","fd","ISA","Invest1_Flag","asba_flag","MF_Flag","UPH")]
colnames(ph1)<- paste0(colnames(ph1),"_ph_M1")
colnames(ph1) [1] <- "customer_code"
compile6 <- left_join(compile5,ph1,by='customer_code')                       

# M3 # Jan21*************
ph <- fread("PH_Customer_file_2021_01_31.csv",colClasses=c(customer_code="character"))
names(ph)
# Locker 	RD	FD	ISA	Invest First	ASBA	MF	uph
ph1 <- ph[,c("customer_code","locker","rd","fd","ISA","Invest1_Flag","asba_flag","MF_Flag","UPH")]
colnames(ph1)<- paste0(colnames(ph1),"_ph_M3")
colnames(ph1) [1] <- "customer_code"
compile6 <- left_join(compile6,ph1,by='customer_code')


# M5: Aug ph not ready yet,sep-04
# ph <- fread("product_holding_feb_2020.csv",colClasses=c(customer_code="character"))
# names(ph)
# # Locker 	RD	FD	ISA	Invest First	ASBA	MF	uph
# ph1 <- ph[,c("customer_code","locker","rd","fd","ISA","Invest1_Flag","asba_flag","MF_Flag","UPH")]
# colnames(ph1)<- paste0(colnames(ph1),"_ph_M5")
# colnames(ph1) [1] <- "customer_code"
# compile6 <- left_join(compile6,ph1,by='customer_code')



#####
# Make flags, uph+1 , happened, before after...
# mab flag
# digital, total txns
names(compile6)

colSums(is.na(compile6))

compile8 <- compile6
colSums(is.na(compile8))

compile8$Closed_M1 <- ifelse(is.na(compile8$mab_cx_M1),1,0)
compile8$Closed_M3 <- ifelse(is.na(compile8$mab_cx_M3),1,0)
#compile8$Closed_M5 <- ifelse(is.na(compile8$mab_cx_M5),1,0)

table(compile8$Closed_M1)
table(compile8$Closed_M3)
#table(compile8$Closed_M5)

compile8[is.na(compile8)] <- 0  # gave error, hence trying the below
# removena   <- function(x) { replace(x, is.na(x), 0) }
# chkk <- removena(compile8)
colSums(is.na(compile8))

library(dplyr)
compile8<- compile8 %>% mutate_if(is.factor, as.character)
str(compile8,list.len = ncol(compile8))
#str(compile7,list.len = ncol(compile7))

# Filtering out accounts closed? ====2
# Making Flags =====
compile9<- compile8

# UPH+1: % of customers who showed an increase of 1 PH 
# MAB+1,MAB+3,MAB+5: %  customers showed MAB increase of 3%,5%,8%
#   Inactive+1: % customers who have turned inactive
# Digital +1: % customers who did 1 more txn in the next month
# Total txns +1: % customers  who did more than 1 txn in the next month


compile9$UPH_M1_flag <- ifelse((compile9$UPH_ph_M1- compile9$UPH_before) >0,1,0)
table(compile9$UPH_M1_flag)
compile9$UPH_M3_flag <- ifelse((compile9$UPH_ph_M3- compile9$UPH_before) >0,1,0)
table(compile9$UPH_M3_flag)
#compile9$UPH_M5_flag <- ifelse((compile9$UPH_ph_M5- compile9$UPH_before) >0,1,0)
#table(compile9$UPH_M5_flag)

compile9$txn_M1_flag <- ifelse((compile9$Total_txns_cx_M1- compile9$Total_txns_before) >0,1,0)
table(compile9$txn_M1_flag)
compile9$txn_M3_flag <- ifelse((compile9$Total_txns_cx_M3- compile9$Total_txns_before) >0,1,0)
table(compile9$txn_M3_flag)
#compile9$txn_M5_flag <- ifelse((compile9$Total_txns_cx_M5- compile9$Total_txns_before) >0,1,0)
#table(compile9$txn_M5_flag)

compile9$dig_M1_flag <- ifelse((compile9$Digital_txns_cx_M1- compile9$Digital_txns_before) >0,1,0)
table(compile9$dig_M1_flag)
compile9$dig_M3_flag <- ifelse((compile9$Digital_txns_cx_M3- compile9$Digital_txns_before) >0,1,0)
table(compile9$dig_M3_flag)
#compile9$dig_M5_flag <- ifelse((compile9$Digital_txns_cx_M5- compile9$Digital_txns_before) >0,1,0)
#table(compile9$dig_M5_flag)

compile9$MAB_M1_flag <- ifelse(((compile9$mab_cx_M1-compile9$mab_bal_before)/compile9$mab_bal_before) > 0.03,1,0)
table(compile9$MAB_M1_flag)
compile9$MAB_M3_flag <- ifelse(((compile9$mab_cx_M3-compile9$mab_bal_before)/compile9$mab_bal_before) > 0.05,1,0)
table(compile9$MAB_M3_flag)
#compile9$MAB_M5_flag <- ifelse(((compile9$mab_cx_M5-compile9$mab_bal_before)/compile9$mab_bal_before) > 0.08,1,0)
#table(compile9$MAB_M5_flag)



uph_chk <- compile9[,c("UPH_before","UPH_ph_M1","UPH_ph_M3","UPH_M1_flag","UPH_M3_flag")]# ,"UPH_M5_flag"
mab_chk <- compile9[,c("mab_bal_before","mab_cx_M1","mab_cx_M3","MAB_M1_flag","MAB_M3_flag")]# ,"MAB_M5_flag","mab_cx_M5"
inactive_chk <- compile9[,c("inactive_flag_before","inactive_flag_cx_M1","inactive_flag_cx_M3")]

backup_compile9 <- compile9

table(compile9$Status)
table(compile9$Set_group)
compile9$Status_ppt <- ifelse(compile9$Status %in% c('Successful Connect','Successful Connects','Unsuccessful Connect','Unsuccesful Connects','Unsuccessful Connects'),"Contactable",
                              ifelse(compile9$Status == "Non Contactable","Non Contactable",
                                     ifelse(compile9$Set_group== "Control","Control",compile9$Status)))
table(compile9$Status_ppt)
table(compile9$Status)
table(compile9$Set_group)
2815+4228+3468 #+ 160 : 0 as disp, and not a part of control

## Numbers for presentation ======

# Consolidated

# 1. Removing cx who have closed accounts ( as of end of M+5)
c1<-compile9 %>% filter (Closed_M3 == 0) # done for m1, since thats the latest info that we have***************
c1 <- c1 %>% filter(Status_ppt != 0)
nrow(compile9); nrow(c1)
table(c1$customer_tagging)
table(compile9$Closed_M1)
#table(compile9$Closed_M5)
table(c1$Status)
table(c1$Set_group)
table(c1$Status_ppt)
c1[is.na(c1)] <- 0
#      0      Non Contactable   Successful Connect Unsuccessful Connect 
# 559                  909                 2913                 1030 

# CA
c1ca <- c1 %>% filter (customer_tagging == "CA")
table(c1ca$Set_type)
#c1catest <- c1ca %>% filter (Status_before %in% c('Successful Connect','Unsuccessful Connect'))
# c1cacontrol <- c1ca %>% filter (Status_before %in% c('0','Non Contactable'))
table(c1$Status_ppt)
#sum(c1$MAB_M5_flag)
c1ca_nos <- c1ca %>% group_by(Targeted_Random,Status_ppt) %>% summarise(count=n(),u1 = sum(UPH_M1_flag)/n(),
                                                                        u3 = sum(UPH_M3_flag)/n(),#u5 = sum(UPH_M5_flag)/n(),
                                                                        m1 = sum(MAB_M1_flag)/n(),
                                                                        m3 = sum(MAB_M3_flag)/n(),#m5 = sum(MAB_M5_flag)/n(),
                                                                        i1 = sum(inactive_flag_cx_M1)/n(), i3 = sum(inactive_flag_cx_M3)/n(),
                                                                        #i5 = sum(inactive_flag_cx_M5)/n(),
                                                                        d1 = sum(dig_M1_flag)/n(), d3 = sum(dig_M3_flag)/n(),
                                                                        #d5 = sum(dig_M5_flag)/n(), 
                                                                        t1 = sum(txn_M1_flag)/n(),t3 = sum(txn_M3_flag)/n())#,
#t5 = sum(txn_M5_flag)/n())

c1ca_nos2 <- c1ca %>% group_by(Targeted_Random,Status_ppt) %>% summarise(count=n(),
                                                                         avg_mab_before= mean(mab_bal_before, trim = 0.01),
                                                                         avg_mab_after = mean(mab_cx_M3, trim = 0.01),# select correct month
                                                                         percent_change_mab = (avg_mab_after-avg_mab_before)/avg_mab_before,
                                                                         avg_initial_txns = round(mean(Total_txns_before, trim = 0.01),2),
                                                                         avg_final_txns = round(mean(Total_txns_cx_M3, trim = 0.01),2),#chk month
                                                                         percent_change_txn = (avg_final_txns-avg_initial_txns)/avg_initial_txns)


# SA
c1sa <- c1 %>% filter (customer_tagging != "CA")
table(c1sa$Set_type)

c1sa_nos <- c1sa %>% group_by(Targeted_Random,Status_ppt) %>% summarise(count=n(),u1 = sum(UPH_M1_flag)/n(),
                                                                        u3 = sum(UPH_M3_flag)/n(),#u5 = sum(UPH_M5_flag)/n(),
                                                                        m1 = sum(MAB_M1_flag)/n(),
                                                                        m3 = sum(MAB_M3_flag)/n(),#m5 = sum(MAB_M5_flag)/n(),
                                                                        i1 = sum(inactive_flag_cx_M1)/n(),i3 = sum(inactive_flag_cx_M3)/n(),
                                                                        #i5 = sum(inactive_flag_cx_M5)/n(),
                                                                        d1 = sum(dig_M1_flag)/n(), d3 = sum(dig_M3_flag)/n(),
                                                                        #d5 = sum(dig_M5_flag)/n(), 
                                                                        t1 = sum(txn_M1_flag)/n(),t3 = sum(txn_M3_flag)/n())#,
#t5 = sum(txn_M5_flag)/n())


c1sa_nos2 <- c1sa %>% group_by(Targeted_Random,Status_ppt) %>% summarise(count=n(),
                                                                         avg_mab_before= mean(mab_bal_before, trim = 0.01),
                                                                         avg_mab_after = mean(mab_cx_M3, trim = 0.01),#chk month
                                                                         percent_change_mab = (avg_mab_after-avg_mab_before)/avg_mab_before,
                                                                         avg_initial_txns = round(mean(Total_txns_before, trim = 0.01),2),
                                                                         avg_final_txns = round(mean(Total_txns_cx_M3, trim = 0.01),2),#chk month
                                                                         percent_change_txn = (avg_final_txns-avg_initial_txns)/avg_initial_txns)

library(writexl)

setwd("F:\\Shubhi\\At Risk conversions\\13th set")
write_xlsx(list(ca1=c1ca_nos,ca2=c1ca_nos2,sa1=c1sa_nos,sa2=c1sa_nos2,data_ca=c1ca,data_sa=c1sa,data=c1,data_raw=compile9),"AtRisk13thpptV3.xlsx")


#### Misc

pann<-df1[,c("customer_code","pan")]
pann$pan<-as.character(pann$pan)
pann<-pann %>% filter(nchar(pan)==10)
colSums(is.na(pann))
pann_ins<-df3[,c("customer_code","pan")]
pann_ins<-left_join(pann_ins,pann,by="pan")
pann_ins<-subset(pann_ins,select=c(customer_code.x,customer_code.y))
colnames(pann_ins)<-c("insig_cif","pan_cif")
colSums(is.na(pann_ins))
pann_ins<-pann_ins[complete.cases(pann_ins),]

pan_fin<-pann_ins[FALSE,]
k=1
for (i  in unique(pann_ins$insig_cif)) {
  data<-pann_ins %>% filter(insig_cif==i)
  ck=""
  for(j in 1:nrow(data)){
    ck=paste0(data[j,2],",",ck)
  }
  pan_fin[k,1]=i
  pan_fin[k,2]=ck
  k=k+1
}

pan_fin<-pan_fin[!duplicated(pan_fin$insig_cif),]
adhar_ins<-left_join(adhar_ins,pan_fin,by="insig_cif") # now appending all details to adhar_ins df

##### BB====
library(data.table)
library(readxl)
library(dplyr)
library(data.table)
library(dplyr)
library(RODBC)
library(lubridate)
options(scipen = 999)

conn <-  odbcDriverConnect('driver={SQL Server};server=10.80.44.62,21444;database=BBB;trusted_connection=true')

list.files("F:\\Shubhi\\At Risk")

# Given sets====
setwd("F:\\Shubhi\\At Risk\\5_Aug20\\outputs")
list.files()

df1 <- read_excel("SA_NTB_13_v1.xlsx",sheet="test")
df2 <- read_excel("SA_NTB_13_v1.xlsx",sheet="control")
df1$Group <- "Test"
df2$Group <- "Control"

df3 <- rbind(df1,df2)
df3$Type <- "SA_NTB"
santb <- df3

# 
df1 <- read_excel("SA_ERV_13_v2.xlsx",sheet="test")
df2 <- read_excel("SA_ERV_13_v2.xlsx",sheet="control")
df1$Group <- "Test"
df2$Group <- "Control"

df3 <- rbind(df1,df2)
df3$Type <- "SA_ERV"
saerv <- df3

# Finding common elements in ca sets
a<- intersect(colnames(saerv),colnames(santb))

saerv1 <- subset(saerv,select =a)
santb1 <- subset(santb,select =a)

all <- rbind(saerv1,santb1)
table(all$Type)

names(all)

all_acc <- all %>% filter (cat1 == 1)
table(all_acc$Recommendations)
all_acc <- all_acc[,"account_number"]

acc_list <- paste0("'",all_acc[1,],"',") 
count= 1
acc_list_compile <- NA

for (i in (1:nrow(all_acc))) {
  acc_list <- paste0("'",all_acc[i,],"',")  
  acc_list_compile[i] <- acc_list
}

acc_list_compile2 <- as.data.frame(acc_list_compile)
library(writexl)
getwd()


all2 <- all
chkdupl <- all2[duplicated(all2$account_number),]; nrow(chkdupl)
#SA====
sa <- all2 %>% filter(Type %in% c("SA_ERV","SA_NTB"))
table(sa$Type)

table(sa$Recommendations)

sa1<- sa %>% filter (cat1 ==1) # has those with recom = 10, but no 1 also
chkdupl <- sa1[duplicated(sa1$account_number),]; nrow(chkdupl)
### First filter on the recommendation, then remove duplicates
table(sa1$Recommendations)

chk_data <- sa1[duplicated(sa1$customer_code),] # since they asked us to map ROCASA details
nrow(chk_data)

data<- sa1

names(data)
#class(data$account_number)

setnames(data,old="account_number",new="account_no")
data<-as.data.frame(data[,'account_no'])
data<-data[!duplicated(data$account_no),]
data<-as.data.frame(data)    
colnames(data)[1]<- "account_no"
length(unique(data$account_no))

# sql credit data====

credit <- sqlQuery(conn,paste("select account_no,tran_date,tran_amt,tran_particular,part_tran_type,
                              cust_bank_induced,delivery_channel_id,tran_type,tran_sub_type,tran_id
                              from dbo.DL_BBB_HTD
                              where tran_date >= '2020-08-15'  -- start date of campaign
                              and tran_date <= '2020-10-15'  --- end day of campaign
                              and part_tran_type = 'C'
                              and tran_amt  >= 10000
                              and account_no in ('aaa') 
                              order by account_no, tran_date "))

## qquery over=====
credit$account_no <- as.character(credit$account_no)
#setwd("F:\\Shubhi\\At Risk conversions\\Voucher\\12_JunJuly")
str(credit)

credit2 <- credit
credit2$tran_particular<-tolower(credit2$tran_particular)

# checking and removing basis keywords
see<-credit2[(credit2$tran_particular %like% "chq return"),]
credit2<-credit2[(!credit2$tran_particular %like% "chq return"),]

see<-credit2[(credit2$tran_particular %like% "repayment credit"),]
credit2<-credit2[(!credit2$tran_particular %like% "repayment credit"),]

see<-credit2[(credit2$tran_particular %like% "disbursement credit"),] # disbursement credit 
credit2<-credit2[(!credit2$tran_particular %like% "disbursement credit"),] # disbursement credit 

see<-credit2[(credit2$tran_particular %like% "atr/"),]   #atr/
credit2<-credit2[(!credit2$tran_particular %like% "atr/"),]   #atr/

see<-credit2[(credit2$tran_particular %like% "interest"),]#  interes  consolidated interest payment?
credit2<-credit2[(!credit2$tran_particular %like% "interest"),]#  interes  consolidated interest payment?

see<-credit2[(credit2$tran_particular %like% "dd can"),]
credit2<-credit2[(!credit2$tran_particular %like% "dd can"),]

see<-credit2[(credit2$tran_particular %like% "io for"),] 
credit2<-credit2[(!credit2$tran_particular %like% "io for"),]  #something related to TD

see<-credit2[(credit2$tran_particular %like% "to for"),]
credit2<-credit2[(!credit2$tran_particular %like% "to for"),]

see<-credit2[(credit2$tran_particular %like% "po for"),]
credit2<-credit2[(!credit2$tran_particular %like% "po for"),]

see<-credit2[(credit2$tran_particular %like% "closure proceeds fd"),]
credit2<-credit2[(!credit2$tran_particular %like% "closure proceeds fd"),]

see<-credit2[(credit2$tran_particular %like% "salary"),]#keep neft/rtgs/imps/upi/IB (for CA), remove rest
#credit2<-credit2[(!credit2$tran_particular %like% "salary"),]#keep neft/rtgs/imps/upi/IB (for CA), remove rest

see<-credit2[(credit2$tran_particular %like% "oft"),]#if this is confusing, try ib:oft  # original
see<-credit2[(credit2$tran_particular %like% "ib:oft"),]
credit2<-credit2[(!credit2$tran_particular %like% "ib:oft"),]#if this is confusing, try ib:oft

see<-credit2[(credit2$tran_particular %like% "reversal"),]  #reversal-imps  # original
see<-credit2[(credit2$tran_particular %like% "reversal-imps"),]
credit2<-credit2[(!credit2$tran_particular %like% "reversal-imps"),]  #reversal-imps

credit3  <- credit2
class(credit3$tran_date)
credit3$tran_date <- ymd(credit3$tran_date)
str(credit3)

# sql eod bal====
sql_bal <- sqlQuery(conn,paste("select * from dbo.DL_Account_balance
                               where balance_date between '2020-08-14' and '2020-10-30'
                               and account_number in 
                               ('aaa')
                               order by account_number, balance_date "))

# further work====
sql_bal$customer_code <- as.character(sql_bal$customer_code)
sql_bal$account_number <- as.character(sql_bal$account_number)

mabeod <- sql_bal
mabeod$mab_bal <- NULL

setnames(mabeod,old="meb",new="lcy_balance")
str(mabeod)
mabeod$balance_date <- as.character(mabeod$balance_date)
max(mabeod$balance_date) ; min(mabeod$balance_date)

names(mabeod)
mabeod$account_no<-as.character(mabeod$account_number)
mabeod$account_number <- NULL
#Only for Accounts in Campaign:
mabeod<-mabeod[(mabeod$account_no %in% data$account_no),]


#Checking duplicate MABs in single day: which value to consider?
length(unique(paste0(mabeod$account_no,mabeod$balance_date)))

library(lubridate)
mabeod$balance_date<-ymd(mabeod$balance_date) # check the data for this, each time!!!!

min(mabeod$balance_date)
max(mabeod$balance_date)

length(mabeod$account_no) # records before date filter

Trans10_raw <- credit3

names(Trans10_raw)
Trans10<- Trans10_raw[,c("account_no","tran_date","tran_amt","tran_particular","part_tran_type")]
str(Trans10)

min(Trans10$tran_amt)
class(Trans10$tran_amt)

Trans10 <- Trans10 %>% filter (tran_amt >= 10000) 
min(Trans10$tran_amt)

class(Trans10$account_no)

min(Trans10$tran_date)
max(Trans10$tran_date)

table(data$account_no) %in% Trans10$account_no

Trans10$tran_particular<-NULL
Trans10$part_tran_type<-NULL

names(Trans10)

class(mabeod$account_no)
class(Trans10$tran_date)

#3=== check if this makes diff====
#mabeod$balance_date<-as.Date(mabeod$balance_date)
#Trans10$tran_date<-as.Date(Trans10$tran_date)
#Account level: 
Trans10$tran_amt<-as.integer(Trans10$tran_amt)
Trans10Up<-Trans10 %>% group_by(account_no,tran_date) %>% summarise(total_credit=sum(tran_amt))
names(Trans10Up)
names(Trans10Up)[2]<-"balance_date"
str(Trans10Up)
Trans10Up$balance_date<-as.Date(Trans10Up$balance_date)
str(Trans10Up)
length(unique(paste0(Trans10Up$account_no,Trans10Up$balance_date)))
#Setting Credit to 10K:
Trans10Up$total_credit<-10000  ## need to maintain 10k

###########################################################################################################
#Only taking the MEBs of accounts, which have done 10K+ transaction 
mabeodUP<-mabeod[(mabeod$account_no %in% Trans10Up$account_no),]
mabeodUP$balance_date<-as.Date(mabeodUP$balance_date)


names(Trans10Up)
class(mabeodUP$balance_date)
class(Trans10Up$balance_date)

valuedat<-left_join(mabeodUP,Trans10Up,by=c("account_no","balance_date"))
colSums(is.na(valuedat))
valuedat[is.na(valuedat$total_credit),]$total_credit<-0
valuedat<-data.frame(valuedat)
max(valuedat$total_credit)

valuedat$Month<-NA
valuedat$Month<-substring(valuedat$balance_date,6,7) # extracting month number from date
valuedat$Day<-NA
valuedat$Day<-substring(valuedat$balance_date,9,10)
names(valuedat)
setnames(valuedat,old="lcy_balance",new="Balance")
#names(valuedat)[2]<-"Balance"
colSums(is.na(valuedat))
class(valuedat$total_credit)

valuedat$Balance<-gsub(",", "", valuedat$Balance)
valuedat$Balance<-as.integer(valuedat$Balance)
valuedat[valuedat$Balance<0,]$Balance<-0
class(valuedat$Balance)
names(valuedat)
setnames(valuedat,old="Balance",new="balance")
setnames(valuedat,old="total_credit",new="Credit")
#names(valuedat)[2]<-"balance"
#names(valuedat)[5]<-"Credit"

df2<-valuedat
length(unique(paste0(df2$account_no,df2$balance_date)))
length(unique(paste0(mabeodUP$account_no,mabeodUP$balance_date)))

############################################################################################################
names(df2)
names(df2)


###########################


df2$Month = as.integer(df2$Month)
df2$Day = as.integer(df2$Day)

df2 = df2 %>% mutate(flag1 = ifelse(Credit >= 10000, 1, 0))

df2 = df2 %>% arrange(account_no, Month, Day) %>% 
  mutate(last_day_bal = ifelse(is.na(lag(balance,1)),
                               0,
                               lag(balance,1)))






check = df2 %>% arrange(account_no, Month, Day)

#View(check)
val = 0 

count1 = 0
count2 = 0

index = 1

vector = c()

unique_ac = unique(df2$account_no)

# unique_ac = '309000541990'

for (i in unique_ac){
  
  new_df = df2 %>% filter(account_no == i) %>% arrange(Month, Day)
  
  count1 = 0
  count2 = 0  
  
  for (j in 1:nrow(new_df)){
    
    if(new_df$flag1[j] == 1 &  count1 == 0)
    {count1 = 1
    val = new_df$last_day_bal[j] + new_df$Credit[j]
    print(count1)
    print(count2)
    print(new_df$balance[j])
    print(val)
    }
    
    
    
    if(count1 == 1 & new_df$balance[j] >= val)
    {count2 = count2 + 1
    print(count1)
    print(count2)
    print(new_df$balance[j])
    print(val)
    }
    
    
    if(count2 >= 15)
    {vector[index] = i
    index = index + 1}
    
    if(new_df$balance[j] < val){
      count2 = 0
      count1 = 0}
  }
  
}

View(df2)

vector = unique(vector)

final_df = data.frame(Bal_maintaning_ac = vector)
View(final_df)
names(final_df)[1]<-"account_no"


#setwd("E:/MYWAY/CampResults/Feb2019Campaigns/FEB_Conversion/AbacusFunding_Conversion/ConvFEB19")
str(final_df)
final_df$account_no<- as.character(final_df$account_no)
chkdupl <- final_df[duplicated(final_df$account_no),]

final_df2<-left_join(final_df,sa1,by="account_no")
chkdupl <- final_df2[duplicated(final_df2$account_no),]
chkdupl <- sa1[duplicated(sa1$account_no),]
#final_df2<-left_join(final_df,data,by="account_no")
colSums(is.na(final_df2))

#write.csv(final_df2,'Converted_ACs_20May19.csv',row.names = FALSE)
#write.csv(check,'All_Fund_data.csv',row.names = FALSE)

#MAB day wise:
check2<-check
names(check2)
check2<-check2[,c("account_no","balance_date","balance")]

SRreport1<-dcast(check2, account_no ~ balance_date, value.var = "balance")
SRreport1$account_no<-as.character(SRreport1$account_no)
#write.csv(SRreport1,'DayEndBalance.csv',row.names = FALSE)
############################
#Format:

chk_mab_daily<- SRreport1 %>% filter (SRreport1$account_no %in% final_df2$account_no)
#write.csv(final_df2,"D:/Shubhi/9 At Risk Conversion/sixth set/Vouchers/Outputs/Balance_builder_conv1.csv",row.names = F)




names(final_df2)
#final_df3<- left_join(final_df2,sa_cc,by=c("account_no"="Account_Number"))
#names(final_df3)


#final_df4<- final_df2[,c("customer_code","unique_id_cus","account_no","Recommendations","cat1",
#                         "mobile_local_code","clean_contact_number","email_id","Dispositions_cc_disp","Status_cc_disp","Group")]

final_df4<- final_df2[,c("customer_code","unique_id_cus","account_no","Recommendations","cat1",
                         "mobile_local_code","clean_contact_number","email_id","Group")]


# could be disposition/dispositions
final_df4$clean_contact_number <- as.character(final_df4$clean_contact_number)
library(writexl)

### Output ***********
table(final_df4$Group)
final_df5 <- final_df4 %>% filter(Group == "Test")
#table(final_df5$Status_cc_disp)
#final_df5$Qual_conn <- ifelse(final_df5$Status_cc_disp %in% c('Successful Connect','Unsuccessful Connect'),"Yes","No")

chk_dupl <- final_df5 %>% filter (duplicated(account_no))
chk_dupl2 <- final_df5 %>% filter(account_no %in% chk_dupl$account_no)

final_df6 <- distinct(final_df5)

livecx <- sqlQuery(conn,paste("select customer_code,customer_tagging,mobile_local_code as latest_mobileNo, 
                              email_id as latest_email_id, 1 as live_Nov20 from dl_customer_master"))

livecx$customer_code <- as.character(livecx$customer_code)

final_df8 <- left_join(final_df6,livecx,by ="customer_code")
final_df8$live_Nov20 <- ifelse(is.na(final_df8$live_Nov20),0,final_df8$live_Nov20)
table(final_df8$live_Nov20)
table(final_df8$customer_tagging)
final_df8$customer_tagging <- NULL

getwd()
setwd("F:\\Shubhi\\At Risk conversions\\Voucher\\13_AugOct20\\output")

write_xlsx(final_df8,"SA_BBB_13thset_v4.xlsx") # 238

#### misc====
df2 <- df2%>% mutate(Total_costs = col1+col2+col3)

round((colSums(df[,2:ncol(df)])/cr),2)

rev <- i1 %>% select(id,contains("keyword"),col2,col3) # startswith, endswith... explore those as well

df2 <- df2 %>%  select(col1,col2,col3,col21,col31) %>% 
  group_by(col1,col2) %>%  summarize_all(funs(sum))


data<-agg_data%>%group_by(col1)%>%summarise_all(funs(sum))
length(unique(data$col1))

data$Unique<- rowSums(data[,-c(1,41)]>0)  # Exlcuding primary cif, isa 
data$Total<- rowSums(data[,-c(1,41,42)]) # excluding primary cif, and ISA and UPH

##### Python======
### ca====
### vars v5====
import pandas as pd
import numpy as np

pd.options.display.float_format = '{:.2f}'.format # to remove scientific notation
# reading event file
import os
os.chdir("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20")

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

event = pd.read_csv("CAERV_event2.csv",converters={'account_number':str},quoting=3)
event.head()
event.dtypes

event.AtRiskMonth.value_counts()

event2 = event[event.AtRiskMonth!= '0']
event2.AtRiskMonth.value_counts()
event2.AtRiskFlag.value_counts()

(26872/226654)*100 # will change post vintage filter (>1 year for T1,T2...T6)

import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

# MAB account level MOM
q1 = pd.read_sql_query("""select * from
                       (select account_number, mab_bal, concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month] 
                       from al_dl_accounts
                       where closing_date is null
                       and balance_date between '2019-03-31' and '2020-01-31'
                       and product = 'CA'
                       and  account_scheme_code not in ('CAFAC','CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS'))ss
                       pivot (sum(mab_bal) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()
q2 = q1.fillna(0)
q2.isnull().sum()

q2.shape
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)

mab=q2 # saving a copy
mab.shape

df = pd.merge(event2,mab,how='left',on='account_number')
#df = pd.merge(event2,mab,how='left',left_on=['Product_ID','Seller_City'],right_on=['Product_ID','City'])
df.head(3)

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

#df.to_csv("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20\\chk\\CAERV_mabchk.csv",index=False)
#df2 = df['account_number','M1','M2','M3','M4','M5','M6']

pd.options.display.float_format = '{:.2f}'.format # to remove scientific notation

df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df.head()

#df.Growth10=df[(df.M12 >= .1) | (df.M23 >= .1) | (df.M34 >= .1) | (df.M45 >= .1) | (df.M56 >= .1)].count()
#df['Growth10']=df[(df['M12'] >= .1) & (df['M23'] >= .1) & (df['M34'] >= .1) & (df['M45'] >= .1) & (df['M56'] >= .1)].count()
# https://stackoverflow.com/questions/20995196/python-pandas-counting-and-summing-specific-conditions
# Did not work***** tried to match all conditions together, gave nan, even in case of 'OR'
# https://stackoverflow.com/questions/59704701/python-pandas-count-values-based-on-multiple-criteria-in-row-and-multiple-col
#df['Commission'] = np.where((df.Dates<myDate) | (df.Sales>3000), df.Sales*0.1, 0)

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record

#df['total'] = df[['A','B']].sum(axis=1).where(df['A'] > 0, 0)
#df['Growth50'] = df[['M12','M23']].count(axis=1).where((df['M12']>0.1) & (df['M23']>0.2))
#df['Growth50'] = df[['M12','M23']].count(axis=1).where((df[['M12','M23']]>=0.1)
#cols= df[['M12','M23','M34','M45','M56']]
#df['Growth50'] = df[['M12','M23']].count(axis=1).where(cols>=0.1)

#df[ df > 0 ].count(axis=1)
# https://stackoverflow.com/questions/29566603/python-pandas-conditional-count-across-columns
cols= df[['M12','M23','M34','M45','M56']]
df['Growth50']= df[cols>=0.5].count(axis=1)

df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)

df.head()

# df['Commission'] = np.where((df['Sales'] > 3000) | (df['Dates'] < myDate), df['Sales'] * 0.1, 0)
# https://stackoverflow.com/questions/59704701/python-pandas-count-values-based-on-multiple-criteria-in-row-and-multiple-col

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)

## might have to drop M1,M2...,M6 too ****************
# https://www.geeksforgeeks.org/how-to-drop-one-or-multiple-columns-in-pandas-dataframe/
df2.columns

# Adding suffix to all raw values + derived % changes, averages, flags in one go
df2 = df2.add_suffix('_MAB')# adding suffix
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/

# renaming acc_no, flag etc. to normal 
df2.rename(columns = {'account_number_MAB':'account_number', 'AtRiskFlag_MAB':'AtRiskFlag',
  'AtRiskMonth_MAB':'AtRiskMonth'}, inplace = True) 
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# debit count

import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

q1 = pd.read_sql_query("""select * from
                       (select a.account_number, count(h.tran_id) as debit_count, 
                       concat(left(datename(month,tran_date),3),right(datename(year,tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       left join al_dl_accounts a
                       on h.account_no = a.account_number
                       where h.part_tran_type = 'D'
                       and h.tran_date >= '2019-03-01' --- enter starting date
                       and h.tran_date <= '2020-01-31' -- enter end date
                       and a.balance_date = '2020-01-31' -- change accordingly
                       ---and a.closing_date is null
                       and a.product = 'CA'
                       and  a.account_scheme_code not in ('CAFAC','CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS')
                       and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                       and h.tran_particular not like  '%disbursement credit%' ---
                       and h.tran_particular not like '%draw down credit%' --- ??
                       and h.tran_particular not like '%REV' --- reversal  : keep for SA
                       and h.tran_particular not like 'REV %'
                       and h.tran_particular not like '%reversal%'
                       and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                       and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                       and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                       group by a.account_number,concat(left(datename(month,tran_date),3),right(datename(year,tran_date),2))) ss
                       pivot (sum(debit_count) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
debit_count=q2 # saving a copy

df = pd.merge(compile1,debit_count,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record
df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)
df.head()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

ren_col = df2[['M1','M2','M3','M4','M5','M6','AvgQ1','AvgQ2','Qchange','M12','M23','M34','M45','M56',
               'Growth10','Growth50','Fall10','Fall50']] # columns we want to add suffix to
# Adding suffix to all raw values + derived % changes, averages, flags in one go

df2.columns=df2.columns.map(lambda x : x+'_debitCount' if x in ren_col else x)
# https://stackoverflow.com/questions/53380310/how-to-add-suffix-to-column-names-except-some-columns
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# credit count

import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

q1 = pd.read_sql_query("""select * from
                       (select a.account_number, count(h.tran_id) as credit_count, 
                       concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       left join al_dl_accounts a
                       on h.account_no = a.account_number
                       where h.part_tran_type = 'C'
                       and h.tran_date >= '2019-03-01' --- enter starting date
                       and h.tran_date <= '2020-01-31' -- enter end date
                       and a.balance_date = '2020-01-31' -- change accordingly
                       ----and a.closing_date is null
                       and a.product = 'CA'
                       and  a.account_scheme_code not in ('CAFAC','CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS') 
                       and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                       and h.tran_particular not like  '%disbursement credit%' ---
                       and h.tran_particular not like '%draw down credit%' --- ??
                       and h.tran_particular not like '%REV' --- reversal  : keep for SA
                       and h.tran_particular not like 'REV %'
                       and h.tran_particular not like '%reversal%'
                       and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                       and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                       and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                       group by a.account_number,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2))) ss
                       pivot (sum(credit_count) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
credit_count=q2 # saving a copy

df = pd.merge(compile1,credit_count,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record
df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)
df.head()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

ren_col = df2[['M1','M2','M3','M4','M5','M6','AvgQ1','AvgQ2','Qchange','M12','M23','M34','M45','M56',
               'Growth10','Growth50','Fall10','Fall50']] # columns we want to add suffix to
# Adding suffix to all raw values + derived % changes, averages, flags in one go

df2.columns=df2.columns.map(lambda x : x+'_creditCount' if x in ren_col else x)
# https://stackoverflow.com/questions/53380310/how-to-add-suffix-to-column-names-except-some-columns
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# debit value

import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

q1 = pd.read_sql_query("""select * from
                       (select a.account_number, sum(h.tran_amt) as debit_amt,
                       concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       left join al_dl_accounts a
                       on h.account_no = a.account_number
                       where h.part_tran_type = 'D'
                       and h.tran_date >= '2019-03-01' --- enter starting date
                       and h.tran_date <= '2020-01-31' -- enter end date
                       and a.balance_date = '2020-01-31' -- change accordingly
                       ---and a.closing_date is null
                       and a.product = 'CA'
                       and  a.account_scheme_code not in ('CAFAC','CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS')
                       and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                       and h.tran_particular not like  '%disbursement credit%' ---
                       and h.tran_particular not like '%draw down credit%' --- ??
                       and h.tran_particular not like '%REV' --- reversal  : keep for SA
                       and h.tran_particular not like 'REV %'
                       and h.tran_particular not like '%reversal%'
                       and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                       and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                       and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                       group by a.account_number,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2))) ss
                       pivot (sum(debit_amt) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
debit_val=q2 # saving a copy

df = pd.merge(compile1,debit_val,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record
df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)
df.head()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

ren_col = df2[['M1','M2','M3','M4','M5','M6','AvgQ1','AvgQ2','Qchange','M12','M23','M34','M45','M56',
               'Growth10','Growth50','Fall10','Fall50']] # columns we want to add suffix to
# Adding suffix to all raw values + derived % changes, averages, flags in one go

df2.columns=df2.columns.map(lambda x : x+'_debitValue' if x in ren_col else x)
# https://stackoverflow.com/questions/53380310/how-to-add-suffix-to-column-names-except-some-columns
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# credit value

import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

q1 = pd.read_sql_query("""select * from 
                       (select a.account_number, sum(h.tran_amt) as credit_amt,
                       concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       left join al_dl_accounts a
                       on h.account_no = a.account_number
                       where h.part_tran_type = 'C'
                       and h.tran_date >= '2019-03-01' --- enter starting date
                       and h.tran_date <= '2020-01-31' -- enter end date
                       and a.balance_date = '2020-01-31' -- change accordingly
                       ---and a.closing_date is null
                       and a.product = 'CA'
                       and  a.account_scheme_code not in ('CAFAC','CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS')
                       and h.tran_particular not like '%disb.%' --- payment of money from fund/ could be loan
                       and h.tran_particular not like  '%disbursement credit%' ---
                       and h.tran_particular not like '%draw down credit%' --- ??
                       and h.tran_particular not like '%REV' --- reversal  : keep for SA
                       and h.tran_particular not like 'REV %'
                       and h.tran_particular not like '%reversal%'
                       and h.tran_particular not like '%cosolidated interest payment' --- interest of TD etc getting credited; keep for SA
                       and h.tran_particular not like '%PROD BASELINE RBL'--- ; keep for SA
                       and (h.cust_bank_induced!= 'BANK_INDUCED' or (h.cust_bank_induced='RTGS_NEFT' and h.tran_sub_type='CI'))
                       group by a.account_number,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2))) ss
                       pivot (sum(credit_amt) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
credit_val=q2 # saving a copy

df = pd.merge(compile1,credit_val,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record
df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)
df.head()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

ren_col = df2[['M1','M2','M3','M4','M5','M6','AvgQ1','AvgQ2','Qchange','M12','M23','M34','M45','M56',
               'Growth10','Growth50','Fall10','Fall50']] # columns we want to add suffix to
# Adding suffix to all raw values + derived % changes, averages, flags in one go

df2.columns=df2.columns.map(lambda x : x+'_creditValue' if x in ren_col else x)
# https://stackoverflow.com/questions/53380310/how-to-add-suffix-to-column-names-except-some-columns
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 
compile1.head()

os.chdir("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20\\inputs\\wip")
compile1.to_csv('1df.csv', index=False) 

#######################################################
#########################################################
#### Reading the file with few vars =========
import pandas as pd
import numpy as np

pd.options.display.float_format = '{:.6f}'.format # to remove scientific notation
# reading event file
import os

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

os.chdir("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20\\inputs\\wip")
os.getcwd()

compile1 = pd.read_csv("1df.csv",converters = {'account_number':str},quoting=3)
print(compile1.columns)
print(compile1.info())
compile1.shape # (194139, 93)

import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

# Complaint at acc level
q1 = pd.read_sql_query(""" select * from 
                       (select a.account_number, count(*) as complaint_count_acc,
                       concat(left(datename(month,c.creation_date),3),right(datename(year,c.creation_date),2)) as [month]
                       from dbo.SF_Tickets c
                       left join al_dl_accounts a --- see if you want to use al_Accounts & freeze balance_date 
                       on c.account_number = a.account_number
                       and c.classification ='complaint'
                       and c.creation_date >= '2019-03-01'  -- choose relevant starting date
                       and c.creation_date <= '2020-01-31' -- choose relevant end date
                       and a.balance_date = '2020-01-31'
                       and a.product = 'CA'
                       group by a.account_number,concat(left(datename(month,c.creation_date),3),right(datename(year,c.creation_date),2)))ss
                       pivot(sum(complaint_count_acc) for  [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q1.shape

# https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html
q1 = q1.dropna(subset=['account_number']) # removing the  NA case in complaints table

q1.shape
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
complaint=q2 # saving a copy

df = pd.merge(compile1,complaint,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
#df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['TotalQ1Complaint'] = (df['M1']+ df['M2']+ df['M3']) # just prev quarter/ 3 months' values, recent
df['Flag3mComplaint'] = np.where(df['TotalQ1Complaint']>0,1,0)

df['Flag3mComplaint'].value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2','M1','M2','M3','M4','M5','M6'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# SI Amount
q1 = pd.read_sql_query("""select * from (
                       select h.account_no,sum(h.tran_amt) as tran_amt,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       inner join
                       dbo.al_dl_accounts a
                       on h.account_no=a.account_number
                       where a.product='CA'
                       and a.account_scheme_code not in ('CAFAC',
                       'CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS')  
                       and a.balance_date='2020-01-31'
                       and h.tran_date>='2019-03-01' and h.tran_date<='2020-01-31'
                       and h.part_tran_type='D'
                       and h.tran_sub_type='SI'
                       and h.tran_particular like '%SI%'
                       and h.tran_amt>100
                       group by h.account_no,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)))ss
                       pivot(sum(tran_amt) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
si_val=q2 # saving a copy

df = pd.merge(compile1,si_val,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['Avg6mSIvalue'] = ((df['M4']+ df['M5']+ df['M6']+df['M1']+ df['M2']+ df['M3'])/6)

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2','M1','M2','M3','M4','M5','M6'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# SI Count
q1 = pd.read_sql_query("""select * from (
                       select h.account_no,count(h.tran_id) as tran_count,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       inner join
                       dbo.al_dl_accounts a
                       on h.account_no=a.account_number
                       where a.product='CA'
                       and a.account_scheme_code not in ('CAFAC',
                       'CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS')  
                       and a.balance_date='2020-01-31'
                       and h.tran_date>='2019-03-01' and h.tran_date<='2020-01-31'
                       and h.part_tran_type='D'
                       and h.tran_sub_type='SI'
                       and h.tran_particular like '%SI%'
                       and h.tran_amt>100
                       group by h.account_no,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)))ss
                       pivot(sum(tran_count) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
si_count=q2 # saving a copy

df = pd.merge(compile1,si_count,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['Avg6mSIcount'] = ((df['M4']+ df['M5']+ df['M6']+df['M1']+ df['M2']+ df['M3'])/6)

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2','M1','M2','M3','M4','M5','M6'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# ECS Amount
q1 = pd.read_sql_query("""select * from(
                       select h.account_no,sum(h.tran_amt) as tran_amt,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       inner join
                       dbo.al_dl_accounts a
                       on h.account_no=a.account_number
                       where a.product='CA'
                       and a.account_scheme_code not in ('CAFAC',
                       'CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS')  
                       and a.balance_date='2020-01-31'
                       and h.tran_date>='2019-03-01' and h.tran_date<='2020-01-31'
                       and h.part_tran_type='D'
                       and h.tran_sub_type='EO'
                       and h.tran_particular like '%ACH%'
                       and h.tran_amt>1
                       group by h.account_no,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)))ss
                       pivot(sum(tran_amt) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
ecs_val=q2 # saving a copy

df = pd.merge(compile1,ecs_val,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['Avg6mECSvalue'] = ((df['M4']+ df['M5']+ df['M6']+df['M1']+ df['M2']+ df['M3'])/6)

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2','M1','M2','M3','M4','M5','M6'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# ECS Count
q1 = pd.read_sql_query("""select * from(
                       select h.account_no,count(h.tran_id) as tran_count,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)) as [month]
                       from dbo.DL_BBB_HTD h
                       inner join
                       dbo.al_dl_accounts a
                       on h.account_no=a.account_number
                       where a.product='CA'
                       and a.account_scheme_code not in ('CAFAC',
                       'CAFIN','CAHSG','CAKIT','CAPOA','CALOA','CAJUB','CAOTB','CAMAC','CARDV','CAVOS',
                       'CFCRA','SPFCY','RPRFC','RPEFC','RBRFC','RBEFC','POACA','NRECL','ESCRW',
                       'DSPBC','DSFCY','DNFCY','DDEFC','CRRCA','CAVOS')  
                       and a.balance_date='2020-01-31'
                       and h.tran_date>='2019-03-01' and h.tran_date<='2020-01-31'
                       and h.part_tran_type='D'
                       and h.tran_sub_type='EO'
                       and h.tran_particular like '%ACH%'
                       and h.tran_amt>1
                       group by h.account_no,concat(left(datename(month,h.tran_date),3),right(datename(year,h.tran_date),2)))ss
                       pivot(sum(tran_count) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
ecs_count=q2 # saving a copy

df = pd.merge(compile1,ecs_count,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['Avg6mECScount'] = ((df['M4']+ df['M5']+ df['M6']+df['M1']+ df['M2']+ df['M3'])/6)

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2','M1','M2','M3','M4','M5','M6'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

compile1 = df2 # all necessary vars + at risk month, flag etc.


###########################333
### writing file: intermediate
compile1.to_csv("df2.csv",index=False) 
chk = pd.read_csv("df2.csv",converters = {'account_number':str},quoting=3)
chk.shape # (194139, 99)
chk.isnull().sum()

compile1= chk
del chk

# Branch txns: account level
import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

q1 = pd.read_sql_query("""select * from
                       (select account_no,(isnull(branch_cnt_chqinward,0) + isnull(branch_cnt_chqoutward,0) + 
                       isnull(branch_cnt_cash_deposit,0) + isnull(branch_cnt_cash_withdrawal,0) + isnull(branch_cnt_ecs,0) +
                       isnull(branch_cnt_transfer_tran_in,0) + isnull(branch_cnt_transfer_tran_out,0) + isnull(branch_cnt_neft,0) 
                       + isnull(branch_cnt_rtgs,0) +
                       isnull(branch_cnt_si,0) + isnull(branch_cnt_rem_out,0) + isnull(branch_cnt_fex_out,0) + 
                       isnull(branch_cnt_dd_purchase,0) +
                       isnull(branch_cnt_tax_payment,0) + isnull(branch_cnt_others,0) ) as branch_txns,
                       concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                       from dbo.dl_Month_Wise_Measures_History
                       where balance_date between '2019-03-31' and '2020-01-31')ss
                       pivot(sum(branch_txns) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes

q1.isnull().sum()

print(q1.shape)
q1.rename(columns={'account_no':'account_number'},inplace=True)
q1 = q1.dropna(subset=['account_number']) # removing the  NA case in complaints table
print(q1.shape)
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
branchTxns_count=q2 # saving a copy

df = pd.merge(compile1,branchTxns_count,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record
df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)
df.head()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

ren_col = df2[['M1','M2','M3','M4','M5','M6','AvgQ1','AvgQ2','Qchange','M12','M23','M34','M45','M56',
               'Growth10','Growth50','Fall10','Fall50']] # columns we want to add suffix to
# Adding suffix to all raw values + derived % changes, averages, flags in one go

df2.columns=df2.columns.map(lambda x : x+'_BranchTxns' if x in ren_col else x)
# https://stackoverflow.com/questions/53380310/how-to-add-suffix-to-column-names-except-some-columns
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

compile1.shape
print(compile1.columns)

# Txns IB
q1 = pd.read_sql_query("""select * from
                       (select account_no,(isnull(ib_cnt_neft,0) + isnull(ib_cnt_paygate,0) + 
                       isnull(ib_cnt_rtgs,0) + isnull(ib_cnt_rbl_ft,0) + 
                       isnull(ib_cnt_others,0) + isnull(ib_cnt_self_ft,0) + 
                       isnull(ib_cnt_imps,0) + isnull(ib_cnt_tpft,0) + 
                       isnull(ib_cnt_bill_pay,0) + isnull(ib_cnt_fd_success,0) + 
                       isnull(ib_cnt_credit_card_,0) + isnull(ib_cnt_tax,0) + 
                       isnull(ib_cnt_rd_success,0) + isnull(ib_cnt_dd_request,0) + 
                       isnull(ib_cnt_p2c,0)) as ib_txns,
                       concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                       from dbo.dl_Month_Wise_Measures_History
                       where balance_date between '2019-03-31' and '2020-01-31')ss
                       pivot(sum(ib_txns) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q1= q1.dropna(subset=['account_no'])
#q1.rename(columns = {'account_no':'account_number'}, inplace = True)


q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
ib_txns =q2 # saving a copy

df = pd.merge(compile1,ib_txns,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record
df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)
df.head(2)

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

ren_col = df2[['M1','M2','M3','M4','M5','M6','AvgQ1','AvgQ2','Qchange','M12','M23','M34','M45','M56',
               'Growth10','Growth50','Fall10','Fall50']] # columns we want to add suffix to
# Adding suffix to all raw values + derived % changes, averages, flags in one go

df2.columns=df2.columns.map(lambda x : x+'_IBTxns' if x in ren_col else x)
# https://stackoverflow.com/questions/53380310/how-to-add-suffix-to-column-names-except-some-columns
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# MB txns
q1 = pd.read_sql_query(""" select * from
                       (select account_no,(isnull(mob_cnt_imps,0) + isnull(mob_cnt_recharge,0) + 
                       isnull(mob_cnt_neft,0) + isnull(mob_cnt_rbl_ft,0) + 
                       isnull(mob_cnt_self_ft,0) + isnull(mob_cnt_fd_booking_s,0) + 
                       isnull(mob_cnt_bill_pay,0) + isnull(mob_cnt_rtgs,0) + 
                       isnull(mob_cnt_rd_booking_s,0) + isnull(mob_cnt_others,0)) as mb_txns,
                       concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                       from dbo.dl_Month_Wise_Measures_History
                       where balance_date between '2019-03-31' and '2020-01-31')ss
                       pivot(sum(mb_txns) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q1= q1.dropna(subset=['account_no'])

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
debit_count=q2 # saving a copy

df = pd.merge(compile1,debit_count,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T7'],df['T8'],df['T9'],df['T10'],df['T11'],df['T12']]
df['M6'] = np.select(conditions,values) # Values for M6

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T6'],df['T7'],df['T8'],df['T9'],df['T10'],df['T11']]
df['M5'] = np.select(conditions,values) # Values for M5

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T5'],df['T6'],df['T7'],df['T8'],df['T9'],df['T10']]
df['M4'] = np.select(conditions,values) # Values for M4

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T4'],df['T5'],df['T6'],df['T7'],df['T8'],df['T9']]
df['M3'] = np.select(conditions,values) # Values for M3

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T3'],df['T4'],df['T5'],df['T6'],df['T7'],df['T8']]
df['M2'] = np.select(conditions,values) # Values for M2

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1'] = np.select(conditions,values) # Values for M1

df.head()

# Quarterly Values + % change
df['AvgQ2'] = ((df['M4']+ df['M5']+ df['M6'])/3)
df['AvgQ1'] = ((df['M1']+ df['M2']+ df['M3'])/3) # just prev quarter/ 3 months' values, recent
df.AvgQ1.dtype

df['Qchange']= np.where(df['AvgQ2']==0,(df['AvgQ1']- df['AvgQ2'])/(df['AvgQ2']+1),(df['AvgQ1']- df['AvgQ2'])/df['AvgQ2'] )# change in avg quarterly values, Q1 is more recent/final value

# M1 is more recent/final, 1 month prior to at risk event # M12: M1 vs M2 value
df['M12']= np.where(df['M2']==0,(df['M1']- df['M2'])/(df['M2']+1),(df['M1']- df['M2'])/df['M2'])
df['M23']= np.where(df['M3']==0,(df['M2']- df['M3'])/(df['M3']+1),(df['M2']- df['M3'])/df['M3'])
df['M34']= np.where(df['M4']==0,(df['M3']- df['M4'])/(df['M4']+1),(df['M3']- df['M4'])/df['M4'])
df['M45']= np.where(df['M5']==0,(df['M4']- df['M5'])/(df['M5']+1),(df['M4']- df['M5'])/df['M5'])
df['M56']= np.where(df['M6']==0,(df['M5']- df['M6'])/(df['M6']+1),(df['M5']- df['M6'])/df['M6'])

df['Growth10'] =df[['M12','M23','M34','M45','M56']].apply(lambda x:(x>=0.1).sum(),axis=1) # count gives 5 for each record
df['Growth50']= df[df[['M12','M23','M34','M45','M56']]>=0.5].count(axis=1)
df['Fall10']= df[df[['M12','M23','M34','M45','M56']]<=-0.1].count(axis=1)
df['Fall50']= df[df[['M12','M23','M34','M45','M56']]<=-0.5].count(axis=1)
df.head()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
print(df2.columns)

ren_col = df2[['M1','M2','M3','M4','M5','M6','AvgQ1','AvgQ2','Qchange','M12','M23','M34','M45','M56',
               'Growth10','Growth50','Fall10','Fall50']] # columns we want to add suffix to
# Adding suffix to all raw values + derived % changes, averages, flags in one go

df2.columns=df2.columns.map(lambda x : x+'_MBTxns' if x in ren_col else x)
# https://stackoverflow.com/questions/53380310/how-to-add-suffix-to-column-names-except-some-columns
# https://www.geeksforgeeks.org/how-to-rename-columns-in-pandas-dataframe/
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 
# (194139,153)
os.getcwd()
## intermediate df3###########################
compile1.to_csv("df3.csv",index=False)
compile1 = pd.read_csv("E:/Shubhi/AtRisk/CAERV/1_Nov20/inputs/wip/df3.csv",converters={'account_number':str},quoting=3)

#### Reading the file with few vars 2 =========
import pandas as pd
import numpy as np

pd.options.display.float_format = '{:.6f}'.format # to remove scientific notation
# reading event file
import os

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

os.chdir("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20\\inputs\\wip")
os.getcwd()

compile1 = pd.read_csv("df3.csv",converters = {'account_number':str},quoting=3)
print(compile1.columns)
print(compile1.info())
compile1.shape # (194139, 153)


import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

#  Lien
q1 = pd.read_sql_query(""" select * from (
                       select account_number,lien_flag,
                       concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                       from al_dl_Accounts
                       where product = 'CA'
                       and closing_date is null
                       and balance_date between '2019-03-31' and '2020-01-31') ss
                       pivot(max(lien_flag) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt""",conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
lien=q2 # saving a copy

df = pd.merge(compile1,lien,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_Lien'] = np.select(conditions,values) # Values for M1

df.head()
df.M1_Lien.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

#  Freeze
q1 = pd.read_sql_query(""" select * from (
                       select account_number,freeze_desc,
                       concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                       from al_dl_Accounts
                       where product = 'CA'
                       and closing_date is null
                       and balance_date between '2019-03-31' and '2020-01-31')ss
                       pivot(max(freeze_desc) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
freeze=q2 # saving a copy

df = pd.merge(compile1,freeze,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_Freeze'] = np.select(conditions,values) # Values for M1

df.head()
df.M1_Freeze.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# account vintage ( rolling)
q1 = pd.read_sql_query("""select * from (
                       select account_number,datediff(month,account_creation_date,balance_date) as acc_vintage_months,
                       concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                       from al_dl_Accounts
                       where product = 'CA'
                       and closing_date is null
                       and balance_date between '2019-03-31' and '2020-01-31' )ss
                       pivot(max(acc_vintage_months) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
vintage=q2 # saving a copy

df = pd.merge(compile1,vintage,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_acc_vintage'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns
df2.head(2)

compile1 = df2 # all necessary vars + at risk month, flag etc. 

# account details
acc_det = pd.read_sql_query("""select customer_code,account_number,account_scheme_code,account_scheme_code_description,
                            account_creation_date,account_status,acct_business_segment,SEGMENT,
                            freeze_desc,lien_flag,mop from al_dl_Accounts
                            where product = 'CA'
                            and closing_date is null
                            and balance_date = '2020-01-31'""",conn)


## compile2##########################################
compile2 = pd.merge(compile1,acc_det,how='left',on='account_number')
# (194139,163)

# reg days : mb, ib ; rbi cat, email,phone

import pyodbc
conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()


cx_det = pd.read_sql_query(""" select customer_code, datediff(day,create_date,mob_registration_date) as mb_reg_days,
                           datediff(day,create_date,ib_registration_date) as ib_reg_days,email_id,mobile_local_code, rbi_category_desc,
                           create_date,business_segment, constitution_code,
                           revised_constitution,insignia_flag,signature_flag,aspire_flag,abacus_flag,customer_tagging,zone_name,
                           active, inactive, dormant, live, count_sa, count_ca, count_deposits
                           -- concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                           from al_dl_customer_master
                           where balance_date ='2020-01-31'
                           and update_date <> '2019-04-29 18:53:19.967'  """,conn)

compile2.shape
compile2 = pd.merge(compile2,cx_det,how='left',on='customer_code')
compile2.shape # (194139, 187)

os.getcwd()
#compile2.to_csv("practicedf.csv",index=False)
compile2.to_csv("df4_v2.csv",index=False,sep="~")

import pandas as pd
import numpy as np

pd.options.display.float_format = '{:.2f}'.format # to remove scientific notation
# reading event file
import os
# reading compile2########################
compile2 = pd.read_csv("E:/Shubhi/AtRisk/CAERV/1_Nov20/inputs/wip/df4_v2.csv",sep="~",converters= {'customer_code':str,'account_number':str})

min_bal = pd.read_excel("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20\\inputs\\M4_min_balance.xlsx")
min_bal.head()
compile2['Concatinate'] = compile2['account_scheme_code'] + compile2['rbi_category_desc']

# compile 3 ##########################
compile3 = pd.merge(compile2,min_bal,how="left",on="Concatinate")
compile3.minimum_balance.value_counts()

# https://www.geeksforgeeks.org/find-duplicate-rows-in-a-dataframe-based-on-all-or-selected-columns/
# duplicates in min bal file ; duplicate = df[df.duplicated()] 

dupl = min_bal[min_bal.duplicated()]

#https://www.geeksforgeeks.org/python-pandas-dataframe-drop_duplicates/  # did not help
#data.drop_duplicates(keep=False,inplace=True) 
# https://www.journaldev.com/33488/pandas-drop-duplicate-rows-drop_duplicates-function
min_bal2 = min_bal.drop_duplicates(subset="Concatinate",keep="first")
dupl = min_bal2[min_bal2.duplicated()]

compile3 = pd.merge(compile2,min_bal2,how="left",on="Concatinate")
compile3.minimum_balance.value_counts()

# https://www.xspdf.com/resolution/58174590.html
months = compile3[['M6_MAB','M5_MAB','M4_MAB','M3_MAB','M2_MAB','M1_MAB']]
#min_balCondition = compile3['minimum_balance']
#compile3['MinBal_6m'] = compile3[([months]< [min_balCondition])].count(axis=1)

# not maintaining min bal
compile3['M1']= np.where(compile3['M1_MAB']<compile3['minimum_balance'],1,0)
compile3['M2']= np.where(compile3['M2_MAB']<compile3['minimum_balance'],1,0)
compile3['M3']= np.where(compile3['M3_MAB']<compile3['minimum_balance'],1,0)
compile3['M4']= np.where(compile3['M4_MAB']<compile3['minimum_balance'],1,0)
compile3['M5']= np.where(compile3['M5_MAB']<compile3['minimum_balance'],1,0)
compile3['M6']= np.where(compile3['M6_MAB']<compile3['minimum_balance'],1,0)
# https://stackoverflow.com/questions/40116219/sum-of-several-columns-from-a-pandas-dataframe
# (df[['a','b']].sum())
compile3['CountNoMinBal'] = compile3[['M1','M2','M3','M4','M5','M6']].sum(axis=1)

compile3= compile3.drop(['M1','M2','M3','M4','M5','M6'],axis=1)

# not maintaining 50% min bal
#compile3['M1']= np.where((compile3['M1_MAB']<(0.5*(compile3['minimum_balance')))],1,0)
compile3['MinBal50']= 0.5*(compile3['minimum_balance'])

# not maintaining min bal
compile3['M1']= np.where(compile3['M1_MAB']<compile3['MinBal50'],1,0)
compile3['M2']= np.where(compile3['M2_MAB']<compile3['MinBal50'],1,0)
compile3['M3']= np.where(compile3['M3_MAB']<compile3['MinBal50'],1,0)
compile3['M4']= np.where(compile3['M4_MAB']<compile3['MinBal50'],1,0)
compile3['M5']= np.where(compile3['M5_MAB']<compile3['MinBal50'],1,0)
compile3['M6']= np.where(compile3['M6_MAB']<compile3['MinBal50'],1,0)

compile3['CountNoMinBal50'] = compile3[['M1','M2','M3','M4','M5','M6']].sum(axis=1)

compile3= compile3.drop(['M1','M2','M3','M4','M5','M6'],axis=1)

#credit_card MOM
import pyodbc

conn = pyodbc.connect('Driver={SQL Server};'
                      'Server=10.80.44.62,21444;'
                      'Database=BBB;'
                      'Trusted_Connection=yes;')

cursor = conn.cursor()

q1 = pd.read_sql_query(""" select * from(
                       select customer_code,credit_card,
                       concat(left(datename(month,balance_date),3),right(datename(year,balance_date),2)) as [month]
                       from al_dl_customer_master
                       where balance_date between '2019-03-31' and '2020-01-31'
                       and update_date <> '2019-04-29 18:53:19.967' )ss
                       pivot(max(credit_card) for [month] in (Mar19,Apr19,May19,Jun19,Jul19,Aug19,Sep19,Oct19,Nov19,Dec19,Jan20)) as pvt  """,conn)

q1.head(3)
q1.dtypes
q1.isnull().sum()

q2 = q1.fillna(0)
q2.isnull().sum()
print(q2.columns)
q2.columns = ['account_number','T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2']
print(q2.columns)
credit_card=q2 # saving a copy

df = pd.merge(compile3,credit_card,how='left',on='account_number')

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_CreditCard'] = np.select(conditions,values) # Values for M1

df.head()
df.M1_CreditCard.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T12','T11','T10','T9','T8','T7','T6','T5','T4','T3','T2'],axis=1)
## might have to drop M1,M2...,M6 too ****************
df2.columns

df2.head(2)
df2.M1_CreditCard.value_counts()

compile3 = df2 # all necessary vars + at risk month, flag etc. 

## ph compiled
ph_raw = pd.read_csv("E:/Shubhi/AtRisk/CAERV/1_Nov20/inputs/caervModelPH.csv",converters= {'customer_code':str},quoting=3)
#ph_raw = pd.read_csv("E:/Shubhi/AtRisk/CAERV/1_Nov20/inputs/caervModelPH.csv",quoting=3)
ph_raw.dtypes
ph = ph_raw
#df.columns = df.columns.str.strip('"') 
# https://stackoverflow.com/questions/40866500/first-column-name-is-circled-by-double-quote-after-reading-from-csv
ph.columns = ph.columns.str.strip('"')
ph.customer_code = ph.customer_code.str.strip('"')

print(ph.columns)
# https://cmdlinetips.com/2019/04/how-to-select-columns-using-prefix-suffix-of-column-names-in-pandas/
# gapminder.filter(regex='^lifeExp',axis=1).head()
tax = ph.filter(regex='^tax_',axis=1)
chk = ph.filter(regex='$ph',axis=1)

# https://stackoverflow.com/questions/31551412/how-to-select-dataframe-columns-based-on-partial-matching
#df.loc[:, df.columns.str.contains('x')]
#p1=ph.loc[:,ph.columns.str.contains('tax')]

#tax
p1=ph.loc[:,(ph.columns.str.contains('tax')| (ph.columns.str.contains('customer')))]
print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile3,p1,on="customer_code",how="left")

chk_cx = df[df['customer_code']=='2067158']
chk_ph = ph[ph['customer_code']=='2067158']

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_tax'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

compile4= df2

# tfx

p1=ph.loc[:,(ph.columns.str.contains('Trade')| (ph.columns.str.contains('customer')))]
print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile4,p1,on="customer_code",how="left")

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_tfx'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

compile4 = df2

# bill pay

p1=ph.loc[:,(ph.columns.str.contains('bill')| (ph.columns.str.contains('customer')))]
print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile4,p1,on="customer_code",how="left")

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_BillPay'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

compile4 = df2

# Loan : bil, sbil, lap

# sbil
p1=ph.loc[:,(ph.columns.str.contains('sbil')| (ph.columns.str.contains('customer')))]
print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile4,p1,on="customer_code",how="left")

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_sbil'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

compile4 = df2

# lap

p1=ph.loc[:,(ph.columns.str.contains('lap')| (ph.columns.str.contains('customer')))]
print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile4,p1,on="customer_code",how="left")

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_lap'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

compile4 = df2

# bil
filter_col = [col for col in ph if col.startswith('bil')]
filter_col
#df.loc[:, df.columns.str.startswith('foo')]
p0=ph.loc[:,((ph.columns.str.contains('bil'))| (ph.columns.str.contains('customer')))]
# https://stackoverflow.com/questions/19071199/drop-columns-whose-name-contains-a-specific-string-from-pandas-dataframe
p1= p0[p0.columns.drop(list(p0.filter(regex='sbil')))]
p1= p1[p1.columns.drop(list(p1.filter(regex='pay')))]

print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile4,p1,on="customer_code",how="left")

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_bil'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

compile4 = df2

compile4['M1_Loan']= compile4[['M1_bil','M1_lap','M1_sbil']].sum(axis=1)


# UPH

p1=ph.loc[:,(ph.columns.str.contains('UPH')| (ph.columns.str.contains('customer')))]
print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile4,p1,on="customer_code",how="left")

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_UPH'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

compile4 = df2


# TPH

p1=ph.loc[:,(ph.columns.str.contains('TPH')| (ph.columns.str.contains('customer')))]
print(p1.columns)
p1.columns=['customer_code','T7','T6','T5','T4','T3','T2']
print(p1.columns)

df=pd.merge(compile4,p1,on="customer_code",how="left")

conditions=[(df['AtRiskMonth']=='T1'),(df['AtRiskMonth']== 'T2'),(df['AtRiskMonth']== 'T3'),
            (df['AtRiskMonth']== 'T4'),(df['AtRiskMonth']== 'T5'),(df['AtRiskMonth']== 'T6')]
values = [df['T2'],df['T3'],df['T4'],df['T5'],df['T6'],df['T7']]
df['M1_TPH'] = np.select(conditions,values) # Values for M1

df.head()
#df.M1.value_counts()

# Dropping intermediate vars, like MAB values for 12 months, since we have mapped relevant M1,M2..M6 values
df2= df.drop(['T7','T6','T5','T4','T3','T2'],axis=1)

chk_cx = df[df['customer_code']=='2067158']
chk_ph = ph[ph['customer_code']=='2067158']

compile4 = df2


os.getcwd()

os.chdir("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20\\inputs\\wip")
compile4.to_csv('df5.csv', index=False,sep="~") 
compile4.shape #(194139, 203)
compile3.shape # (194139, 194) ; compile2 169 cols, compile1 156 cols, event 2 : 3 cols; event 232332x3
compile2.shape # (194139, 189)
compile1.shape # (194139, 156)


## model v4=====
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import os
pd.options.display.float_format = '{:.2f}'.format # to remove scientific notation

import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import pyplot
import pylab as pl
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from statsmodels.stats.outliers_influence import variance_inflation_factor
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.feature_selection import RFE
import statsmodels.api as sm
import xgboost as xgb
from xgboost import XGBClassifier
from xgboost import plot_importance
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, recall_score, roc_auc_score, plot_roc_curve, roc_curve, auc, f1_score
import rope 
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

os.chdir("E:\\Shubhi\\AtRisk\\CAERV\\1_Nov20\\inputs\\wip")

inputFile  = pd.read_csv("df5.csv",converters={'account_number':str,'customer_code':str},sep="~",quoting=3)

f1 = inputFile
wrong_ids = ['NA','NULL','0','rbl@gmail.com','abc@abc.com','abc@xyz.com','xyz@xyz.com','xyz@abc.com']
print(f1.columns)
f1['email_id']= f1['email_id'].str.lower()
f1['email_null']= np.where(((f1['email_id'].isin(wrong_ids)).any() or (f1['email_id'].isnull())),1,0)
#f1['email_null']= np.where(f1['email_id'] in wrong_ids,0,1)
f1['email_null'].value_counts()

chk = f1[['email_id','email_null']]
chk = chk[chk['email_null']==1]

del wrong_ids
del chk

f1['phone_null'] = np.where(f1['mobile_local_code'].isnull(),1,0)
f1['phone_null'].value_counts()

f2 = f1.drop(['email_id','mobile_local_code'],axis=1)

## account vintage is in months
# we want cases where customer has spent >=12 months ======= ERV=================================
f2 = f2[f2['M1_acc_vintage']>=12]
f2.M1_acc_vintage.min()
# Filtering to keep mass and aspire
f2= f2[f2['insignia_flag']=="N"]
f2= f2[f2['signature_flag']=="N"]
f2= f2[f2['abacus_flag'].isnull()]
# CA tagging
f2['customer_tagging'].value_counts()
f2=f2[f2['customer_tagging']=="CA"]

chk= f2[f2['minimum_balance'].isnull()]
chk['account_scheme_code'].value_counts()
f2= f2[~f2['minimum_balance'].isnull()]

# BBB Zones
f2['zone_name'].value_counts()
f2 = f2[~f2['zone_name'].str.contains("Rural") ]
f2['zone_name'].value_counts()
f2['business_segment'].dtypes #dtype('O') , as in object

f2['business_segment'].head()

# BBB business_segment
BBB=['1205','1301','1302','1303','1304','1305','1306','1308','1309','1315','1316','1318','1319']

f2= f2[f2['business_segment'].isin (BBB)]
chk= f2[~f2['business_segment'].isin (BBB)]
chk['business_segment'].value_counts()

# No Lien, No freeze
f2.shape[0]
f2= f2[f2['M1_Freeze']=="NO FREEZE"]
f2.shape[0]
f2= f2[f2['M1_Lien']=="N"]
f2.shape[0]

f2['freeze_desc'].value_counts()
f2['lien_flag'].value_counts()

f2= f2[f2['freeze_desc']=="NO FREEZE"]
f2= f2[f2['lien_flag']=="N"]
f2.shape[0]

# Filtering before looking at quantiles
df= f2

#df = df.fillna(0)
sel_col= df.loc[:,(df.columns.str.contains('M1')| df.columns.str.contains('M2')|df.columns.str.contains('M3') |
                     df.columns.str.contains('M4') | df.columns.str.contains('M5') | df.columns.str.contains('M6') |
                     df.columns.str.contains('Q1') | df.columns.str.contains('Q2') | df.columns.str.contains('change'))]

#sel_col = sel_col.fillna(0)
sel_col.dtypes
chk_cat = sel_col.select_dtypes(include=["object"])
chk_cat.columns
sel_col = sel_col.drop(['M1_Lien','M1_Freeze'],axis=1)
chk_cat = sel_col.select_dtypes(include=["object"])
chk_cat.shape[1]  # should be 0

col_list = sel_col.columns  

chk_outlier = sel_col[col_list].quantile([0,0.001,0.005,0.01,0.05,0.1,0.5,0.9, 0.95, 0.975, 0.99, 0.995, 0.999, 1])  
chk_outlier3 = chk_outlier.transpose()

col_list.dtype
col_list2 = col_list.tolist()

rem_col = {'M1_UPH','M1_TPH'} 
col_list2 = [ele for ele in col_list2 if ele not in rem_col] 

for i in col_list2:
  p99 = df[i].quantile(0.99)
df[i]= np.where(df[i]>p99,p99,df[i]) 

rem_col = ['M1_UPH','M1_TPH']  
for i in rem_col:
  p995 = df[i].quantile(0.995)
df[i]= np.where(df[i]>p995,p995,df[i])     


# checking quantiles post outlier capping (upper cap)
chk_outlier = df[col_list].quantile([0,0.001,0.005,0.01,0.05,0.1,0.5,0.9, 0.95, 0.975, 0.99, 0.995, 0.999, 1])  
chk_outlier_post = chk_outlier.transpose()

del sel_col

## MAB, Avg MAB upper cap: 99; no lower cap: 0 values might help better classsify at risk
# M1-M6 Values have similar quantiles as averages. We might decide to finally keep only averages
# qchange: 99 # m12... 99
# might want to take .975, sinnce values are much lower there
#debit count 99

# checking prop of nulls
nulls_f2 = df.isnull().sum().to_frame()
nulls_f2.reset_index(inplace=True) # converts index into a separate column, now column names appear as a column & not in index
# https://stackoverflow.com/questions/44773714/convert-index-to-column-pandas-dataframe
nulls_f2.columns = ['ColumnName','Nulls']
nulls_f2['propNulls']= nulls_f2['Nulls']/df.shape[0]

nulls_f2[nulls_f2['propNulls']>0.9].ColumnName

# removing vars with > 90% null values
f3= f2.drop(['TotalQ1Complaint','Avg6mSIvalue','Avg6mSIcount','Avg6mECSvalue','Avg6mECScount','mb_reg_days','M1_CreditCard'],axis=1)

seg_flag = ['insignia_flag','signature_flag','aspire_flag','SEGMENT','abacus_flag']

for i in seg_flag:
  print(f3[i].value_counts())

f3['zone_name'].value_counts()
# removing zone, segment flags     
f3= f3.drop(['insignia_flag','signature_flag','abacus_flag','zone_name'],axis=1)    


#Split categorical and numeric columns
df=f3
df_numeric=df._get_numeric_data().drop(['AtRiskFlag'],axis=1)
df_categorical=df.select_dtypes(exclude=["number","bool_"])

#For numeric data
correlation_matrix_n=pd.DataFrame(df_numeric.corr())
corr_mat1 = correlation_matrix_n.stack().reset_index()
corr_mat1.columns = ['var1','var2','correlation']
l= 0.6
#print(corr_mat1.loc[(corr_mat1.correlation > l) & (corr_mat1.correlation < 1)].sort_values(by = 'correlation'))
chk_collinear= (corr_mat1.loc[(corr_mat1.correlation > l) & (corr_mat1.correlation < 1)].sort_values(by = 'correlation',ascending=False))

os.getcwd()
#chk_collinear.to_excel("correlation1.xlsx")

### removing certain variables
# M2- M6 vars
# f4 =======
f4 = f3.loc[:,(~f3.columns.str.contains('M2') & ~f3.columns.str.contains('M3') & ~f3.columns.str.contains('M4')
               & ~f3.columns.str.contains('M5') & ~f3.columns.str.contains('M6'))]
f4 = f4.drop(columns=['live','active','count_deposits'],axis=1)    
f4['freeze_desc'].value_counts()  
f4['count_sa'].value_counts()  
f4['count_ca'].value_counts() 
f4[f4['count_ca']>1]['count_ca'].count()
f4[f4['count_ca']>1]['count_ca'].count()/ f4.shape[0]
f4['inactive'].value_counts() 
f4['dormant'].value_counts() 

f4 = f4.drop(columns=['count_sa','count_ca','inactive','dormant','freeze_desc','lien_flag','M1_Lien','M1_Freeze'],axis=1) 

## no freeze  
df = f4   
df.dtypes 
df_numeric=df._get_numeric_data().drop(['AtRiskFlag'],axis=1)

#For numeric data : again, post removing certain vars
correlation_matrix_n=pd.DataFrame(df_numeric.corr())
corr_mat1 = correlation_matrix_n.stack().reset_index()
corr_mat1.columns = ['var1','var2','correlation']
l= 0.6
chk_collinear2= (corr_mat1.loc[(corr_mat1.correlation > l) & (corr_mat1.correlation < 1)].sort_values(by = 'correlation',ascending=False))
os.getcwd()
#chk_collinear2.to_excel("correlation2.xlsx")

scaler = StandardScaler()
scaler.fit(df_numeric)
scaled_data = scaler.transform(df_numeric)
scaled_data1 = pd.DataFrame(columns=df_numeric.columns, data = scaled_data)
scaled_data1.head()

chk_prop_col = ['AtRiskFlag','AtRiskMonth','email_null','phone_null','M1_tfx','M1_BillPay','M1_sbil','M1_Loan','M1_UPH','M1_TPH']
# min bal Nan : see : remove/ impute min bal value as 10k 

for i in chk_prop_col:
  print(f4[i].value_counts())

f4['AtRiskFlag'].value_counts()
f4['M1_BillPay'].value_counts()
f4['customer_tagging'].value_counts()
f4['constitution_code'].value_counts()
f4['email_null'].value_counts()
f4['phone_null'].value_counts()
f4['revised_constitution'].value_counts()

f4['phone_null'].isnull().sum()
f4['email_null'].isnull().sum()

#f4[['email_null','phone_null']]=f4[['email_null','phone_null']].fillna(0)

f4 = f4.drop(columns=['constitution_code','account_scheme_code_description','minimum_balance','MinBal50','create_date','SEGMENT'],axis=1)

# removing vars which we had kept for filtering etc.
f4 = f4.drop(columns=['Concatinate','customer_tagging','revised_constitution','M1_sbil','M1_bil','M1_lap','M1_UPH','AtRiskMonth','business_segment','acct_business_segment','account_creation_date','account_status'],axis=1)

f4['mop'].value_counts()
f4['account_scheme_code'].value_counts()

f4= f4.drop(columns=['mop','aspire_flag'],axis=1)

f4.dtypes

f4['rbi_category_desc'].value_counts() 
# https://stackoverflow.com/questions/8270092/remove-all-whitespace-in-a-string
f4['rbi_category_desc'] = f4['rbi_category_desc'].str.replace(" ","")

#qual_data = pd.get_dummies(f4[['aspire_flag', 'rbi_category_desc', 'account_scheme_code']], drop_first=True)
qual_data = pd.get_dummies(f4[['rbi_category_desc', 'account_scheme_code']], drop_first=False)
qual_data = qual_data.drop(columns=['account_scheme_code_500VP','rbi_category_desc_RBISEMIURBAN'],axis=1)

#qual_data.head()  

f5= f4.drop(columns=['rbi_category_desc', 'account_scheme_code','account_number','customer_code'],axis=1)  


### Null value treatment
f5['ib_reg_days'] = np.where(f5['ib_reg_days']<0,0,f5['ib_reg_days'])
f5['ib_reg_days'] = np.where(f5['ib_reg_days'].isnull(),-1,f5['ib_reg_days'])

f5.isnull().sum()

### impute txn NAs with mean/ KNN values

f5= f5.fillna(0)
f5.AtRiskFlag.value_counts()
92863/7081  #13

#f4_v2 = f5.loc[:,(~f5.columns.str.contains('Fall') & ~f5.columns.str.contains('Growth'))]

final_data = pd.concat([f5,qual_data], axis = 1)

final_data_noFlags = final_data.loc[:,(~final_data.columns.str.contains('Fall') & ~final_data.columns.str.contains('Growth'))]


### Xgboost=====================================
# https://www.datacamp.com/community/tutorials/xgboost-in-python
# https://machinelearningmastery.com/develop-first-xgboost-model-python-scikit-learn/
d1= final_data
d1.columns

X= d1.drop("AtRiskFlag", axis=1)
Y = d1["AtRiskFlag"]

## splitting into test and train

seed = 7
test_size = 0.30
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)

### model

# fit model no training data
#model = XGBClassifier()
#model.fit(X_train, y_train)
#print(model)

# https://towardsdatascience.com/a-beginners-guide-to-xgboost-87f5d4c30ed7
D_train = xgb.DMatrix(X_train, label=y_train)
D_test = xgb.DMatrix(X_test, label=y_test)

param = {
  'eta': 0.3, 
  'max_depth': 8,  
  'objective':'binary:logistic', 'scale_pos_weight':13} 

steps = 20  # The number of training iterations
model = xgb.train(param, D_train, steps)

y_pred_xgb = model.predict(D_test)

X_train.shape
y_train.shape
X_test.shape
y_test.shape
y_pred_xgb.shape

#y_test['y_pred_xgb'] = model.predict(D_test)
#y_test.head()

y_test2 = y_test.to_frame()
y_test2.head()
y_test2['y_pred_xgb'] = model.predict(D_test)

#y_test2 = y_test.as_matrix()

def Find_Optimal_Cutoff(target, predicted):
  """ Find the optimal probability cutoff point for a classification model related to event rate
Parameters    ----------
target : Matrix with dependent or target data, where rows are observations
predicted : Matrix with predicted data, where rows are observations
Returns    -------     
list type, with optimal cutoff value      
"""
fpr, tpr, threshold = roc_curve(target, predicted)
i = np.arange(len(tpr)) 
roc = pd.DataFrame({'tf' : pd.Series(tpr-(1-fpr), index=i), 'threshold' : pd.Series(threshold, index=i)})
roc_t = roc.iloc[(roc.tf-0).abs().argsort()[:1]]

return list(roc_t['threshold'])

# Find optimal probability threshold
threshold = Find_Optimal_Cutoff(y_test2['AtRiskFlag'], y_test2['y_pred_xgb'])
print(threshold)

# Find prediction to the dataframe applying threshold
y_test2['pred'] = y_test2['y_pred_xgb'].map(lambda x: 1 if x > threshold[0] else 0)

print(confusion_matrix(y_test2['AtRiskFlag'], y_test2['pred']))
print(accuracy_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(precision_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(recall_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(roc_auc_score(y_test2['AtRiskFlag'], y_test2['pred']))

cm=confusion_matrix(y_test2['AtRiskFlag'], y_test2['pred'])
Precision=cm[1,1]/(cm[1][1]+cm[0][1])
Precision
Recall=cm[1,1]/(cm[1][1]+cm[1][0])
Recall

# https://medium.com/@dtuk81/confusion-matrix-visualization-fc31e3f30fea
sns.heatmap(cm, annot=True)

sns.heatmap(cm/np.sum(cm), annot=True, 
            fmt='.2%', cmap='Blues')

# https://stackoverflow.com/questions/35572000/how-can-i-plot-a-confusion-matrix

#print(model.feature_importances_)

# plot feature importance
plot_importance(model)
pyplot.show()

top_featuresXG= model.get_score(importance_type='gain') #https://stackoverflow.com/questions/37627923/how-to-get-feature-importance-in-xgboostS


# Shap
import shap
shap.initjs()

X_importance = X_test

explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_importance)

#shap.summary_plot(shap_values, X_importance, show=False, max_display=X_importance.shape[1])
shap.summary_plot(shap_values, X_importance, show=False,max_display=60)
shap.summary_plot(shap_values, X_importance, show=True)
plt.tight_layout()
plt.savefig('shap_output.jpeg')

shap.TreeExplainer(model).shap_values(X_train)
shap.summary_plot(shap_values, X_importance, plot_type = 'bar')

# https://github.com/slundberg/shap/issues/632

vals= np.abs(shap_values).mean(0)
feature_importance = pd.DataFrame(list(zip(X_train.columns,vals)),columns=['col_name','feature_importance_vals'])
feature_importance.sort_values(by=['feature_importance_vals'],ascending=False,inplace=True)
feature_importance.head()



### try v2 model
keep_features = feature_importance.iloc[1:51,:]
keep_features_col = keep_features['col_name'].to_list()


### ca model subset variables====
# -*- coding: utf-8 -*-
### try v2 model
keep_features = feature_importance.iloc[1:51,:]
keep_features_col = keep_features['col_name'].to_list()

keep_features_col.append('AtRiskFlag')
final_data2 = final_data[keep_features_col]
# https://stackoverflow.com/questions/38969267/python-pandas-selecting-columns-from-a-dataframe-via-a-list-of-column-names

### Xgboost=====================================
# https://www.datacamp.com/community/tutorials/xgboost-in-python
# https://machinelearningmastery.com/develop-first-xgboost-model-python-scikit-learn/
d1= final_data2
d1.columns

X= d1.drop("AtRiskFlag", axis=1)
Y = d1["AtRiskFlag"]

## splitting into test and train
seed = 7
test_size = 0.30
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)

# https://towardsdatascience.com/a-beginners-guide-to-xgboost-87f5d4c30ed7
D_train = xgb.DMatrix(X_train, label=y_train)
D_test = xgb.DMatrix(X_test, label=y_test)

param = {
  'eta': 0.3, 
  'max_depth': 8,  
  'objective':'binary:logistic', 'scale_pos_weight':13} 

steps = 20  # The number of training iterations
model = xgb.train(param, D_train, steps)

y_pred_xgb = model.predict(D_test)

X_train.shape
y_train.shape
X_test.shape
y_test.shape
y_pred_xgb.shape

#y_test['y_pred_xgb'] = model.predict(D_test)
#y_test.head()

y_test2 = y_test.to_frame()
y_test2.head()
y_test2['y_pred_xgb'] = model.predict(D_test)

# Find optimal probability threshold
threshold = Find_Optimal_Cutoff(y_test2['AtRiskFlag'], y_test2['y_pred_xgb'])
print(threshold)

# Find prediction to the dataframe applying threshold
y_test2['pred'] = y_test2['y_pred_xgb'].map(lambda x: 1 if x > threshold[0] else 0)

print(confusion_matrix(y_test2['AtRiskFlag'], y_test2['pred']))
print(accuracy_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(precision_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(recall_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(roc_auc_score(y_test2['AtRiskFlag'], y_test2['pred']))

cm=confusion_matrix(y_test2['AtRiskFlag'], y_test2['pred'])
Precision=cm[1,1]/(cm[1][1]+cm[0][1])
Precision
Recall=cm[1,1]/(cm[1][1]+cm[1][0])
Recall

# https://stackoverflow.com/questions/35572000/how-can-i-plot-a-confusion-matrix

#print(model.feature_importances_)

# plot feature importance
plot_importance(model)
pyplot.show()

top_featuresXG= model.get_score(importance_type='gain') #https://stackoverflow.com/questions/37627923/how-to-get-feature-importance-in-xgboostS


# Shap
import shap
shap.initjs()

X_importance = X_test

explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_importance)

#shap.summary_plot(shap_values, X_importance, show=False, max_display=X_importance.shape[1])
shap.summary_plot(shap_values, X_importance, show=False)
#shap.summary_plot(shap_values, X_importance, show=True)
plt.tight_layout()
shap.TreeExplainer(model).shap_values(X_train)
shap.summary_plot(shap_values, X_importance, plot_type = 'bar')

# https://github.com/slundberg/shap/issues/632

vals= np.abs(shap_values).mean(0)
feature_importance = pd.DataFrame(list(zip(X_train.columns,vals)),columns=['col_name','feature_importance_vals'])
feature_importance.sort_values(by=['feature_importance_vals'],ascending=False,inplace=True)
feature_importance.head()




########################################################################33
#Only M1 values, no Q1,Q2
final_data = pd.concat([f5,qual_data], axis = 1)

final_data2 = final_data.loc[:,(~final_data.columns.str.contains('Q1') & ~final_data.columns.str.contains('Q2'))]

d1= final_data2
d1.columns

X= d1.drop("AtRiskFlag", axis=1)
Y = d1["AtRiskFlag"]

## splitting into test and train
seed = 7
test_size = 0.30
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)

# https://towardsdatascience.com/a-beginners-guide-to-xgboost-87f5d4c30ed7
D_train = xgb.DMatrix(X_train, label=y_train)
D_test = xgb.DMatrix(X_test, label=y_test)

param = {
  'eta': 0.3, 
  'max_depth': 8,  
  'objective':'binary:logistic', 'scale_pos_weight':13} 

steps = 20  # The number of training iterations
model = xgb.train(param, D_train, steps)

y_pred_xgb = model.predict(D_test)

y_test2 = y_test.to_frame()
y_test2.head()
y_test2['y_pred_xgb'] = model.predict(D_test)

# Find optimal probability threshold
threshold = Find_Optimal_Cutoff(y_test2['AtRiskFlag'], y_test2['y_pred_xgb'])
print(threshold)

# Find prediction to the dataframe applying threshold
y_test2['pred'] = y_test2['y_pred_xgb'].map(lambda x: 1 if x > threshold[0] else 0)

print(confusion_matrix(y_test2['AtRiskFlag'], y_test2['pred']))
print(accuracy_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(precision_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(recall_score(y_test2['AtRiskFlag'], y_test2['pred']))
print(roc_auc_score(y_test2['AtRiskFlag'], y_test2['pred']))

cm=confusion_matrix(y_test2['AtRiskFlag'], y_test2['pred'])
Precision=cm[1,1]/(cm[1][1]+cm[0][1])
Precision
Recall=cm[1,1]/(cm[1][1]+cm[1][0])
Recall


